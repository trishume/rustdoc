(function() {var implementors = {};
implementors["bincode"] = ["impl&lt;'a, W:&nbsp;<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>, E:&nbsp;<a class=\"trait\" href=\"byteorder/trait.ByteOrder.html\" title=\"trait byteorder::ByteOrder\">ByteOrder</a>&gt; <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a> for &amp;'a mut <a class=\"struct\" href=\"bincode/internal/struct.Serializer.html\" title=\"struct bincode::internal::Serializer\">Serializer</a>&lt;W, E&gt;","impl&lt;'a, S:&nbsp;<a class=\"trait\" href=\"bincode/trait.SizeLimit.html\" title=\"trait bincode::SizeLimit\">SizeLimit</a>&gt; <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a> for &amp;'a mut SizeChecker&lt;S&gt;",];
implementors["plist"] = ["impl&lt;'a, W:&nbsp;<a class=\"trait\" href=\"plist/trait.EventWriter.html\" title=\"trait plist::EventWriter\">EventWriter</a>&gt; <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a> for &amp;'a mut <a class=\"struct\" href=\"plist/serde/struct.Serializer.html\" title=\"struct plist::serde::Serializer\">Serializer</a>&lt;W&gt;",];
implementors["serde_json"] = ["impl&lt;'a, W, F&gt; <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a> for &amp;'a mut <a class=\"struct\" href=\"serde_json/ser/struct.Serializer.html\" title=\"struct serde_json::ser::Serializer\">Serializer</a>&lt;W, F&gt; <span class=\"where fmt-newline\">where W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"serde_json/ser/trait.Formatter.html\" title=\"trait serde_json::ser::Formatter\">Formatter</a></span>",];
implementors["syntect"] = ["impl&lt;'a, W, F&gt; <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a> for &amp;'a mut <a class=\"struct\" href=\"serde_json/ser/struct.Serializer.html\" title=\"struct serde_json::ser::Serializer\">Serializer</a>&lt;W, F&gt; <span class=\"where fmt-newline\">where F: <a class=\"trait\" href=\"serde_json/ser/trait.Formatter.html\" title=\"trait serde_json::ser::Formatter\">Formatter</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a></span>","impl&lt;'a, W, E&gt; <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a> for &amp;'a mut <a class=\"struct\" href=\"bincode/ser/struct.Serializer.html\" title=\"struct bincode::ser::Serializer\">Serializer</a>&lt;W, E&gt; <span class=\"where fmt-newline\">where E: <a class=\"trait\" href=\"byteorder/trait.ByteOrder.html\" title=\"trait byteorder::ByteOrder\">ByteOrder</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a></span>","impl&lt;'a, S&gt; <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a> for &amp;'a mut SizeChecker&lt;S&gt; <span class=\"where fmt-newline\">where S: <a class=\"trait\" href=\"bincode/trait.SizeLimit.html\" title=\"trait bincode::SizeLimit\">SizeLimit</a></span>","impl&lt;'a, W&gt; <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a> for &amp;'a mut <a class=\"struct\" href=\"plist/serde/ser/struct.Serializer.html\" title=\"struct plist::serde::ser::Serializer\">Serializer</a>&lt;W&gt; <span class=\"where fmt-newline\">where W: <a class=\"trait\" href=\"plist/trait.EventWriter.html\" title=\"trait plist::EventWriter\">EventWriter</a></span>",];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
