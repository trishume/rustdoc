var searchIndex = {};
searchIndex["syntect"] = {"doc":"Welcome to the syntect docs.\nThese are still a work in progress but a lot of the important things have\nbeen documented already.","items":[[4,"LoadingError","syntect","Common error type used by syntax and theme loading",null,null],[13,"WalkDir","","",0,null],[13,"Io","","",0,null],[13,"ParseSyntax","","",0,null],[13,"ParseTheme","","",0,null],[13,"ReadSettings","","",0,null],[13,"BadPath","","",0,null],[0,"highlighting","","Everything having to do with turning parsed text into styled text.\nYou might want to check out `Theme` for its handy text-editor related\nsettings like selection colour, `ThemeSet` for loading themes,\nas well as things starting with `Highlight` for how to highlight text.",null,null],[11,"from_reader","rustc_serialize::json","Decodes a json value from an `&amp;mut io::Read`",1,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",1,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",1,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",1,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",1,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",1,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",1,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",1,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",1,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",1,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",1,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",1,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",1,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",1,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",1,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",1,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",1,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",1,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",1,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",1,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",1,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",1,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",1,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",1,null],[11,"encode","collections::string","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",7,null],[11,"decode","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",9,null],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",18,null],[11,"decode","","",18,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",19,null],[11,"decode","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","rustc_serialize::base64","",20,null],[11,"clone","","",20,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",22,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"description","","",23,null],[11,"fmt","","",23,null],[11,"clone","rustc_serialize::hex","",24,null],[11,"fmt","","",24,null],[11,"description","","",24,null],[11,"fmt","","",24,null],[11,"fmt","rustc_serialize::json","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"eq","","",25,null],[11,"clone","","",25,null],[11,"fmt","","",26,null],[11,"eq","","",26,null],[11,"fmt","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",25,null],[11,"description","","",27,null],[11,"cause","","",27,null],[11,"fmt","","",27,null],[11,"from","","",27,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",26,null],[11,"fmt","","",26,null],[11,"from","","",26,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",28,null],[11,"fmt","","",28,null],[11,"from","","",28,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",29,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",29,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",29,null],[11,"emit_nil","","",29,null],[11,"emit_usize","","",29,null],[11,"emit_u64","","",29,null],[11,"emit_u32","","",29,null],[11,"emit_u16","","",29,null],[11,"emit_u8","","",29,null],[11,"emit_isize","","",29,null],[11,"emit_i64","","",29,null],[11,"emit_i32","","",29,null],[11,"emit_i16","","",29,null],[11,"emit_i8","","",29,null],[11,"emit_bool","","",29,null],[11,"emit_f64","","",29,null],[11,"emit_f32","","",29,null],[11,"emit_char","","",29,null],[11,"emit_str","","",29,null],[11,"emit_enum","","",29,null],[11,"emit_enum_variant","","",29,null],[11,"emit_enum_variant_arg","","",29,null],[11,"emit_enum_struct_variant","","",29,null],[11,"emit_enum_struct_variant_field","","",29,null],[11,"emit_struct","","",29,null],[11,"emit_struct_field","","",29,null],[11,"emit_tuple","","",29,null],[11,"emit_tuple_arg","","",29,null],[11,"emit_tuple_struct","","",29,null],[11,"emit_tuple_struct_arg","","",29,null],[11,"emit_option","","",29,null],[11,"emit_option_none","","",29,null],[11,"emit_option_some","","",29,null],[11,"emit_seq","","",29,null],[11,"emit_seq_elt","","",29,null],[11,"emit_map","","",29,null],[11,"emit_map_elt_key","","",29,null],[11,"emit_map_elt_val","","",29,null],[11,"encode","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"new","","",32,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",32,null],[11,"is_empty","","Returns true if the stack is empty.",32,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",32,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",32,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",32,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",32,null],[11,"top","","Returns the top-most element (if any).",32,null],[11,"next","","",33,null],[11,"new","","Creates the JSON parser.",33,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",33,null],[11,"new","","Create a JSON Builder.",34,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",34,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",35,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",35,null],[11,"read_usize","","",35,null],[11,"read_u8","","",35,null],[11,"read_u16","","",35,null],[11,"read_u32","","",35,null],[11,"read_u64","","",35,null],[11,"read_isize","","",35,null],[11,"read_i8","","",35,null],[11,"read_i16","","",35,null],[11,"read_i32","","",35,null],[11,"read_i64","","",35,null],[11,"read_f32","","",35,null],[11,"read_f64","","",35,null],[11,"read_bool","","",35,null],[11,"read_char","","",35,null],[11,"read_str","","",35,null],[11,"read_enum","","",35,null],[11,"read_enum_variant","","",35,null],[11,"read_enum_variant_arg","","",35,null],[11,"read_enum_struct_variant","","",35,null],[11,"read_enum_struct_variant_field","","",35,null],[11,"read_struct","","",35,null],[11,"read_struct_field","","",35,null],[11,"read_tuple","","",35,null],[11,"read_tuple_arg","","",35,null],[11,"read_tuple_struct","","",35,null],[11,"read_tuple_struct_arg","","",35,null],[11,"read_option","","",35,null],[11,"read_seq","","",35,null],[11,"read_seq_elt","","",35,null],[11,"read_map","","",35,null],[11,"read_map_elt_key","","",35,null],[11,"read_map_elt_val","","",35,null],[11,"error","","",35,null],[11,"to_json","","",1,null],[11,"to_json","collections::string","",2,null],[11,"to_json","collections::vec","",6,null],[11,"to_json","collections::btree::map","",16,null],[11,"to_json","std::collections::hash::map","",18,null],[11,"to_json","core::option","",7,null],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",1,null],[11,"fmt","","Encodes a json value into a string",36,null],[11,"fmt","","Encodes a json value into a string",37,null],[11,"indent","","Set the indentation level for the emitted JSON",38,null],[11,"fmt","","Encodes a json value into a string",38,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[4,"Settings","syntect::highlighting","Represents a json value",null,null],[13,"I64","","",1,null],[13,"U64","","",1,null],[13,"F64","","",1,null],[13,"String","","",1,null],[13,"Boolean","","",1,null],[13,"Array","","",1,null],[13,"Object","","",1,null],[13,"Null","","",1,null],[6,"SettingsArray","","",null,null],[6,"SettingsObject","","",null,null],[3,"ScopeSelector","","A single selector consisting of a stack to match and a possible stack to exclude from being matched.\nYou probably want `ScopeSelectors` which is this but with union support.",null,null],[3,"ScopeSelectors","","A selector set that matches anything matched by any of its component selectors.\nSee [The TextMate Docs](https://manual.macromates.com/en/scope_selectors) for how these\nwork.",null,null],[12,"selectors","","",39,null],[3,"Style","","The foreground, background and font style",null,null],[12,"foreground","","Foreground color.",40,null],[12,"background","","Background color.",40,null],[12,"font_style","","Style of the font.",40,null],[3,"StyleModifier","","A change to a `Style` applied incrementally by a theme rule.",null,null],[12,"foreground","","Foreground color.",41,null],[12,"background","","Background color.",41,null],[12,"font_style","","Style of the font.",41,null],[3,"Color","","",null,null],[12,"r","","",42,null],[12,"g","","",42,null],[12,"b","","",42,null],[12,"a","","",42,null],[3,"FontStyle","","This can be a combination of `FONT_STYLE_BOLD`, `FONT_STYLE_UNDERLINE` and `FONT_STYLE_ITALIC`",null,null],[3,"Theme","","A theme parsed from a `.tmTheme` file.\nContains fields useful for a theme list as well as `settings` for styling your editor.",null,null],[12,"name","","",43,null],[12,"author","","",43,null],[12,"settings","","",43,null],[12,"scopes","","",43,null],[3,"ThemeSettings","","Various properties meant to be used to style a text editor.\nBasically all the styles that aren&#39;t directly applied to text like selection colour.\nUse this to make your editor UI match the highlighted text.",null,null],[12,"foreground","","Foreground color for the view.",44,null],[12,"background","","Backgound color of the view.",44,null],[12,"caret","","Color of the caret.",44,null],[12,"line_highlight","","Color of the line the caret is in.\nOnly used when the `higlight_line` setting is set to `true`.",44,null],[12,"bracket_contents_foreground","","Color of bracketed sections of text when the caret is in a bracketed section.\nOnly applied when the `match_brackets` setting is set to `true`.",44,null],[12,"bracket_contents_options","","Controls certain options when the caret is in a bracket section.\nOnly applied when the `match_brackets` setting is set to `true`.",44,null],[12,"brackets_foreground","","Foreground color of the brackets when the caret is next to a bracket.\nOnly applied when the `match_brackets` setting is set to `true`.",44,null],[12,"brackets_background","","Background color of the brackets when the caret is next to a bracket.\nOnly applied when the `match_brackets` setting is set to `true`.",44,null],[12,"brackets_options","","Controls certain options when the caret is next to a bracket.\nOnly applied when the match_brackets setting is set to `true`.",44,null],[12,"tags_foreground","","Color of tags when the caret is next to a tag.\nOnly used when the `match_tags` setting is set to `true`.",44,null],[12,"tags_options","","Controls certain options when the caret is next to a tag.\nOnly applied when the match_tags setting is set to `true`.",44,null],[12,"find_highlight","","Background color of regions matching the current search.",44,null],[12,"find_highlight_foreground","","Background color of regions matching the current search.",44,null],[12,"gutter","","Background color of the gutter.",44,null],[12,"gutter_foreground","","Foreground color of the gutter.",44,null],[12,"selection","","Color of the selection regions.",44,null],[12,"selection_background","","Background color of the selection regions.",44,null],[12,"selection_border","","Color of the selection regions border.",44,null],[12,"inactive_selection","","Color of inactive selections (inactive view).",44,null],[12,"guide","","Color of the guides displayed to indicate nesting levels.",44,null],[12,"active_guide","","Color of the guide lined up with the caret.\nOnly applied if the `indent_guide_options` setting is set to `draw_active`.",44,null],[12,"stack_guide","","Color of the current guide’s parent guide level.\nOnly used if the `indent_guide_options` setting is set to `draw_active`.",44,null],[12,"highlight","","Background color for regions added via `sublime.add_regions()`\nwith the `sublime.DRAW_OUTLINED` flag added.",44,null],[12,"highlight_foreground","","Foreground color for regions added via `sublime.add_regions()`\nwith the `sublime.DRAW_OUTLINED` flag added.",44,null],[3,"ThemeItem","","A component of a theme meant to highlight a specific thing (e.g string literals)\nin a certain way.",null,null],[12,"scope","","Target scope name.",45,null],[12,"style","","",45,null],[3,"Highlighter","","Basically a wrapper around a `Theme` preparing it to be used for highlighting.\nThis is part of the API to preserve the possibility of caching\nmatches of the selectors of the theme on various scope paths\nor setting up some kind of accelerator structure.",null,null],[3,"HighlightState","","Keeps a stack of scopes and styles as state between highlighting different lines.\nIf you are highlighting an entire file you create one of these at the start and use it\nall the way to the end.",null,null],[12,"path","","",46,null],[3,"HighlightIterator","","Highlights a line of parsed code given a `HighlightState`\nand line of changes from the parser.",null,null],[3,"ThemeSet","","",null,null],[12,"themes","","",47,null],[4,"SettingsError","","",null,null],[13,"Plist","","",48,null],[4,"UnderlineOption","","",null,null],[13,"None","","",49,null],[13,"Underline","","",49,null],[13,"StippledUnderline","","",49,null],[13,"SquigglyUnderline","","",49,null],[4,"ParseThemeError","","",null,null],[13,"IncorrectUnderlineOption","","",50,null],[13,"IncorrectFontStyle","","",50,null],[13,"IncorrectColor","","",50,null],[13,"IncorrectSyntax","","",50,null],[13,"IncorrectSettings","","",50,null],[13,"UndefinedSettings","","",50,null],[13,"UndefinedScopeSettings","","",50,null],[13,"ColorShemeScopeIsNotObject","","",50,null],[13,"ColorShemeSettingsIsNotObject","","",50,null],[13,"ScopeSelectorIsNotString","","",50,null],[13,"DuplicateSettings","","",50,null],[13,"ScopeParse","","",50,null],[5,"read_plist","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",51,null],[11,"default","","",51,{"inputs":[],"output":{"name":"scopeselector"}}],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",39,null],[11,"default","","",39,{"inputs":[],"output":{"name":"scopeselectors"}}],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"clone","","",39,null],[11,"fmt","","",39,null],[11,"does_match","","",51,null],[11,"from_str","","",51,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"does_match","","",39,null],[11,"from_str","","checks if any of these selectors match the given scope stack\nif so it returns a match score, higher match scores are stronger\nmatches. Scores are ordered according to the rules found\nat https://manual.macromates.com/en/scope_selectors",39,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",48,null],[11,"from","","",48,{"inputs":[{"name":"plisterror"}],"output":{"name":"settingserror"}}],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"clone","","",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"stylemodifier"}}],[11,"fmt","","",41,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"hash","","",52,null],[11,"cmp","","",52,null],[11,"partial_cmp","","",52,null],[11,"lt","","",52,null],[11,"le","","",52,null],[11,"gt","","",52,null],[11,"ge","","",52,null],[11,"clone","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",52,null],[11,"fmt","","",52,null],[11,"empty","","Returns an empty set of flags.",52,{"inputs":[],"output":{"name":"fontstyle"}}],[11,"all","","Returns the set containing all flags.",52,{"inputs":[],"output":{"name":"fontstyle"}}],[11,"bits","","Returns the raw value of the flags currently stored.",52,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",52,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",52,{"inputs":[{"name":"u8"}],"output":{"name":"fontstyle"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",52,null],[11,"is_all","","Returns `true` if all flags are currently set.",52,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",52,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",52,null],[11,"insert","","Inserts the specified flags in-place.",52,null],[11,"remove","","Removes the specified flags in-place.",52,null],[11,"toggle","","Toggles the specified flags in-place.",52,null],[11,"bitor","","Returns the union of the two sets of flags.",52,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",52,null],[11,"bitand","","Returns the intersection between the two sets of flags.",52,null],[11,"sub","","Returns the set difference of the two sets of flags.",52,null],[11,"not","","Returns the complement of this set of flags.",52,null],[11,"from_iter","","",52,{"inputs":[{"name":"t"}],"output":{"name":"fontstyle"}}],[11,"apply","","Applies a change to this style, yielding a new changed style",40,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"theme"}}],[11,"fmt","","",43,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",44,null],[11,"default","","",44,{"inputs":[],"output":{"name":"themesettings"}}],[11,"fmt","","",44,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",45,null],[11,"default","","",45,{"inputs":[],"output":{"name":"themeitem"}}],[11,"fmt","","",45,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",49,null],[11,"fmt","","",49,null],[11,"fmt","","",50,null],[11,"from","","",50,{"inputs":[{"name":"parsescopeerror"}],"output":{"name":"parsethemeerror"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"underlineoption"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"fontstyle"}}],[11,"from_str","","",49,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_settings","","",49,{"inputs":[{"name":"settings"}],"output":{"name":"result"}}],[11,"from_str","","",52,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_settings","","",52,{"inputs":[{"name":"settings"}],"output":{"name":"result"}}],[11,"from_str","","",42,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"parse_settings","","",42,{"inputs":[{"name":"settings"}],"output":{"name":"result"}}],[11,"parse_settings","","",41,{"inputs":[{"name":"settings"}],"output":{"name":"result"}}],[11,"parse_settings","","",45,{"inputs":[{"name":"settings"}],"output":{"name":"result"}}],[11,"parse_settings","","",44,{"inputs":[{"name":"settings"}],"output":{"name":"result"}}],[11,"parse_settings","","",43,{"inputs":[{"name":"settings"}],"output":{"name":"result"}}],[11,"fmt","","",53,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",46,null],[11,"fmt","","",54,null],[11,"new","","Note that the `Highlighter` is not stored, it is used to construct the initial\nstack of styles. Most of the time you&#39;ll want to pass an empty stack as `initial_stack`\nbut see the docs for `HighlightState` for discussion of advanced caching use cases.",46,{"inputs":[{"name":"highlighter"},{"name":"scopestack"}],"output":{"name":"highlightstate"}}],[11,"new","","",54,null],[11,"next","","Yields the next token of text and the associated `Style` to render that text with.\nthe concatenation of the strings in each token will make the original string.",54,null],[11,"new","","",53,{"inputs":[{"name":"theme"}],"output":{"name":"highlighter"}}],[11,"get_default","","The default style in the absence of any matched rules.\nBasically what plain text gets highlighted as.",53,null],[11,"get_style","","Figures out which scope selector in the theme best matches this scope stack.\nIt only returns any changes to the style that should be applied when the top element\nis pushed on to the stack. These actually aren&#39;t guaranteed to be different than the current\nstyle. Basically what this means is that you have to gradually apply styles starting with the\ndefault and working your way up the stack in order to get the correct style.",53,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",47,null],[11,"fmt","","",47,null],[11,"discover_theme_paths","","Returns all the themes found in a folder, good for enumerating before loading one with get_theme",47,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"get_theme","","Loads a theme given a path to a .tmTheme file",47,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"load_from_folder","","Loads all the themes in a folder",47,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[17,"BLACK","","",null,null],[17,"WHITE","","",null,null],[17,"FONT_STYLE_BOLD","","",null,null],[17,"FONT_STYLE_UNDERLINE","","",null,null],[17,"FONT_STYLE_ITALIC","","",null,null],[8,"FromSettings","","",null,null],[10,"from_settings","","",55,{"inputs":[{"name":"settings"}],"output":{"name":"self"}}],[8,"ParseSettings","","",null,null],[16,"Error","","",56,null],[10,"parse_settings","","",56,{"inputs":[{"name":"settings"}],"output":{"name":"result"}}],[0,"parsing","syntect","Everything about parsing text into text annotated with scopes.\nThe most important struct here is `SyntaxSet`, check out the docs for that.",null,null],[3,"SyntaxSet","syntect::parsing","A syntax set holds a bunch of syntaxes and manages\nloading them and the crucial operation of *linking*.",null,null],[12,"syntaxes","","",57,null],[12,"is_linked","","",57,null],[3,"SCOPE_REPO","","",null,null],[3,"Scope","","A hierarchy of atoms with semi-standardized names\nused to accord semantic information to a specific piece of text.\nGenerally written with the atoms separated by dots.\nBy convention atoms are all lowercase alphanumeric.",null,null],[3,"ScopeRepository","","",null,null],[3,"ScopeStack","","A stack/sequence of scopes. This is used both to represent hierarchies for a given\ntoken of text, as well as in `ScopeSelectors`. Press `ctrl+shift+p` in Sublime Text\nto see the scope stack at a given point.\nAlso see [the TextMate docs](https://manual.macromates.com/en/scope_selectors).",null,null],[3,"MatchPower","","Wrapper to get around the fact Rust f64 doesn&#39;t implement Ord\nand there is no non-NaN float type",null,null],[12,"0","","",58,null],[3,"ParseState","","Keeps the current parser state (the internal syntax interpreter stack) between lines of parsing.\nIf you are parsing an entire file you create one of these at the start and use it\nall the way to the end.",null,null],[4,"ParseSyntaxError","","",null,null],[13,"InvalidYaml","","",59,null],[13,"EmptyFile","","",59,null],[13,"MissingMandatoryKey","","",59,null],[13,"RegexCompileError","","",59,null],[13,"InvalidScope","","",59,null],[13,"BadFileRef","","",59,null],[13,"MainMissing","","",59,null],[13,"TypeMismatch","","",59,null],[4,"ParseScopeError","","",null,null],[13,"TooLong","","Due to a limitation of the current optimized internal representation\nscopes can be at most 8 atoms long",60,null],[13,"TooManyAtoms","","The internal representation uses 16 bits per atom, so if all scopes ever\nused by the program have more than 2^16-2 atoms, things break",60,null],[4,"ScopeStackOp","","A change to a scope stack. Generally `Noop` is only used internally and you don&#39;t have\nto worry about ever getting one back from a public function.\nUse `ScopeStack#apply` to apply this change.",null,null],[13,"Push","","",61,null],[13,"Pop","","",61,null],[13,"Noop","","",61,null],[0,"syntax_definition","","This module contains data structures for representing syntax definitions.\nEverything is public because I want this library to be useful in super\nintegrated cases like text editors and I have no idea what kind of monkeying\nyou might want to do with the data. Perhaps parsing your own syntax format\ninto this data structure?",null,null],[3,"SyntaxDefinition","syntect::parsing::syntax_definition","The main data structure representing a syntax definition loaded from a\n`.sublime-syntax` file. You&#39;ll probably only need these as references\nto be passed around to parsing code.",null,null],[12,"name","","",62,null],[12,"file_extensions","","",62,null],[12,"scope","","",62,null],[12,"first_line_match","","",62,null],[12,"hidden","","",62,null],[12,"variables","","",62,null],[12,"contexts","","",62,null],[3,"Context","","",null,null],[12,"meta_scope","","",63,null],[12,"meta_content_scope","","",63,null],[12,"meta_include_prototype","","",63,null],[12,"uses_backrefs","","",63,null],[12,"patterns","","",63,null],[3,"MatchIter","","Used to iterate over all the match patterns in a context.\nBasically walks the tree of patterns and include directives\nin the correct order.",null,null],[3,"MatchPattern","","",null,null],[12,"has_captures","","",64,null],[12,"regex_str","","",64,null],[12,"regex","","",64,null],[12,"scope","","",64,null],[12,"captures","","",64,null],[12,"operation","","",64,null],[12,"with_prototype","","",64,null],[3,"LinkerLink","","This wrapper only exists so that I can implement a serialization\ntrait that crashes if you try and serialize this.",null,null],[12,"link","","",65,null],[4,"Pattern","","",null,null],[13,"Match","","",66,null],[13,"Include","","",66,null],[4,"ContextReference","","",null,null],[13,"Named","","",67,null],[13,"ByScope","","",67,null],[12,"scope","syntect::parsing::syntax_definition::ContextReference","",67,null],[12,"sub_context","","",67,null],[13,"File","syntect::parsing::syntax_definition","",67,null],[12,"name","syntect::parsing::syntax_definition::ContextReference","",67,null],[12,"sub_context","","",67,null],[13,"Inline","syntect::parsing::syntax_definition","",67,null],[13,"Direct","","",67,null],[4,"MatchOperation","","",null,null],[13,"Push","","",68,null],[13,"Set","","",68,null],[13,"Pop","","",68,null],[13,"None","","",68,null],[5,"context_iter","","Returns an iterator over all the match patterns in this context.\nIt recursively follows include directives. Can only be run on\ncontexts that have already been linked up.",null,{"inputs":[{"name":"contextptr"}],"output":{"name":"matchiter"}}],[6,"CaptureMapping","","",null,null],[6,"ContextPtr","","",null,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",62,null],[11,"fmt","","",62,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",63,null],[11,"fmt","","",63,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,null],[11,"fmt","","",66,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,null],[11,"fmt","","",69,null],[11,"fmt","","",64,null],[11,"fmt","","",65,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,null],[11,"fmt","","",67,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,null],[11,"fmt","","",68,null],[11,"next","","",69,null],[11,"match_at","","",63,null],[11,"match_at_mut","","",63,null],[11,"resolve","","find the pointed to context, panics if ref is not linked",67,null],[11,"regex_with_substitutes","","substitutes back-refs in Regex with regions from s\nused for match patterns which refer to captures from the pattern\nthat pushed them.",64,null],[11,"compile_with_refs","","Used by the parser to compile a regex which needs to reference\nregions from another matched pattern.",64,null],[11,"ensure_compiled_if_possible","","Makes sure the regex is compiled if it doesn&#39;t have captures.\nMay compile the regex if it isn&#39;t, panicing if compilation fails.",64,null],[11,"encode","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","syntect::parsing","",59,null],[11,"load_from_str","syntect::parsing::syntax_definition","",62,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"decode","syntect::parsing","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",57,null],[11,"fmt","","",57,null],[11,"new","","",57,{"inputs":[],"output":{"name":"syntaxset"}}],[11,"load_from_folder","","Convenience constructor calling `new` and then `load_syntaxes` on the resulting set\ndefaults to lines given not including newline characters, see the\n`load_syntaxes` method docs for an explanation as to why this might not be the best.\nIt also links all the syntaxes together, see `link_syntaxes` for what that means.",57,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"load_syntaxes","","Loads all the .sublime-syntax files in a folder into this syntax set.\nIt does not link the syntaxes, in case you want to serialize this syntax set.",57,null],[11,"load_plain_text_syntax","","Rarely useful method that loads in a syntax with no highlighting rules for plain text.\nExists mainly for adding the plain text syntax to syntax set dumps, because for some\nreason the default Sublime plain text syntax is still in `.tmLanguage` format.",57,null],[11,"find_syntax_by_scope","","Finds a syntax by its default scope, for example `source.regexp` finds the regex syntax.\nThis and all similar methods below do a linear search of syntaxes, this should be fast\nbecause there aren&#39;t many syntaxes, but don&#39;t think you can call it a bajillion times per second.",57,null],[11,"find_syntax_by_name","","",57,null],[11,"find_syntax_by_extension","","",57,null],[11,"find_syntax_by_token","","Searches for a syntax first by extension and then by case-insensitive name\nuseful for things like Github-flavoured-markdown code block highlighting where\nall you have to go on is a short token given by the user",57,null],[11,"find_syntax_plain_text","","Finds a syntax for plain text, which usually has no highlighting rules.\nGood as a fallback when you can&#39;t find another syntax but you still want\nto use the same highlighting pipeline code.",57,null],[11,"link_syntaxes","","This links all the syntaxes in this set directly with pointers for performance purposes.\nIt is necessary to do this before parsing anything with these syntaxes.\nHowever, it is not possible to serialize a syntax set that has been linked,\nwhich is why it isn&#39;t done by default, except by the load_from_folder constructor.\nThis operation is idempotent, but takes time even on already linked syntax sets.",57,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",70,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",70,null],[11,"try_lock","","Attempts to acquire this lock.",70,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",70,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",70,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",70,null],[11,"from","alloc::boxed","",3,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",3,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",71,null],[11,"description","","",72,null],[11,"description","core::num","",73,null],[11,"description","","",74,null],[11,"description","core::num::dec2flt","",75,null],[11,"description","collections::string","",76,null],[11,"description","","",77,null],[11,"description","","",78,null],[11,"description","rustc_unicode::char","",79,null],[11,"description","alloc::boxed","",3,null],[11,"cause","","",3,null],[11,"description","core::fmt","",80,null],[11,"is","syntect::parsing","Returns true if the boxed type is the same as `T`",81,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",81,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",81,null],[11,"is","","Forwards to the method defined on the type `Any`.",81,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",81,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",81,null],[11,"is","","Forwards to the method defined on the type `Any`.",81,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",81,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",81,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",81,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",81,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",81,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"next","std::ascii","",82,null],[11,"size_hint","","",82,null],[11,"next_back","","",82,null],[11,"clone","std::thread::local","",83,null],[11,"eq","","",83,null],[11,"with","","Acquires a reference to the value in this TLS key.",84,null],[11,"state","","Query the current state of this key.",84,null],[11,"new","std::thread::local::elf","",85,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",85,null],[11,"new","std::thread::local::os","",86,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",86,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",87,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",87,null],[11,"stack_size","","Sets the size of the stack for the new thread.",87,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",87,null],[11,"clone","","",88,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",88,null],[11,"name","","Gets the thread&#39;s name.",88,null],[11,"fmt","","",88,null],[11,"thread","","Extracts a handle to the underlying thread",89,null],[11,"join","","Waits for the associated thread to finish.",89,null],[11,"clone","std::collections::hash::map","",18,null],[11,"new","","Creates an empty HashMap.",18,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",18,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",18,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",18,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",18,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",18,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",18,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",18,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",18,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",18,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",18,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",18,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",18,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",18,null],[11,"len","","Returns the number of elements in the map.",18,null],[11,"is_empty","","Returns true if the map contains no elements.",18,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",18,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",18,null],[11,"get","","Returns a reference to the value corresponding to the key.",18,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",18,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",18,null],[11,"insert","","Inserts a key-value pair into the map.",18,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",18,null],[11,"eq","","",18,null],[11,"fmt","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",18,null],[11,"clone","","",90,null],[11,"clone","","",91,null],[11,"clone","","",92,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",18,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"len","","",90,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"len","","",93,null],[11,"next","","",94,null],[11,"size_hint","","",94,null],[11,"len","","",94,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"len","","",91,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"len","","",92,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"len","","",95,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"len","","",96,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",97,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",97,null],[11,"key","","Returns a reference to this entry&#39;s key.",97,null],[11,"key","","Gets a reference to the key in the entry.",98,null],[11,"remove_pair","","Take the ownership of the key and value from the map.",98,null],[11,"get","","Gets a reference to the value in the entry.",98,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",98,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",98,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",98,null],[11,"remove","","Takes the value out of the entry, and returns it",98,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",99,null],[11,"into_key","","Take ownership of the key.",99,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",99,null],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",18,null],[11,"extend","","",18,null],[11,"clone","","",100,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",100,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",100,null],[11,"default","","",100,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",19,null],[11,"new","","Creates an empty HashSet.",19,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",19,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",19,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",19,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",19,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",19,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",19,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",19,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",19,null],[11,"difference","","Visit the values representing the difference.",19,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",19,null],[11,"intersection","","Visit the values representing the intersection.",19,null],[11,"union","","Visit the values representing the union.",19,null],[11,"len","","Returns the number of elements in the set.",19,null],[11,"is_empty","","Returns true if the set contains no elements.",19,null],[11,"drain","","Clears the set, returning all elements in an iterator.",19,null],[11,"clear","","Clears the set, removing all values.",19,null],[11,"contains","","Returns `true` if the set contains a value.",19,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",19,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",19,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",19,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",19,null],[11,"insert","","Adds a value to the set.",19,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",19,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",19,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",19,null],[11,"eq","","",19,null],[11,"fmt","","",19,null],[11,"from_iter","","",19,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",19,null],[11,"extend","","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",19,null],[11,"clone","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"len","","",101,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"len","","",102,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"len","","",103,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"size_hint","","",106,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"clone","collections::binary_heap","",108,null],[11,"clone_from","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",108,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",108,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",108,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",108,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",108,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",108,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",108,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",108,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",108,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",108,null],[11,"push","","Pushes an item onto the binary heap.",108,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",108,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",108,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",108,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",108,null],[11,"len","","Returns the length of the binary heap.",108,null],[11,"is_empty","","Checks if the binary heap is empty.",108,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",108,null],[11,"clear","","Drops all items from the binary heap.",108,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",108,null],[11,"clone","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"clone","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"next_back","","",110,null],[11,"next","","",111,null],[11,"size_hint","","",111,null],[11,"next_back","","",111,null],[11,"from","","",108,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",6,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",108,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",108,null],[11,"extend","","",108,null],[11,"extend","","",108,null],[11,"clone","collections::vec_deque","",15,null],[11,"drop","","",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",15,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",15,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",15,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",15,null],[11,"swap","","Swaps elements at indices `i` and `j`.",15,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",15,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",15,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",15,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",15,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",15,null],[11,"iter","","Returns a front-to-back iterator.",15,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",15,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",15,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",15,null],[11,"len","","Returns the number of elements in the `VecDeque`.",15,null],[11,"is_empty","","Returns true if the buffer contains no elements",15,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",15,null],[11,"clear","","Clears the buffer, removing all values.",15,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",15,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",15,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",15,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",15,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",15,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",15,null],[11,"push_front","","Inserts an element first in the sequence.",15,null],[11,"push_back","","Appends an element to the back of a buffer",15,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",15,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",15,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",15,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",15,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",15,null],[11,"split_off","","Splits the collection into two at the given index.",15,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",15,null],[11,"retain","","Retains only the elements specified by the predicate.",15,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",15,null],[11,"clone","","",112,null],[11,"next","","",112,null],[11,"size_hint","","",112,null],[11,"next_back","","",112,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"next_back","","",113,null],[11,"clone","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"next_back","","",114,null],[11,"drop","","",115,null],[11,"next","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"eq","","",15,null],[11,"partial_cmp","","",15,null],[11,"cmp","","",15,null],[11,"hash","","",15,null],[11,"index","","",15,null],[11,"index_mut","","",15,null],[11,"from_iter","","",15,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",15,null],[11,"extend","","",15,null],[11,"extend","","",15,null],[11,"fmt","","",15,null],[11,"from","","",15,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",6,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"clone","collections::linked_list","",116,null],[11,"clone","","",117,null],[11,"default","","",14,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",14,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",14,null],[11,"iter","","Provides a forward iterator.",14,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",14,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",14,null],[11,"len","","Returns the length of the `LinkedList`.",14,null],[11,"clear","","Removes all elements from the `LinkedList`.",14,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",14,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",14,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",14,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",14,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",14,null],[11,"push_front","","Adds an element first in the list.",14,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",14,null],[11,"push_back","","Appends an element to the back of a list",14,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",14,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",14,null],[11,"front_place","","Returns a place for insertion at the front of the list.",14,null],[11,"back_place","","Returns a place for insertion at the back of the list.",14,null],[11,"drop","","",14,null],[11,"next","","",116,null],[11,"size_hint","","",116,null],[11,"next_back","","",116,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",118,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",118,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"next_back","","",117,null],[11,"from_iter","","",14,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",14,null],[11,"extend","","",14,null],[11,"extend","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"partial_cmp","","",14,null],[11,"cmp","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"hash","","",14,null],[11,"make_place","","",119,null],[11,"pointer","","",119,null],[11,"finalize","","",119,null],[11,"make_place","","",120,null],[11,"pointer","","",120,null],[11,"finalize","","",120,null],[11,"next","std::env","",121,null],[11,"size_hint","","",121,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"clone","","",123,null],[11,"eq","","",123,null],[11,"ne","","",123,null],[11,"fmt","","",123,null],[11,"fmt","","",123,null],[11,"description","","",123,null],[11,"next","","",124,null],[11,"size_hint","","",124,null],[11,"fmt","","",125,null],[11,"fmt","","",125,null],[11,"description","","",125,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"len","","",126,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"len","","",127,null],[11,"clone","std::ffi::c_str","",128,null],[11,"hash","","",128,null],[11,"cmp","","",128,null],[11,"partial_cmp","","",128,null],[11,"lt","","",128,null],[11,"le","","",128,null],[11,"gt","","",128,null],[11,"ge","","",128,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"hash","","",129,null],[11,"fmt","","",130,null],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"eq","","",131,null],[11,"ne","","",131,null],[11,"clone","","",131,null],[11,"fmt","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"clone","","",132,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",128,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",128,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",128,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",128,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",128,null],[11,"into_bytes","","Returns the underlying byte buffer.",128,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",128,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",128,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",128,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",129,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",129,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",129,null],[11,"as_ptr","","Returns the inner pointer to this C string.",129,null],[11,"to_bytes","","Converts this C string to a byte slice.",129,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",129,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",129,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",129,null],[11,"deref","","",128,null],[11,"fmt","","",128,null],[11,"from","collections::vec","",6,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",129,null],[11,"default","","",128,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",128,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",130,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",130,null],[11,"description","","",130,null],[11,"fmt","","",130,null],[11,"from","std::io::error","",133,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",132,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",132,null],[11,"description","","",132,null],[11,"cause","","",132,null],[11,"fmt","","",132,null],[11,"eq","","",129,null],[11,"partial_cmp","","",129,null],[11,"cmp","","",129,null],[11,"to_owned","","",129,null],[11,"from","","",128,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",128,null],[11,"as_ref","","",129,null],[11,"as_ref","","",128,null],[11,"clone","std::ffi::os_str","",134,null],[11,"new","","Constructs a new empty `OsString`.",134,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",134,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",134,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",134,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",134,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",134,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",134,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",134,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",134,null],[11,"from","","",134,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",134,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",134,null],[11,"new","","Coerces into an `OsStr` slice.",135,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",135,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",135,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",135,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",135,null],[11,"len","","Returns the length of this `OsStr`.",135,null],[11,"deref","","",134,null],[11,"default","","",134,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",134,null],[11,"eq","","",134,null],[11,"eq","","",134,null],[11,"partial_cmp","","",134,null],[11,"lt","","",134,null],[11,"le","","",134,null],[11,"gt","","",134,null],[11,"ge","","",134,null],[11,"partial_cmp","","",134,null],[11,"cmp","","",134,null],[11,"hash","","",134,null],[11,"eq","","",135,null],[11,"eq","","",135,null],[11,"partial_cmp","","",135,null],[11,"lt","","",135,null],[11,"le","","",135,null],[11,"gt","","",135,null],[11,"ge","","",135,null],[11,"partial_cmp","","",135,null],[11,"cmp","","",135,null],[11,"eq","","",134,null],[11,"eq","","",135,null],[11,"partial_cmp","","",134,null],[11,"partial_cmp","","",135,null],[11,"eq","","",134,null],[11,"partial_cmp","","",134,null],[11,"eq","collections::borrow","",5,null],[11,"eq","std::ffi::os_str","",135,null],[11,"partial_cmp","collections::borrow","",5,null],[11,"partial_cmp","std::ffi::os_str","",135,null],[11,"eq","collections::borrow","",5,null],[11,"partial_cmp","","",5,null],[11,"eq","","",5,null],[11,"eq","std::ffi::os_str","",134,null],[11,"partial_cmp","collections::borrow","",5,null],[11,"partial_cmp","std::ffi::os_str","",134,null],[11,"hash","","",135,null],[11,"fmt","","",135,null],[11,"borrow","","",134,null],[11,"to_owned","","",135,null],[11,"as_ref","","",135,null],[11,"as_ref","","",134,null],[11,"as_ref","collections::string","",2,null],[11,"clone","std::fs","",136,null],[11,"clone","","",137,null],[11,"fmt","","",138,null],[11,"eq","","",138,null],[11,"ne","","",138,null],[11,"clone","","",138,null],[11,"hash","","",139,null],[11,"eq","","",139,null],[11,"ne","","",139,null],[11,"clone","","",139,null],[11,"open","","Attempts to open a file in read-only mode.",140,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",140,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",140,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",140,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",140,null],[11,"metadata","","Queries metadata about the underlying file.",140,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",140,null],[11,"fmt","","",140,null],[11,"read","","",140,null],[11,"read_to_end","","",140,null],[11,"write","","",140,null],[11,"flush","","",140,null],[11,"seek","","",140,null],[11,"new","","Creates a blank new set of options ready for configuration.",137,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",137,null],[11,"write","","Sets the option for write access.",137,null],[11,"append","","Sets the option for the append mode.",137,null],[11,"truncate","","Sets the option for truncating a previous file.",137,null],[11,"create","","Sets the option for creating a new file.",137,null],[11,"create_new","","Sets the option to always create a new file.",137,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",137,null],[11,"file_type","","Returns the file type for this metadata.",136,null],[11,"is_dir","","Returns whether this metadata is for a directory.",136,null],[11,"is_file","","Returns whether this metadata is for a regular file.",136,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",136,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",136,null],[11,"modified","","Returns the last modification time listed in this metadata.",136,null],[11,"accessed","","Returns the last access time of this metadata.",136,null],[11,"created","","Returns the creation time listed in the this metadata.",136,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",138,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",138,null],[11,"is_dir","","Test whether this file type represents a directory.",139,null],[11,"is_file","","Test whether this file type represents a regular file.",139,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",139,null],[11,"next","","",141,null],[11,"path","","Returns the full path to the file that this entry represents.",142,null],[11,"metadata","","Return the metadata for the file that this entry points at.",142,null],[11,"file_type","","Return the file type for the file that this entry points at.",142,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",142,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",143,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",143,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",143,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",144,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",144,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",144,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",144,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",144,null],[11,"read","","",144,null],[11,"fill_buf","","",144,null],[11,"consume","","",144,null],[11,"fmt","","",144,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",144,null],[11,"fmt","","",145,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",146,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",146,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",146,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",146,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",146,null],[11,"write","","",146,null],[11,"flush","","",146,null],[11,"fmt","","",146,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",146,null],[11,"drop","","",146,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",145,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",145,null],[11,"from","std::io::error","",133,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",145,null],[11,"fmt","","",145,null],[11,"new","","Creates a new `LineWriter`.",147,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",147,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",147,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",147,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",147,null],[11,"write","","",147,null],[11,"flush","","",147,null],[11,"fmt","","",147,null],[11,"fmt","std::io::cursor","",148,null],[11,"clone","","",148,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",148,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",148,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",148,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",148,null],[11,"position","","Returns the current position of this cursor.",148,null],[11,"set_position","","Sets the position of this cursor.",148,null],[11,"seek","","",148,null],[11,"read","","",148,null],[11,"fill_buf","","",148,null],[11,"consume","","",148,null],[11,"write","","",148,null],[11,"flush","","",148,null],[11,"write","","",148,null],[11,"flush","","",148,null],[11,"write","","",148,null],[11,"flush","","",148,null],[11,"fmt","std::io::error","",133,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"eq","","",149,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",133,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",133,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",133,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",133,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",133,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",133,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",133,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",133,null],[11,"fmt","","",133,null],[11,"description","","",133,null],[11,"cause","","",133,null],[11,"read","alloc::boxed","",3,null],[11,"read_to_end","","",3,null],[11,"read_to_string","","",3,null],[11,"read_exact","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,null],[11,"write_all","","",3,null],[11,"write_fmt","","",3,null],[11,"seek","","",3,null],[11,"fill_buf","","",3,null],[11,"consume","","",3,null],[11,"read_until","","",3,null],[11,"read_line","","",3,null],[11,"write","collections::vec","",6,null],[11,"write_all","","",6,null],[11,"flush","","",6,null],[11,"read","std::io::util","",150,null],[11,"fill_buf","","",150,null],[11,"consume","","",150,null],[11,"read","","",151,null],[11,"write","","",152,null],[11,"flush","","",152,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",153,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",153,null],[11,"read","","",153,null],[11,"read_to_end","","",153,null],[11,"read_to_string","","",153,null],[11,"read_exact","","",153,null],[11,"read","","",154,null],[11,"read_to_end","","",154,null],[11,"fill_buf","","",154,null],[11,"consume","","",154,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",155,null],[11,"write","","",155,null],[11,"flush","","",155,null],[11,"write_all","","",155,null],[11,"write_fmt","","",155,null],[11,"write","","",156,null],[11,"flush","","",156,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",157,null],[11,"write","","",157,null],[11,"flush","","",157,null],[11,"write_all","","",157,null],[11,"write_fmt","","",157,null],[11,"write","","",158,null],[11,"flush","","",158,null],[11,"fmt","std::io","",159,null],[11,"clone","","",159,null],[11,"eq","","",159,null],[11,"ne","","",159,null],[11,"read","","",160,null],[11,"fill_buf","","",160,null],[11,"consume","","",160,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",161,null],[11,"read","","",161,null],[11,"fill_buf","","",161,null],[11,"consume","","",161,null],[11,"next","","",162,null],[11,"fmt","","",163,null],[11,"next","","",164,null],[11,"description","","",163,null],[11,"cause","","",163,null],[11,"fmt","","",163,null],[11,"next","","",165,null],[11,"next","","",166,null],[11,"cmp","std::net::ip","",167,null],[11,"partial_cmp","","",167,null],[11,"lt","","",167,null],[11,"le","","",167,null],[11,"gt","","",167,null],[11,"ge","","",167,null],[11,"hash","","",167,null],[11,"fmt","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"clone","","",167,null],[11,"fmt","","",168,null],[11,"hash","","",168,null],[11,"clone","","",168,null],[11,"eq","","",168,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",169,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",169,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (0.0.0.0).",169,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",169,null],[11,"is_private","","Returns true if this is a private address.",169,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",169,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",169,null],[11,"is_multicast","","Returns true if this is a multicast address (224.0.0.0/4).",169,null],[11,"is_broadcast","","Returns true if this is a broadcast address (255.255.255.255).",169,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",169,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",169,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",169,null],[11,"fmt","","",167,null],[11,"fmt","","",169,null],[11,"fmt","","",169,null],[11,"clone","","",169,null],[11,"eq","","",169,null],[11,"hash","","",169,null],[11,"partial_cmp","","",169,null],[11,"cmp","","",169,null],[11,"from","","",169,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",169,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",170,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",170,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (::).",170,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",170,null],[11,"is_global","","Returns true if the address appears to be globally routable.",170,null],[11,"is_unique_local","","Returns true if this is a unique local address (fc00::/7).",170,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",170,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address\n(fec0::/10).",170,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\n(2001:db8::/32).",170,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",170,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",170,null],[11,"is_multicast","","Returns true if this is a multicast address (ff00::/8).",170,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",170,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",170,null],[11,"fmt","","",170,null],[11,"fmt","","",170,null],[11,"clone","","",170,null],[11,"eq","","",170,null],[11,"hash","","",170,null],[11,"partial_cmp","","",170,null],[11,"cmp","","",170,null],[11,"from","","",170,null],[11,"fmt","std::net::addr","",171,null],[11,"hash","","",171,null],[11,"eq","","",171,null],[11,"ne","","",171,null],[11,"clone","","",171,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",171,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",171,null],[11,"set_ip","","Change the IP address associated with this socket address.",171,null],[11,"port","","Returns the port number associated with this socket address.",171,null],[11,"set_port","","Change the port number associated with this socket address.",171,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",172,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",172,null],[11,"set_ip","","Change the IP address associated with this socket address.",172,null],[11,"port","","Returns the port number associated with this socket address.",172,null],[11,"set_port","","Change the port number associated with this socket address.",172,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",173,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",173,null],[11,"set_ip","","Change the IP address associated with this socket address.",173,null],[11,"port","","Returns the port number associated with this socket address.",173,null],[11,"set_port","","Change the port number associated with this socket address.",173,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",173,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",173,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",173,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",173,null],[11,"fmt","","",171,null],[11,"fmt","","",172,null],[11,"fmt","","",172,null],[11,"fmt","","",173,null],[11,"fmt","","",173,null],[11,"clone","","",172,null],[11,"clone","","",173,null],[11,"eq","","",172,null],[11,"eq","","",173,null],[11,"hash","","",172,null],[11,"hash","","",173,null],[11,"to_socket_addrs","","",171,null],[11,"to_socket_addrs","","",172,null],[11,"to_socket_addrs","","",173,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",174,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",174,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",174,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",174,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",174,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",174,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",174,null],[11,"read_timeout","","Returns the read timeout of this socket.",174,null],[11,"write_timeout","","Returns the write timeout of this socket.",174,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",174,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",174,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",174,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",174,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",174,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",174,null],[11,"read","","",174,null],[11,"read_to_end","","",174,null],[11,"write","","",174,null],[11,"flush","","",174,null],[11,"fmt","","",174,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",175,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",175,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",175,null],[11,"accept","","Accept a new incoming connection from this listener.",175,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",175,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",175,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",175,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",175,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",175,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",175,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",175,null],[11,"next","","",176,null],[11,"fmt","","",175,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",177,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",177,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",177,null],[11,"local_addr","","Returns the socket address that this socket was created from.",177,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",177,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",177,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",177,null],[11,"read_timeout","","Returns the read timeout of this socket.",177,null],[11,"write_timeout","","Returns the write timeout of this socket.",177,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",177,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",177,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",177,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",177,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",177,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",177,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",177,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",177,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",177,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",177,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",177,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",177,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",177,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",177,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",177,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",177,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",177,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",177,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",177,null],[11,"fmt","","",177,null],[11,"from_str","std::net::ip","",167,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",169,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",170,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",172,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",173,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",171,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",178,null],[11,"ne","","",178,null],[11,"clone","","",178,null],[11,"fmt","","",178,null],[11,"fmt","","",178,null],[11,"description","","",178,null],[11,"fmt","std::net","",179,null],[11,"eq","","",179,null],[11,"clone","","",179,null],[11,"next","","",180,null],[11,"clone","std::os::linux::raw::arch","",181,null],[11,"as_raw_stat","std::fs","",136,null],[11,"st_dev","","",136,null],[11,"st_ino","","",136,null],[11,"st_mode","","",136,null],[11,"st_nlink","","",136,null],[11,"st_uid","","",136,null],[11,"st_gid","","",136,null],[11,"st_rdev","","",136,null],[11,"st_size","","",136,null],[11,"st_atime","","",136,null],[11,"st_atime_nsec","","",136,null],[11,"st_mtime","","",136,null],[11,"st_mtime_nsec","","",136,null],[11,"st_ctime","","",136,null],[11,"st_ctime_nsec","","",136,null],[11,"st_blksize","","",136,null],[11,"st_blocks","","",136,null],[11,"as_raw_fd","","",140,null],[11,"from_raw_fd","","",140,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",140,null],[11,"as_raw_fd","std::net::tcp","",174,null],[11,"as_raw_fd","","",175,null],[11,"as_raw_fd","std::net::udp","",177,null],[11,"from_raw_fd","std::net::tcp","",174,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",175,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",177,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",174,null],[11,"into_raw_fd","","",175,null],[11,"into_raw_fd","std::net::udp","",177,null],[11,"from_vec","std::ffi::os_str","",134,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",134,null],[11,"from_bytes","","",135,null],[11,"as_bytes","","",135,null],[11,"mode","std::fs","",138,null],[11,"set_mode","","",138,null],[11,"from_mode","","",138,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",137,null],[11,"custom_flags","","",137,null],[11,"dev","","",136,null],[11,"ino","","",136,null],[11,"mode","","",136,null],[11,"nlink","","",136,null],[11,"uid","","",136,null],[11,"gid","","",136,null],[11,"rdev","","",136,null],[11,"size","","",136,null],[11,"atime","","",136,null],[11,"atime_nsec","","",136,null],[11,"mtime","","",136,null],[11,"mtime_nsec","","",136,null],[11,"ctime","","",136,null],[11,"ctime_nsec","","",136,null],[11,"blksize","","",136,null],[11,"blocks","","",136,null],[11,"is_block_device","","",139,null],[11,"is_char_device","","",139,null],[11,"is_fifo","","",139,null],[11,"is_socket","","",139,null],[11,"ino","","",142,null],[11,"mode","","",143,null],[11,"uid","std::process","",182,null],[11,"gid","","",182,null],[11,"before_exec","","",182,null],[11,"exec","","",182,null],[11,"from_raw","","",183,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",183,null],[11,"from_raw_fd","","",184,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",185,null],[11,"as_raw_fd","","",186,null],[11,"as_raw_fd","","",187,null],[11,"into_raw_fd","","",185,null],[11,"into_raw_fd","","",186,null],[11,"into_raw_fd","","",187,null],[11,"as_pthread_t","std::thread","",89,null],[11,"into_pthread_t","","",89,null],[11,"clone","std::sys::ext::net","",188,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",188,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",188,null],[11,"fmt","","",188,null],[11,"fmt","","",189,null],[11,"connect","","Connects to the socket named by `path`.",189,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",189,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",189,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",189,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",189,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",189,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",189,null],[11,"read_timeout","","Returns the read timeout of this socket.",189,null],[11,"write_timeout","","Returns the write timeout of this socket.",189,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",189,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",189,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",189,null],[11,"read","","",189,null],[11,"read_to_end","","",189,null],[11,"write","","",189,null],[11,"flush","","",189,null],[11,"as_raw_fd","","",189,null],[11,"from_raw_fd","","",189,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",189,null],[11,"fmt","","",190,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",190,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",190,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",190,null],[11,"local_addr","","Returns the local socket address of this listener.",190,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",190,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",190,null],[11,"incoming","","Returns an iterator over incoming connections.",190,null],[11,"as_raw_fd","","",190,null],[11,"from_raw_fd","","",190,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",190,null],[11,"fmt","","",191,null],[11,"next","","",191,null],[11,"size_hint","","",191,null],[11,"fmt","","",192,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",192,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",192,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",192,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",192,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",192,null],[11,"local_addr","","Returns the address of this socket.",192,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",192,null],[11,"recv_from","","Receives data from the socket.",192,null],[11,"recv","","Receives data from the socket.",192,null],[11,"send_to","","Sends data on the socket to the specified address.",192,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",192,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",192,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",192,null],[11,"read_timeout","","Returns the read timeout of this socket.",192,null],[11,"write_timeout","","Returns the write timeout of this socket.",192,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",192,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",192,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",192,null],[11,"as_raw_fd","","",192,null],[11,"from_raw_fd","","",192,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",192,null],[11,"deref","std::panic","",193,null],[11,"deref_mut","","",193,null],[11,"call_once","","",193,null],[11,"eq","std::path","",194,null],[11,"ne","","",194,null],[11,"cmp","","",194,null],[11,"partial_cmp","","",194,null],[11,"lt","","",194,null],[11,"le","","",194,null],[11,"gt","","",194,null],[11,"ge","","",194,null],[11,"hash","","",194,null],[11,"fmt","","",194,null],[11,"clone","","",194,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",194,null],[11,"fmt","","",195,null],[11,"clone","","",195,null],[11,"kind","","The parsed prefix data.",195,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",195,null],[11,"eq","","",195,null],[11,"partial_cmp","","",195,null],[11,"cmp","","",195,null],[11,"hash","","",195,null],[11,"fmt","","",196,null],[11,"hash","","",196,null],[11,"cmp","","",196,null],[11,"partial_cmp","","",196,null],[11,"lt","","",196,null],[11,"le","","",196,null],[11,"gt","","",196,null],[11,"ge","","",196,null],[11,"eq","","",196,null],[11,"ne","","",196,null],[11,"clone","","",196,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",196,null],[11,"as_ref","","",196,null],[11,"clone","","",197,null],[11,"clone","","",198,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",197,null],[11,"as_ref","","",197,null],[11,"as_ref","","",197,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",198,null],[11,"as_ref","","",198,null],[11,"as_ref","","",198,null],[11,"next","","",198,null],[11,"next_back","","",198,null],[11,"next","","",197,null],[11,"next_back","","",197,null],[11,"eq","","",197,null],[11,"partial_cmp","","",197,null],[11,"cmp","","",197,null],[11,"clone","","",10,null],[11,"new","","Allocates an empty `PathBuf`.",10,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",10,null],[11,"push","","Extends `self` with `path`.",10,null],[11,"pop","","Truncate `self` to `self.parent()`.",10,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",10,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",10,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",10,null],[11,"from","","",10,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",10,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",10,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",10,null],[11,"fmt","","",10,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",9,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",9,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",9,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",9,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",9,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",9,null],[11,"is_relative","","A path is *relative* if it is not absolute.",9,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",9,null],[11,"parent","","The path without its final component, if any.",9,null],[11,"file_name","","The final component of the path, if it is a normal file.",9,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",9,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",9,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",9,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",9,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",9,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",9,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",9,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",9,null],[11,"components","","Produce an iterator over the components of the path.",9,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",9,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",9,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",9,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",9,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",9,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",9,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",9,null],[11,"exists","","Returns whether the path points at an existing entity.",9,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",9,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",9,null],[11,"deref","","",10,null],[11,"borrow","","",10,null],[11,"from","collections::borrow","",5,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",5,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",9,null],[11,"eq","","",10,null],[11,"hash","","",10,null],[11,"partial_cmp","","",10,null],[11,"cmp","","",10,null],[11,"as_ref","","",10,null],[11,"into","","",10,null],[11,"eq","","",199,null],[11,"ne","","",199,null],[11,"clone","","",199,null],[11,"fmt","","",199,null],[11,"as_ref","","",9,null],[11,"fmt","","",9,null],[11,"fmt","","",200,null],[11,"fmt","","",200,null],[11,"eq","","",9,null],[11,"hash","","",9,null],[11,"partial_cmp","","",9,null],[11,"cmp","","",9,null],[11,"as_ref","","",9,null],[11,"as_ref","std::ffi::os_str","",135,null],[11,"as_ref","collections::borrow","",5,null],[11,"as_ref","std::ffi::os_str","",134,null],[11,"as_ref","collections::string","",2,null],[11,"as_ref","std::path","",10,null],[11,"eq","","",10,null],[11,"eq","","",9,null],[11,"partial_cmp","","",10,null],[11,"partial_cmp","","",9,null],[11,"eq","","",10,null],[11,"partial_cmp","","",10,null],[11,"eq","collections::borrow","",5,null],[11,"eq","std::path","",9,null],[11,"partial_cmp","collections::borrow","",5,null],[11,"partial_cmp","std::path","",9,null],[11,"eq","collections::borrow","",5,null],[11,"partial_cmp","","",5,null],[11,"eq","","",5,null],[11,"eq","std::path","",10,null],[11,"partial_cmp","collections::borrow","",5,null],[11,"partial_cmp","std::path","",10,null],[11,"eq","","",10,null],[11,"eq","std::ffi::os_str","",135,null],[11,"partial_cmp","std::path","",10,null],[11,"partial_cmp","std::ffi::os_str","",135,null],[11,"eq","std::path","",10,null],[11,"partial_cmp","","",10,null],[11,"eq","","",10,null],[11,"eq","collections::borrow","",5,null],[11,"partial_cmp","std::path","",10,null],[11,"partial_cmp","collections::borrow","",5,null],[11,"eq","std::path","",10,null],[11,"eq","std::ffi::os_str","",134,null],[11,"partial_cmp","std::path","",10,null],[11,"partial_cmp","std::ffi::os_str","",134,null],[11,"eq","std::path","",9,null],[11,"eq","std::ffi::os_str","",135,null],[11,"partial_cmp","std::path","",9,null],[11,"partial_cmp","std::ffi::os_str","",135,null],[11,"eq","std::path","",9,null],[11,"partial_cmp","","",9,null],[11,"eq","","",9,null],[11,"eq","collections::borrow","",5,null],[11,"partial_cmp","std::path","",9,null],[11,"partial_cmp","collections::borrow","",5,null],[11,"eq","std::path","",9,null],[11,"eq","std::ffi::os_str","",134,null],[11,"partial_cmp","std::path","",9,null],[11,"partial_cmp","std::ffi::os_str","",134,null],[11,"eq","","",135,null],[11,"partial_cmp","","",135,null],[11,"eq","collections::borrow","",5,null],[11,"partial_cmp","","",5,null],[11,"eq","std::ffi::os_str","",134,null],[11,"partial_cmp","","",134,null],[11,"eq","collections::borrow","",5,null],[11,"eq","std::ffi::os_str","",135,null],[11,"partial_cmp","collections::borrow","",5,null],[11,"partial_cmp","std::ffi::os_str","",135,null],[11,"eq","collections::borrow","",5,null],[11,"partial_cmp","","",5,null],[11,"eq","","",5,null],[11,"eq","std::ffi::os_str","",134,null],[11,"partial_cmp","collections::borrow","",5,null],[11,"partial_cmp","std::ffi::os_str","",134,null],[11,"fmt","std::path","",199,null],[11,"description","","",199,null],[11,"write","std::process","",185,null],[11,"flush","","",185,null],[11,"read","","",186,null],[11,"read_to_end","","",186,null],[11,"read","","",187,null],[11,"read_to_end","","",187,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",182,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",182,null],[11,"args","","Add multiple arguments to pass to the program.",182,null],[11,"env","","Inserts or updates an environment variable mapping.",182,null],[11,"env_remove","","Removes an environment variable mapping.",182,null],[11,"env_clear","","Clears the entire environment map for the child process.",182,null],[11,"current_dir","","Sets the working directory for the child process.",182,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",182,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",182,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",182,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",182,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",182,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",182,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",182,null],[11,"clone","","",201,null],[11,"eq","","",201,null],[11,"ne","","",201,null],[11,"fmt","","",201,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",184,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",184,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",184,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",183,null],[11,"clone","","",183,null],[11,"eq","","",183,null],[11,"ne","","",183,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",183,null],[11,"code","","Returns the exit code of the process, if any.",183,null],[11,"fmt","","",183,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",202,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",202,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",202,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",202,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",203,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",203,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",203,null],[11,"id","","Retrieves the id of this handle.",204,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",204,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",204,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",204,null],[11,"drop","","",203,null],[11,"drop","","",204,null],[11,"fmt","","",203,null],[11,"fmt","","",204,null],[11,"clone","std::sync::mpsc","",205,null],[11,"eq","","",205,null],[11,"ne","","",205,null],[11,"fmt","","",206,null],[11,"clone","","",206,null],[11,"eq","","",206,null],[11,"fmt","","",207,null],[11,"clone","","",207,null],[11,"eq","","",207,null],[11,"clone","","",208,null],[11,"eq","","",208,null],[11,"ne","","",208,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",209,null],[11,"clone","","",209,null],[11,"drop","","",209,null],[11,"fmt","","",209,null],[11,"send","","Sends a value on this synchronous channel.",210,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",210,null],[11,"clone","","",210,null],[11,"drop","","",210,null],[11,"fmt","","",210,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",211,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",211,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",211,null],[11,"next","","",212,null],[11,"next","","",213,null],[11,"into_iter","","",211,null],[11,"drop","","",211,null],[11,"fmt","","",211,null],[11,"fmt","","",205,null],[11,"fmt","","",205,null],[11,"description","","",205,null],[11,"cause","","",205,null],[11,"fmt","","",208,null],[11,"fmt","","",208,null],[11,"description","","",208,null],[11,"cause","","",208,null],[11,"fmt","","",206,null],[11,"description","","",206,null],[11,"cause","","",206,null],[11,"fmt","","",207,null],[11,"description","","",207,null],[11,"cause","","",207,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",214,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",214,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",215,null],[11,"clone","std::sync::condvar","",216,null],[11,"eq","","",216,null],[11,"ne","","",216,null],[11,"fmt","","",216,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",216,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",217,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",217,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",217,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",217,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",217,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",217,null],[11,"default","","",217,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",217,null],[11,"new","","Creates a new condition variable",218,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",218,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",218,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",218,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",218,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",218,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",218,null],[11,"drop","std::sync::mutex","",70,null],[11,"default","","",70,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",70,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",219,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",219,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",219,null],[11,"destroy","","Deallocates resources associated with this static mutex.",219,null],[11,"deref","","",220,null],[11,"deref_mut","","",220,null],[11,"drop","","",220,null],[11,"new","std::sync::once","Creates a new `Once` value.",221,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",221,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",221,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",222,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",223,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",223,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",223,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",223,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",223,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",223,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",223,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",223,null],[11,"drop","","",223,null],[11,"fmt","","",223,null],[11,"default","","",223,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",224,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",224,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",224,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",224,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",224,null],[11,"destroy","","Deallocates all resources associated with this static lock.",224,null],[11,"deref","","",225,null],[11,"deref","","",226,null],[11,"deref_mut","","",226,null],[11,"drop","","",225,null],[11,"drop","","",226,null],[11,"default","core::sync::atomic","",227,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",228,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",229,null],[11,"clone","","",229,null],[11,"new","","Creates a new `AtomicBool`.",227,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",227,null],[11,"store","","Stores a value into the bool.",227,null],[11,"swap","","Stores a value into the bool, returning the old value.",227,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",227,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",227,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",227,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",227,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",227,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",227,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",227,null],[11,"new","","Creates a new `AtomicPtr`.",228,null],[11,"load","","Loads a value from the pointer.",228,null],[11,"store","","Stores a value into the pointer.",228,null],[11,"swap","","Stores a value into the pointer, returning the old value.",228,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",228,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",228,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",228,null],[11,"default","","",230,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",230,null],[11,"new","","Creates a new atomic integer.",230,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",230,null],[11,"store","","Stores a value into the atomic integer.",230,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",230,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",230,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",230,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",230,null],[11,"fetch_add","","Add to the current value, returning the previous value.",230,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",230,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",230,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",230,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",230,null],[11,"default","","",231,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",231,null],[11,"new","","Creates a new atomic integer.",231,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",231,null],[11,"store","","Stores a value into the atomic integer.",231,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",231,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",231,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",231,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",231,null],[11,"fetch_add","","Add to the current value, returning the previous value.",231,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",231,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",231,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",231,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",231,null],[11,"default","","",232,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",232,null],[11,"new","","Creates a new atomic integer.",232,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",232,null],[11,"store","","Stores a value into the atomic integer.",232,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",232,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",232,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",232,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",232,null],[11,"fetch_add","","Add to the current value, returning the previous value.",232,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",232,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",232,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",232,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",232,null],[11,"default","","",233,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",233,null],[11,"new","","Creates a new atomic integer.",233,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",233,null],[11,"store","","Stores a value into the atomic integer.",233,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",233,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",233,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",233,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",233,null],[11,"fetch_add","","Add to the current value, returning the previous value.",233,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",233,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",233,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",233,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",233,null],[11,"default","","",234,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",234,null],[11,"new","","Creates a new atomic integer.",234,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",234,null],[11,"store","","Stores a value into the atomic integer.",234,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",234,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",234,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",234,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",234,null],[11,"fetch_add","","Add to the current value, returning the previous value.",234,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",234,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",234,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",234,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",234,null],[11,"default","","",235,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",235,null],[11,"new","","Creates a new atomic integer.",235,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",235,null],[11,"store","","Stores a value into the atomic integer.",235,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",235,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",235,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",235,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",235,null],[11,"fetch_add","","Add to the current value, returning the previous value.",235,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",235,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",235,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",235,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",235,null],[11,"default","","",236,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",236,null],[11,"new","","Creates a new atomic integer.",236,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",236,null],[11,"store","","Stores a value into the atomic integer.",236,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",236,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",236,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",236,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",236,null],[11,"fetch_add","","Add to the current value, returning the previous value.",236,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",236,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",236,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",236,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",236,null],[11,"default","","",237,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",237,null],[11,"new","","Creates a new atomic integer.",237,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",237,null],[11,"store","","Stores a value into the atomic integer.",237,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",237,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",237,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",237,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",237,null],[11,"fetch_add","","Add to the current value, returning the previous value.",237,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",237,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",237,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",237,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",237,null],[11,"default","","",238,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",238,null],[11,"new","","Creates a new atomic integer.",238,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",238,null],[11,"store","","Stores a value into the atomic integer.",238,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",238,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",238,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",238,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",238,null],[11,"fetch_add","","Add to the current value, returning the previous value.",238,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",238,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",238,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",238,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",238,null],[11,"default","","",239,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",239,null],[11,"new","","Creates a new atomic integer.",239,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",239,null],[11,"store","","Stores a value into the atomic integer.",239,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",239,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",239,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",239,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",239,null],[11,"fetch_add","","Add to the current value, returning the previous value.",239,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",239,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",239,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",239,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",239,null],[11,"fmt","","",227,null],[11,"fmt","","",228,null],[11,"hash","std::time::duration","",240,null],[11,"fmt","","",240,null],[11,"cmp","","",240,null],[11,"partial_cmp","","",240,null],[11,"lt","","",240,null],[11,"le","","",240,null],[11,"gt","","",240,null],[11,"ge","","",240,null],[11,"eq","","",240,null],[11,"ne","","",240,null],[11,"clone","","",240,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",240,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",240,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",240,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",240,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",240,null],[11,"add","","",240,null],[11,"add_assign","","",240,null],[11,"sub","","",240,null],[11,"sub_assign","","",240,null],[11,"mul","","",240,null],[11,"mul_assign","","",240,null],[11,"div","","",240,null],[11,"div_assign","","",240,null],[11,"cmp","std::time","",241,null],[11,"partial_cmp","","",241,null],[11,"lt","","",241,null],[11,"le","","",241,null],[11,"gt","","",241,null],[11,"ge","","",241,null],[11,"eq","","",241,null],[11,"ne","","",241,null],[11,"clone","","",241,null],[11,"cmp","","",242,null],[11,"partial_cmp","","",242,null],[11,"lt","","",242,null],[11,"le","","",242,null],[11,"gt","","",242,null],[11,"ge","","",242,null],[11,"eq","","",242,null],[11,"ne","","",242,null],[11,"clone","","",242,null],[11,"fmt","","",243,null],[11,"clone","","",243,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",241,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",241,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",241,null],[11,"add","","",241,null],[11,"add_assign","","",241,null],[11,"sub","","",241,null],[11,"sub_assign","","",241,null],[11,"sub","","",241,null],[11,"fmt","","",241,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",242,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",242,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",242,null],[11,"add","","",242,null],[11,"add_assign","","",242,null],[11,"sub","","",242,null],[11,"sub_assign","","",242,null],[11,"fmt","","",242,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",243,null],[11,"description","","",243,null],[11,"fmt","","",243,null],[11,"fmt","std::sys_common::poison","",244,null],[11,"fmt","","",244,null],[11,"description","","",244,null],[11,"new","","Creates a `PoisonError`.",244,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",244,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",244,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",244,null],[11,"from","","",245,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",245,null],[11,"fmt","","",245,null],[11,"description","","",245,null],[11,"cause","","",245,null],[11,"clone","libc::unix","",246,null],[11,"clone","","",247,null],[11,"clone","","",248,null],[11,"clone","","",249,null],[11,"clone","","",250,null],[11,"clone","","",251,null],[11,"clone","","",252,null],[11,"clone","","",253,null],[11,"clone","","",254,null],[11,"clone","","",255,null],[11,"clone","","",256,null],[11,"clone","","",257,null],[11,"clone","","",258,null],[11,"clone","libc::unix::notbsd","",259,null],[11,"clone","","",260,null],[11,"clone","","",261,null],[11,"clone","","",262,null],[11,"clone","","",263,null],[11,"clone","","",264,null],[11,"clone","","",265,null],[11,"clone","","",266,null],[11,"clone","","",267,null],[11,"clone","","",268,null],[11,"clone","","",269,null],[11,"clone","","",270,null],[11,"clone","","",271,null],[11,"clone","","",272,null],[11,"clone","","",273,null],[11,"clone","libc::unix::notbsd::linux","",274,null],[11,"clone","","",275,null],[11,"clone","","",276,null],[11,"clone","","",277,null],[11,"clone","","",278,null],[11,"clone","","",279,null],[11,"clone","","",280,null],[11,"clone","","",281,null],[11,"clone","","",282,null],[11,"clone","","",283,null],[11,"clone","","",284,null],[11,"clone","","",285,null],[11,"clone","","",286,null],[11,"clone","","",287,null],[11,"clone","","",288,null],[11,"clone","","",289,null],[11,"clone","libc::unix::notbsd::linux::other","",290,null],[11,"clone","","",291,null],[11,"clone","","",292,null],[11,"clone","","",293,null],[11,"clone","","",294,null],[11,"clone","","",295,null],[11,"clone","","",296,null],[11,"clone","","",297,null],[11,"clone","","",298,null],[11,"clone","","",299,null],[11,"clone","","",300,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",301,null],[11,"clone","","",302,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",303,null],[11,"clone","","",304,null],[11,"clone","","",305,null],[11,"clone","","",306,null],[11,"clone","","",307,null],[11,"clone","","",308,null],[11,"clone","","",309,null],[11,"clone","","",310,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",311,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",311,null],[11,"file","","Returns the name of the source file from which the panic originated.",312,null],[11,"line","","Returns the line number from which the panic originated.",312,null],[11,"hash","core::ops","",313,null],[11,"eq","","",313,null],[11,"clone","","",313,null],[11,"fmt","","",313,null],[11,"hash","","",314,null],[11,"eq","","",314,null],[11,"ne","","",314,null],[11,"clone","","",314,null],[11,"fmt","","",314,null],[11,"contains","","# Examples",314,null],[11,"hash","","",315,null],[11,"eq","","",315,null],[11,"ne","","",315,null],[11,"clone","","",315,null],[11,"fmt","","",315,null],[11,"contains","","# Examples",315,null],[11,"hash","","",316,null],[11,"eq","","",316,null],[11,"ne","","",316,null],[11,"clone","","",316,null],[11,"fmt","","",316,null],[11,"contains","","# Examples",316,null],[11,"hash","","",317,null],[11,"eq","","",317,null],[11,"ne","","",317,null],[11,"clone","","",317,null],[11,"fmt","","",317,null],[11,"from","","",317,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",317,null],[11,"hash","","",318,null],[11,"eq","","",318,null],[11,"ne","","",318,null],[11,"clone","","",318,null],[11,"fmt","","",318,null],[11,"contains","","# Examples",318,null],[11,"hash","core::option","",7,null],[11,"fmt","","",7,null],[11,"cmp","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"is_some","","Returns `true` if the option is a `Some` value",7,null],[11,"is_none","","Returns `true` if the option is a `None` value",7,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",7,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",7,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",7,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",7,null],[11,"unwrap_or","","Returns the contained value or a default.",7,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",7,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",7,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",7,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",7,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",7,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",7,null],[11,"iter","","Returns an iterator over the possibly contained value.",7,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",7,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",7,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",7,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",7,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",7,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",7,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",7,null],[11,"unwrap_or_default","","Returns the contained value or a default",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",7,null],[11,"fmt","","",319,null],[11,"next","","",319,null],[11,"size_hint","","",319,null],[11,"next_back","","",319,null],[11,"clone","","",319,null],[11,"fmt","","",320,null],[11,"next","","",320,null],[11,"size_hint","","",320,null],[11,"next_back","","",320,null],[11,"fmt","","",321,null],[11,"clone","","",321,null],[11,"next","","",321,null],[11,"size_hint","","",321,null],[11,"next_back","","",321,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",7,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"new","core::ptr","Creates a new `Unique`.",322,null],[11,"get","","Dereferences the content.",322,null],[11,"get_mut","","Mutably dereferences the content.",322,null],[11,"deref","","",322,null],[11,"fmt","","",322,null],[11,"new","","Creates a new `Shared`.",323,null],[11,"clone","","",323,null],[11,"deref","","",323,null],[11,"fmt","","",323,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::result","",324,null],[11,"fmt","","",324,null],[11,"cmp","","",324,null],[11,"partial_cmp","","",324,null],[11,"lt","","",324,null],[11,"le","","",324,null],[11,"gt","","",324,null],[11,"ge","","",324,null],[11,"eq","","",324,null],[11,"ne","","",324,null],[11,"clone","","",324,null],[11,"is_ok","","Returns true if the result is `Ok`",324,null],[11,"is_err","","Returns true if the result is `Err`",324,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",324,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",324,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",324,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",324,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",324,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",324,null],[11,"iter","","Returns an iterator over the possibly contained value.",324,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",324,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",324,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",324,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",324,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",324,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",324,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",324,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",324,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",324,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",324,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",324,null],[11,"fmt","","",325,null],[11,"next","","",325,null],[11,"size_hint","","",325,null],[11,"next_back","","",325,null],[11,"clone","","",325,null],[11,"fmt","","",326,null],[11,"next","","",326,null],[11,"size_hint","","",326,null],[11,"next_back","","",326,null],[11,"fmt","","",327,null],[11,"next","","",327,null],[11,"size_hint","","",327,null],[11,"next_back","","",327,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",324,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"clone","alloc::boxed","",328,null],[11,"pointer","","",329,null],[11,"make_place","","",329,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",329,null],[11,"finalize","","",3,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",328,null],[11,"drop","","",329,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",3,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",3,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",3,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"ge","","",3,null],[11,"gt","","",3,null],[11,"cmp","","",3,null],[11,"hash","","",3,null],[11,"from","","",3,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next_back","","",3,null],[11,"call_once","","",3,null],[11,"call_once","","",3,null],[11,"clone","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","syntect::parsing","",330,null],[11,"fmt","","",330,null],[11,"is","","Returns true if the boxed type is the same as `T`",330,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",330,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",330,null],[11,"is","","Forwards to the method defined on the type `Any`.",330,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",330,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",330,null],[11,"hash","core::any","",331,null],[11,"fmt","","",331,null],[11,"eq","","",331,null],[11,"ne","","",331,null],[11,"clone","","",331,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",331,{"inputs":[],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",11,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",11,null],[11,"set","","Sets the contained value.",11,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",11,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",11,null],[11,"clone","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",11,null],[11,"partial_cmp","","",11,null],[11,"lt","","",11,null],[11,"le","","",11,null],[11,"gt","","",11,null],[11,"ge","","",11,null],[11,"cmp","","",11,null],[11,"fmt","","",332,null],[11,"eq","","",332,null],[11,"clone","","",332,null],[11,"new","","Creates a new `RefCell` containing `value`.",12,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",12,null],[11,"borrow_state","","Query the current state of this `RefCell`",12,null],[11,"borrow","","Immutably borrows the wrapped value.",12,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",12,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",12,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",12,null],[11,"clone","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"cmp","","",12,null],[11,"deref","","",333,null],[11,"clone","","Copies a `Ref`.",333,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",333,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",334,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",334,null],[11,"deref_mut","","",334,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",335,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",335,null],[11,"get","","Gets a mutable pointer to the wrapped value.",335,null],[11,"default","","",335,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"clone","collections::str","",336,null],[11,"next","","",336,null],[11,"size_hint","","",336,null],[11,"borrow","collections::string","",2,null],[11,"fmt","core::str::pattern","",337,null],[11,"eq","","",337,null],[11,"ne","","",337,null],[11,"clone","","",337,null],[11,"fmt","","",338,null],[11,"clone","","",338,null],[11,"haystack","","",338,null],[11,"next","","",338,null],[11,"next_match","","",338,null],[11,"next_reject","","",338,null],[11,"next_back","","",338,null],[11,"next_match_back","","",338,null],[11,"next_reject_back","","",338,null],[11,"fmt","","",339,null],[11,"clone","","",339,null],[11,"haystack","","",339,null],[11,"next","","",339,null],[11,"next_match","","",339,null],[11,"next_reject","","",339,null],[11,"next_back","","",339,null],[11,"next_match_back","","",339,null],[11,"next_reject_back","","",339,null],[11,"clone","","",340,null],[11,"fmt","","",340,null],[11,"haystack","","",340,null],[11,"next","","",340,null],[11,"next_match","","",340,null],[11,"next_reject","","",340,null],[11,"next_back","","",340,null],[11,"next_match_back","","",340,null],[11,"next_reject_back","","",340,null],[11,"fmt","","",341,null],[11,"clone","","",341,null],[11,"haystack","","",341,null],[11,"next","","",341,null],[11,"next_match","","",341,null],[11,"next_back","","",341,null],[11,"next_match_back","","",341,null],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",4,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",4,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",4,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Creates a new `Weak&lt;T&gt;` reference from this value.",4,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",4,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",4,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",4,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",4,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",4,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",4,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",4,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",4,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",4,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",4,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",4,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",4,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",4,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",4,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",4,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",4,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",4,null],[11,"hash","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"from","","",4,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",342,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",342,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",342,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",342,null],[11,"fmt","","",342,null],[11,"default","","",342,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",4,null],[11,"as_ref","","",4,null],[11,"next","rustc_unicode::char","",343,null],[11,"next","","",344,null],[11,"clone","","",345,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"clone","","",79,null],[11,"fmt","","",79,null],[11,"next","","",345,null],[11,"size_hint","","",345,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",79,null],[11,"fmt","","",79,null],[11,"cmp","collections::string","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"new","","Creates a new empty `String`.",2,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",2,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",2,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",2,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",2,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",2,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",2,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",2,null],[11,"as_str","","Extracts a string slice containing the entire string.",2,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",2,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",2,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",2,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",2,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",2,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",2,null],[11,"push","","Appends the given `char` to the end of this `String`.",2,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",2,null],[11,"truncate","","Shortens this `String` to the specified length.",2,null],[11,"pop","","Removes the last character from the string buffer and returns it.",2,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",2,null],[11,"insert","","Inserts a character into this `String` at a byte position.",2,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",2,null],[11,"len","","Returns the length of this `String`, in bytes.",2,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",2,null],[11,"clear","","Truncates this `String`, removing all contents.",2,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",2,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",2,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",76,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",76,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"clone","","",2,null],[11,"clone_from","","",2,null],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",2,null],[11,"extend","","",2,null],[11,"extend","","",2,null],[11,"extend","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"eq","collections::borrow","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","collections::string","",2,null],[11,"ne","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"hash","","",2,null],[11,"add","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"index_mut","","",2,null],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",78,null],[11,"fmt","","",78,null],[11,"fmt","","",78,null],[11,"eq","","",78,null],[11,"as_ref","","",2,null],[11,"as_ref","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",5,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",5,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",2,null],[11,"write_str","","",2,null],[11,"write_char","","",2,null],[11,"drop","","",346,null],[11,"next","","",346,null],[11,"size_hint","","",346,null],[11,"next_back","","",346,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",6,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",6,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",6,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",6,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",6,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",6,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",6,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",6,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",6,null],[11,"as_slice","","Extracts a slice containing the entire vector.",6,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",6,null],[11,"set_len","","Sets the length of a vector.",6,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",6,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",6,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",6,null],[11,"retain","","Retains only the elements specified by the predicate.",6,null],[11,"push","","Appends an element to the back of a collection.",6,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",6,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",6,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",6,null],[11,"clear","","Clears the vector, removing all values.",6,null],[11,"len","","Returns the number of elements in the vector.",6,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",6,null],[11,"split_off","","Splits the collection into two at the given index.",6,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",6,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",6,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",6,null],[11,"clone","","",6,null],[11,"clone_from","","",6,null],[11,"hash","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"index_mut","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"from_iter","","",6,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",6,null],[11,"extend","","",6,null],[11,"extend","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","collections::borrow","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"eq","collections::vec","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"partial_cmp","","",6,null],[11,"cmp","","",6,null],[11,"drop","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",5,null],[11,"from","","",5,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",5,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",347,null],[11,"size_hint","","",347,null],[11,"count","","",347,null],[11,"next_back","","",347,null],[11,"clone","","",347,null],[11,"drop","","",347,null],[11,"next","","",348,null],[11,"size_hint","","",348,null],[11,"next_back","","",348,null],[11,"drop","","",348,null],[11,"hash","core::cmp","",349,null],[11,"fmt","","",349,null],[11,"eq","","",349,null],[11,"clone","","",349,null],[11,"reverse","","Reverse the `Ordering`.",349,null],[11,"cmp","","",349,null],[11,"partial_cmp","","",349,null],[11,"fmt","core::hash::sip","",350,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",350,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",350,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",350,null],[11,"finish","","",350,null],[11,"clone","","",350,null],[11,"default","","",350,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",351,null],[11,"build_hasher","","",351,null],[11,"clone","","",351,null],[11,"default","","",351,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::raw","",352,null],[11,"borrow","collections::vec","",6,null],[11,"borrow_mut","","",6,null],[11,"fmt","core::iter::range","",353,null],[11,"clone","","",353,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",315,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",314,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",317,null],[11,"next","core::iter::range","",353,null],[11,"size_hint","","",353,null],[11,"next","","",353,null],[11,"size_hint","","",353,null],[11,"next","","",353,null],[11,"size_hint","","",353,null],[11,"next","core::ops","",314,null],[11,"size_hint","","",314,null],[11,"next_back","","",314,null],[11,"next","","",315,null],[11,"next","","",317,null],[11,"size_hint","","",317,null],[11,"next_back","","",317,null],[11,"fmt","core::iter::sources","",354,null],[11,"clone","","",354,null],[11,"next","","",354,null],[11,"size_hint","","",354,null],[11,"next_back","","",354,null],[11,"fmt","","",355,null],[11,"next","","",355,null],[11,"size_hint","","",355,null],[11,"next_back","","",355,null],[11,"len","","",355,null],[11,"clone","","",355,null],[11,"default","","",355,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",356,null],[11,"clone","","",356,null],[11,"next","","",356,null],[11,"size_hint","","",356,null],[11,"next_back","","",356,null],[11,"len","","",356,null],[11,"fmt","core::iter","",357,null],[11,"clone","","",357,null],[11,"next","","",357,null],[11,"size_hint","","",357,null],[11,"next_back","","",357,null],[11,"fmt","","",358,null],[11,"clone","","",358,null],[11,"next","","",358,null],[11,"size_hint","","",358,null],[11,"next_back","","",358,null],[11,"fmt","","",359,null],[11,"clone","","",359,null],[11,"next","","",359,null],[11,"size_hint","","",359,null],[11,"fmt","","",360,null],[11,"clone","","",360,null],[11,"next","","",360,null],[11,"count","","",360,null],[11,"nth","","",360,null],[11,"find","","",360,null],[11,"last","","",360,null],[11,"size_hint","","",360,null],[11,"next_back","","",360,null],[11,"fmt","","",361,null],[11,"clone","","",361,null],[11,"next","","",361,null],[11,"size_hint","","",361,null],[11,"next_back","","",361,null],[11,"clone","","",362,null],[11,"fmt","","",362,null],[11,"next","","",362,null],[11,"size_hint","","",362,null],[11,"next_back","","",362,null],[11,"clone","","",363,null],[11,"fmt","","",363,null],[11,"next","","",363,null],[11,"size_hint","","",363,null],[11,"next_back","","",363,null],[11,"clone","","",364,null],[11,"fmt","","",364,null],[11,"next","","",364,null],[11,"size_hint","","",364,null],[11,"next_back","","",364,null],[11,"fmt","","",365,null],[11,"clone","","",365,null],[11,"next","","# Overflow Behavior",365,null],[11,"size_hint","","",365,null],[11,"nth","","",365,null],[11,"count","","",365,null],[11,"next_back","","",365,null],[11,"fmt","","",366,null],[11,"clone","","",366,null],[11,"next","","",366,null],[11,"count","","",366,null],[11,"nth","","",366,null],[11,"last","","",366,null],[11,"size_hint","","",366,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",366,null],[11,"is_empty","","Checks if the iterator has finished iterating.",366,null],[11,"clone","","",367,null],[11,"fmt","","",367,null],[11,"next","","",367,null],[11,"size_hint","","",367,null],[11,"clone","","",368,null],[11,"fmt","","",368,null],[11,"next","","",368,null],[11,"size_hint","","",368,null],[11,"fmt","","",369,null],[11,"clone","","",369,null],[11,"next","","",369,null],[11,"nth","","",369,null],[11,"count","","",369,null],[11,"last","","",369,null],[11,"size_hint","","",369,null],[11,"next_back","","",369,null],[11,"fmt","","",370,null],[11,"clone","","",370,null],[11,"next","","",370,null],[11,"nth","","",370,null],[11,"size_hint","","",370,null],[11,"clone","","",371,null],[11,"fmt","","",371,null],[11,"next","","",371,null],[11,"size_hint","","",371,null],[11,"clone","","",372,null],[11,"fmt","","",372,null],[11,"next","","",372,null],[11,"size_hint","","",372,null],[11,"next_back","","",372,null],[11,"fmt","","",373,null],[11,"clone","","",373,null],[11,"next","","",373,null],[11,"nth","","",373,null],[11,"last","","",373,null],[11,"count","","",373,null],[11,"size_hint","","",373,null],[11,"next_back","","",373,null],[11,"clone","","",374,null],[11,"fmt","","",374,null],[11,"next","","",374,null],[11,"size_hint","","",374,null],[11,"next_back","","",374,null],[11,"borrow","collections::borrow","",5,null],[11,"clone","","",5,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",5,null],[11,"into_owned","","Extracts the owned data.",5,null],[11,"deref","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"partial_cmp","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"hash","","",5,null],[11,"as_ref","","",5,null],[11,"deref","syntect::parsing","",375,null],[11,"default","","",376,{"inputs":[],"output":{"name":"scope"}}],[11,"eq","","",376,null],[11,"ne","","",376,null],[11,"clone","","",376,null],[11,"fmt","","",60,null],[11,"fmt","","",377,null],[11,"decode","","",378,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",378,null],[11,"default","","",378,{"inputs":[],"output":{"name":"scopestack"}}],[11,"eq","","",378,null],[11,"ne","","",378,null],[11,"clone","","",378,null],[11,"fmt","","",378,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"build","","",377,null],[11,"to_string","","",377,null],[11,"new","","",376,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"atom_at","","",376,null],[11,"len","","return the number of atoms in the scope",376,null],[11,"is_prefix_of","","Tests if this scope is a prefix of another scope.\nNote that the empty scope is always a prefix.",376,null],[11,"from_str","","",376,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",376,null],[11,"fmt","","",376,null],[11,"encode","","",376,null],[11,"decode","","",376,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"partial_cmp","","",58,null],[11,"lt","","",58,null],[11,"le","","",58,null],[11,"gt","","",58,null],[11,"ge","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",58,null],[11,"cmp","","",58,null],[11,"new","","",378,{"inputs":[],"output":{"name":"scopestack"}}],[11,"from_vec","","",378,{"inputs":[{"name":"vec"}],"output":{"name":"scopestack"}}],[11,"push","","",378,null],[11,"pop","","",378,null],[11,"apply","","",378,null],[11,"debug_print","","",378,null],[11,"bottom_n","","Return the bottom n elements of the stack.\nEquivalent to &amp;scopes[0..n] on a Vec",378,null],[11,"as_slice","","Return a slice of the scopes in this stack",378,null],[11,"len","","Return the height/length of this stack",378,null],[11,"does_match","","checks if this stack as a selector matches the given stack\nif so it returns a match score, higher match scores are stronger\nmatches. Scores are ordered according to the rules found\nat https://manual.macromates.com/en/scope_selectors",378,null],[11,"from_str","","",378,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",378,null],[11,"clone","","",379,null],[11,"fmt","","",379,null],[11,"new","","",379,{"inputs":[{"name":"syntaxdefinition"}],"output":{"name":"parsestate"}}],[11,"parse_line","","Parses a single line of the file. Because of the way regex engines work you unfortunately\nhave to pass in a single line contigous in memory. This can be bad for really long lines.\nSublime Text avoids this by just not highlighting lines that are too long (thousands of characters).",379,null],[0,"util","syntect","",null,null],[5,"as_24_bit_terminal_escaped","syntect::util","Formats the styled fragments using 24-bit colour\nterminal escape codes. Meant for debugging and testing.\nIt&#39;s currently fairly inefficient in its use of escape codes.",null,null],[5,"debug_print_ops","","Print out the various push and pop operations in a vector\nwith visual alignment to the line. Obviously for debugging.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":null}],[0,"dumps","syntect","",null,null],[5,"dump_binary","syntect::dumps","",null,{"inputs":[{"name":"t"}],"output":{"name":"vec"}}],[5,"dump_to_file","","",null,{"inputs":[{"name":"t"},{"name":"p"}],"output":{"name":"encodingresult"}}],[5,"from_binary","","Returns a fully loaded and linked syntax set from\na binary dump. Panics if the dump is invalid.",null,null],[5,"from_dump_file","","Returns a fully loaded and linked syntax set from\na binary dump file.",null,{"inputs":[{"name":"p"}],"output":{"name":"decodingresult"}}],[11,"load_defaults_nonewlines","syntect::parsing","Instantiates a new syntax set from a binary dump of\nSublime Text&#39;s default open source syntax definitions and then links it.\nThese dumps are included in this library&#39;s binary for convenience.\nThis method loads the version for parsing line strings with no `\\n` characters at the end.",57,{"inputs":[],"output":{"name":"syntaxset"}}],[11,"load_defaults_newlines","","Same as `load_defaults_nonewlines` but for parsing line strings with newlines at the end.\nThese are separate methods because thanks to linker garbage collection, only the serialized\ndumps for the method(s) you call will be included in the binary (each is ~200kb for now).",57,{"inputs":[],"output":{"name":"syntaxset"}}],[11,"load_defaults","syntect::highlighting","Loads the set of default themes\nCurrently includes Solarized light/dark, Base16 ocean/mocha/eighties and InspiredGithub",47,{"inputs":[],"output":{"name":"themeset"}}],[0,"easy","syntect","",null,null],[3,"HighlightLines","syntect::easy","Simple way to go directly from lines of text to coloured\ntokens.",null,null],[3,"HighlightFile","","Convenience struct containing everything you need to highlight a file.\nUse the `reader` to get the lines of the file and the `highlight_lines` to highlight them.\nSee the `new` method docs for more information.",null,null],[12,"reader","","",380,null],[12,"highlight_lines","","",380,null],[11,"new","","",381,{"inputs":[{"name":"syntaxdefinition"},{"name":"theme"}],"output":{"name":"highlightlines"}}],[11,"highlight","","Highlights a line of a file",381,null],[11,"new","","Constructs a file reader and a line highlighter to get you reading files as fast as possible.\nAuto-detects the syntax from the extension and constructs a `HighlightLines` with the correct syntax and theme.",380,{"inputs":[{"name":"p"},{"name":"syntaxset"},{"name":"theme"}],"output":{"name":"result"}}],[11,"fmt","syntect","",0,null],[11,"from","","",0,{"inputs":[{"name":"settingserror"}],"output":{"name":"loadingerror"}}],[11,"from","","",0,{"inputs":[{"name":"ioerror"}],"output":{"name":"loadingerror"}}],[11,"from","","",0,{"inputs":[{"name":"parsethemeerror"}],"output":{"name":"loadingerror"}}],[11,"from","","",0,{"inputs":[{"name":"parsesyntaxerror"}],"output":{"name":"loadingerror"}}]],"paths":[[4,"LoadingError"],[4,"Settings"],[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[4,"CharacterSet"],[4,"Newline"],[3,"Config"],[4,"FromBase64Error"],[4,"FromHexError"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[3,"Encoder"],[4,"JsonEvent"],[4,"StackElement"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[3,"ScopeSelectors"],[3,"Style"],[3,"StyleModifier"],[3,"Color"],[3,"Theme"],[3,"ThemeSettings"],[3,"ThemeItem"],[3,"HighlightState"],[3,"ThemeSet"],[4,"SettingsError"],[4,"UnderlineOption"],[4,"ParseThemeError"],[3,"ScopeSelector"],[3,"FontStyle"],[3,"Highlighter"],[3,"HighlightIterator"],[8,"FromSettings"],[8,"ParseSettings"],[3,"SyntaxSet"],[3,"MatchPower"],[4,"ParseSyntaxError"],[4,"ParseScopeError"],[4,"ScopeStackOp"],[3,"SyntaxDefinition"],[3,"Context"],[3,"MatchPattern"],[3,"LinkerLink"],[4,"Pattern"],[4,"ContextReference"],[4,"MatchOperation"],[3,"MatchIter"],[3,"Mutex"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"Error"],[8,"Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Unique"],[3,"Shared"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[8,"Any"],[3,"TypeId"],[4,"BorrowState"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Weak"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"TraitObject"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"SCOPE_REPO"],[3,"Scope"],[3,"ScopeRepository"],[3,"ScopeStack"],[3,"ParseState"],[3,"HighlightFile"],[3,"HighlightLines"]]};
searchIndex["plist"] = {"doc":"# Plist","items":[[3,"Deserializer","plist","",null,null],[3,"Serializer","","",null,null],[3,"EventReader","","",null,null],[4,"Plist","","",null,null],[13,"Array","","",0,null],[13,"Dictionary","","",0,null],[13,"Boolean","","",0,null],[13,"Data","","",0,null],[13,"Date","","",0,null],[13,"Real","","",0,null],[13,"Integer","","",0,null],[13,"String","","",0,null],[4,"PlistEvent","","An encoding of a plist as a flat structure.",null,null],[13,"StartArray","","",1,null],[13,"EndArray","","",1,null],[13,"StartDictionary","","",1,null],[13,"EndDictionary","","",1,null],[13,"BooleanValue","","",1,null],[13,"DataValue","","",1,null],[13,"DateValue","","",1,null],[13,"IntegerValue","","",1,null],[13,"RealValue","","",1,null],[13,"StringValue","","",1,null],[4,"Error","","",null,null],[13,"InvalidData","","",2,null],[13,"UnexpectedEof","","",2,null],[13,"Io","","",2,null],[13,"Serde","","",2,null],[5,"deserialize","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"serialize_to_xml","","",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[0,"binary","","",null,null],[3,"EventReader","plist::binary","https://opensource.apple.com/source/CF/CF-550/CFBinaryPList.c\nhttps://hg.python.org/cpython/file/3.4/Lib/plistlib.py",null,null],[11,"from","plist","",2,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"error"}}],[11,"new","plist::binary","",3,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"next","","",3,null],[0,"xml","plist","",null,null],[3,"EventReader","plist::xml","",null,null],[3,"EventWriter","","",null,null],[11,"from","plist","",2,{"inputs":[{"name":"chronoparseerror"}],"output":{"name":"error"}}],[11,"new","plist::xml","",4,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"next","","",4,null],[11,"from","plist","",2,{"inputs":[{"name":"xmlwritererror"}],"output":{"name":"error"}}],[11,"new","plist::xml","",5,{"inputs":[{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"write","","",5,null],[11,"write","","",5,null],[11,"custom","plist","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",6,{"inputs":[{"name":"i"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",6,null],[11,"deserialize_unit","","",6,null],[11,"deserialize_option","","",6,null],[11,"deserialize_newtype_struct","","",6,null],[11,"deserialize_enum","","",6,null],[11,"visit_variant","","",6,null],[11,"visit_unit","","",6,null],[11,"visit_newtype","","",6,null],[11,"visit_tuple","","",6,null],[11,"visit_struct","","",6,null],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"new","","",7,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"into_inner","","",7,null],[11,"serialize_bool","","",7,null],[11,"serialize_i64","","",7,null],[11,"serialize_u64","","",7,null],[11,"serialize_f64","","",7,null],[11,"serialize_str","","",7,null],[11,"serialize_bytes","","",7,null],[11,"serialize_unit","","",7,null],[11,"serialize_none","","",7,null],[11,"serialize_some","","",7,null],[11,"serialize_seq","","",7,null],[11,"serialize_seq_elt","","",7,null],[11,"serialize_map","","",7,null],[11,"serialize_map_elt","","",7,null],[11,"serialize_unit_variant","","",7,null],[11,"serialize_newtype_struct","","",7,null],[11,"serialize_newtype_variant","","",7,null],[11,"serialize_tuple_variant","","",7,null],[11,"serialize_struct_variant","","",7,null],[6,"Result","","",null,null],[8,"EventWriter","","",null,null],[10,"write","","",8,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"read","","",0,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"from_events","","",0,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"into_events","","",0,null],[11,"into_rustc_serialize_json","","",0,null],[11,"as_array","","If the `Plist` is an Array, returns the associated Vec.\nReturns None otherwise.",0,null],[11,"as_array_mut","","If the `Plist` is an Array, returns the associated mutable Vec.\nReturns None otherwise.",0,null],[11,"as_dictionary","","If the `Plist` is a Dictionary, returns the associated BTreeMap.\nReturns None otherwise.",0,null],[11,"as_dictionary_mut","","If the `Plist` is a Dictionary, returns the associated mutable BTreeMap.\nReturns None otherwise.",0,null],[11,"as_boolean","","If the `Plist` is a Boolean, returns the associated bool.\nReturns None otherwise.",0,null],[11,"into_data","","If the `Plist` is a Data, returns the underlying Vec.\nReturns None otherwise.",0,null],[11,"as_data","","If the `Plist` is a Data, returns the associated Vec.\nReturns None otherwise.",0,null],[11,"as_date","","If the `Plist` is a Date, returns the associated DateTime.\nReturns None otherwise.",0,null],[11,"as_real","","If the `Plist` is a Real, returns the associated f64.\nReturns None otherwise.",0,null],[11,"as_integer","","If the `Plist` is an Integer, returns the associated i64.\nReturns None otherwise.",0,null],[11,"into_string","","If the `Plist` is a String, returns the underlying String.\nReturns None otherwise.",0,null],[11,"as_string","","If the `Plist` is a String, returns the associated str.\nReturns None otherwise.",0,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"fmt","","",2,null],[11,"from","","",2,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"new","","",9,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"next","","",9,null]],"paths":[[4,"Plist"],[4,"PlistEvent"],[4,"Error"],[3,"EventReader"],[3,"EventReader"],[3,"EventWriter"],[3,"Deserializer"],[3,"Serializer"],[8,"EventWriter"],[3,"EventReader"]]};
searchIndex["chrono"] = {"doc":"# Chrono 0.2.22","items":[[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",0,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,null],[11,"num_days","","Returns the total number of whole days in the duration.",0,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",0,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",0,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",0,null],[11,"fmt","time","",1,null],[11,"fmt","time::duration","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"hash","time","",3,null],[11,"fmt","","",3,null],[11,"cmp","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"new","","",3,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",3,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"clone","","",4,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",4,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"cmp","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"clone","","",5,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",5,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",5,null],[11,"sub","","",5,null],[11,"sub","","",5,null],[11,"add","","",5,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"add","","The resulting Tm is in UTC.",6,null],[11,"sub","","The resulting Tm is in UTC.",6,null],[11,"sub","","",6,null],[11,"partial_cmp","","",6,null],[11,"cmp","","",6,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",6,null],[11,"to_local","","Convert time to the local timezone",6,null],[11,"to_utc","","Convert time to the UTC",6,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",6,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",6,null],[11,"strftime","","Formats the time according to the format string.",6,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",6,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",6,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",1,null],[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week (DOW).",null,null],[13,"Mon","","Monday.",8,null],[13,"Tue","","Tuesday.",8,null],[13,"Wed","","Wednesday.",8,null],[13,"Thu","","Thursday.",8,null],[13,"Fri","","Friday.",8,null],[13,"Sat","","Saturday.",8,null],[13,"Sun","","Sunday.",8,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.",9,null],[13,"Single","","Given local time representation has a single unique result.",9,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.",9,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don&#39;t need the local time.\nIt is also used as an offset (which is also a dummy type).",null,null],[11,"eq","","",10,null],[11,"clone","","",10,null],[11,"today","","Returns a `Date` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",10,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",10,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",10,null],[11,"offset_from_local_datetime","","",10,null],[11,"offset_from_utc_date","","",10,null],[11,"offset_from_utc_datetime","","",10,null],[11,"local_minus_utc","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",11,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_offset","","",11,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",11,null],[11,"offset_from_local_datetime","","",11,null],[11,"offset_from_utc_date","","",11,null],[11,"offset_from_utc_datetime","","",11,null],[11,"local_minus_utc","","",11,null],[11,"fmt","","",11,null],[11,"fmt","","",11,null],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",12,null],[11,"today","","Returns a `Date` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",12,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",12,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",12,null],[11,"offset_from_local_datetime","","",12,null],[11,"offset_from_utc_date","","",12,null],[11,"offset_from_utc_datetime","","",12,null],[11,"from_local_date","","",12,null],[11,"from_local_datetime","","",12,null],[11,"from_utc_date","","",12,null],[11,"from_utc_datetime","","",12,null],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",13,null],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.",14,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"yo","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",14,null],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,null],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",14,null],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,null],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",14,null],[11,"datetime_from_str","","Parses a string with the specified format string and\nreturns a `DateTime` with the current offset.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",14,null],[10,"from_offset","","Reconstructs the time zone from the offset.",14,{"inputs":[{"name":"offset"}],"output":{"name":"self"}}],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",14,null],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",14,null],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",14,null],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",14,null],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",14,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",14,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,null],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",14,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",9,null],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",9,null],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",9,null],[11,"map","","Maps a `LocalResult&lt;T&gt;` into `LocalResult&lt;U&gt;` with given function.",9,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,null],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",9,null],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",9,null],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone.\nAllows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate`.",null,null],[17,"MAX","","The maximum possible `NaiveDate`.",null,null],[11,"clone","","",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"lt","","",15,null],[11,"le","","",15,null],[11,"gt","","",15,null],[11,"ge","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"from_ymd","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",15,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",15,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",15,null],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,null],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",15,null],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,null],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",15,null],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,null],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",15,null],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,null],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",15,null],[11,"succ","","Makes a new `NaiveDate` for the next date.",15,null],[11,"succ_opt","","Makes a new `NaiveDate` for the next date.",15,null],[11,"pred","","Makes a new `NaiveDate` for the prior date.",15,null],[11,"pred_opt","","Makes a new `NaiveDate` for the prior date.",15,null],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",15,null],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",15,null],[11,"format_with_items","","Formats the date with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",15,null],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",15,null],[11,"year","","",15,null],[11,"month","","",15,null],[11,"month0","","",15,null],[11,"day","","",15,null],[11,"day0","","",15,null],[11,"ordinal","","",15,null],[11,"ordinal0","","",15,null],[11,"weekday","","",15,null],[11,"isoweekdate","","",15,null],[11,"with_year","","",15,null],[11,"with_month","","",15,null],[11,"with_month0","","",15,null],[11,"with_day","","",15,null],[11,"with_day0","","",15,null],[11,"with_ordinal","","",15,null],[11,"with_ordinal0","","",15,null],[11,"hash","","",15,null],[11,"add","","",15,null],[11,"sub","","",15,null],[11,"sub","","",15,null],[11,"fmt","","",15,null],[11,"fmt","","",15,null],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.",null,null],[11,"clone","","",16,null],[11,"cmp","","",16,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",16,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",16,null],[11,"format","","Formats the time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",16,null],[11,"hour","","",16,null],[11,"minute","","",16,null],[11,"second","","",16,null],[11,"nanosecond","","",16,null],[11,"with_hour","","",16,null],[11,"with_minute","","",16,null],[11,"with_second","","",16,null],[11,"with_nanosecond","","",16,null],[11,"num_seconds_from_midnight","","",16,null],[11,"hash","","",16,null],[11,"add","","",16,null],[11,"sub","","",16,null],[11,"sub","","",16,null],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"clone","","",17,null],[11,"cmp","","",17,null],[11,"partial_cmp","","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"new","","Makes a new `NaiveDateTime` from date and time components.\nEquivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",17,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::from_timestamp`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","*Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`.",17,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",17,null],[11,"time","","Retrieves a time component.",17,null],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).\nNote that this does *not* account for the timezone!",17,null],[11,"num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::timestamp`.",17,null],[11,"checked_add","","Adds given `Duration` to the current date and time.",17,null],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",17,null],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",17,null],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",17,null],[11,"year","","",17,null],[11,"month","","",17,null],[11,"month0","","",17,null],[11,"day","","",17,null],[11,"day0","","",17,null],[11,"ordinal","","",17,null],[11,"ordinal0","","",17,null],[11,"weekday","","",17,null],[11,"isoweekdate","","",17,null],[11,"with_year","","",17,null],[11,"with_month","","",17,null],[11,"with_month0","","",17,null],[11,"with_day","","",17,null],[11,"with_day0","","",17,null],[11,"with_ordinal","","",17,null],[11,"with_ordinal0","","",17,null],[11,"hour","","",17,null],[11,"minute","","",17,null],[11,"second","","",17,null],[11,"nanosecond","","",17,null],[11,"with_hour","","",17,null],[11,"with_minute","","",17,null],[11,"with_second","","",17,null],[11,"with_nanosecond","","",17,null],[11,"hash","","",17,null],[11,"add","","",17,null],[11,"sub","","",17,null],[11,"sub","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",18,null],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.",18,{"inputs":[{"name":"naivedate"},{"name":"offset"}],"output":{"name":"date"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",18,null],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",18,null],[11,"succ","","Makes a new `Date` for the next date.",18,null],[11,"succ_opt","","Makes a new `Date` for the next date.",18,null],[11,"pred","","Makes a new `Date` for the prior date.",18,null],[11,"pred_opt","","Makes a new `Date` for the prior date.",18,null],[11,"offset","","Retrieves an associated offset from UTC.",18,null],[11,"timezone","","Retrieves an associated time zone.",18,null],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).",18,null],[11,"checked_add","","Adds given `Duration` to the current date.",18,null],[11,"checked_sub","","Subtracts given `Duration` from the current date.",18,null],[11,"naive_utc","","Returns a view to the naive UTC date.",18,null],[11,"naive_local","","Returns a view to the naive local date.",18,null],[11,"format_with_items","","Formats the date with the specified formatting items.",18,null],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",18,null],[11,"year","","",18,null],[11,"month","","",18,null],[11,"month0","","",18,null],[11,"day","","",18,null],[11,"day0","","",18,null],[11,"ordinal","","",18,null],[11,"ordinal0","","",18,null],[11,"weekday","","",18,null],[11,"isoweekdate","","",18,null],[11,"with_year","","",18,null],[11,"with_month","","",18,null],[11,"with_month0","","",18,null],[11,"with_day","","",18,null],[11,"with_day0","","",18,null],[11,"with_ordinal","","",18,null],[11,"with_ordinal0","","",18,null],[11,"eq","","",18,null],[11,"partial_cmp","","",18,null],[11,"cmp","","",18,null],[11,"hash","","",18,null],[11,"add","","",18,null],[11,"sub","","",18,null],[11,"sub","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",19,null],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset.\nThe local datetime should be constructed via the `TimeZone` trait.",19,{"inputs":[{"name":"naivedatetime"},{"name":"offset"}],"output":{"name":"datetime"}}],[11,"date","","Retrieves a date component.",19,null],[11,"time","","Retrieves a time component.\nUnlike `date`, this is not associated to the time zone.",19,null],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).",19,null],[11,"num_seconds_from_unix_epoch","","*Deprecated*: Same to `DateTime::timestamp`.",19,null],[11,"offset","","Retrieves an associated offset from UTC.",19,null],[11,"timezone","","Retrieves an associated time zone.",19,null],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `DateTime` (but will change the string representation).",19,null],[11,"checked_add","","Adds given `Duration` to the current date and time.",19,null],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",19,null],[11,"naive_utc","","Returns a view to the naive UTC datetime.",19,null],[11,"naive_local","","Returns a view to the naive local datetime.",19,null],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and\nreturns a new `DateTime` with a parsed `FixedOffset`.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",19,null],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",19,null],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",19,null],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",19,null],[11,"year","","",19,null],[11,"month","","",19,null],[11,"month0","","",19,null],[11,"day","","",19,null],[11,"day0","","",19,null],[11,"ordinal","","",19,null],[11,"ordinal0","","",19,null],[11,"weekday","","",19,null],[11,"isoweekdate","","",19,null],[11,"with_year","","",19,null],[11,"with_month","","",19,null],[11,"with_month0","","",19,null],[11,"with_day","","",19,null],[11,"with_day0","","",19,null],[11,"with_ordinal","","",19,null],[11,"with_ordinal0","","",19,null],[11,"hour","","",19,null],[11,"minute","","",19,null],[11,"second","","",19,null],[11,"nanosecond","","",19,null],[11,"with_hour","","",19,null],[11,"with_minute","","",19,null],[11,"with_second","","",19,null],[11,"with_nanosecond","","",19,null],[11,"eq","","",19,null],[11,"partial_cmp","","",19,null],[11,"cmp","","",19,null],[11,"hash","","",19,null],[11,"add","","",19,null],[11,"sub","","",19,null],[11,"sub","","",19,null],[11,"fmt","","",19,null],[11,"fmt","","",19,null],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",20,null],[13,"Zero","","Zero (`0`) padding.",20,null],[13,"Space","","Space padding.",20,null],[4,"Numeric","","Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",21,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",21,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",21,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",21,null],[13,"Month","","Month (FW=PW=2).",21,null],[13,"Day","","Day of the month (FW=PW=2).",21,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",21,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",21,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",21,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",21,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",21,null],[13,"Ordinal","","Day of the year (FW=PW=3).",21,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",21,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",21,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",21,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",21,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned; see also `Fixed::Nanosecond`.",21,null],[13,"Timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC (FW=1, PW=infinity).\nFor formatting, it assumes UTC upon the absence of time zone offset.",21,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",22,null],[13,"LongMonthName","","Full month names.",22,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",22,null],[13,"LongWeekdayName","","Full day of the week names.",22,null],[13,"LowerAmPm","","AM/PM.",22,null],[13,"UpperAmPm","","AM/PM.",22,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also `Numeric::Nanosecond`.",22,null],[13,"Nanosecond3","","Fixed prescision at Nanosecond3 where 3 is the left aligned accuracy.",22,null],[13,"Nanosecond6","","Fixed prescision at Nanosecond6 where 6 is the left aligned accuracy.",22,null],[13,"Nanosecond9","","Fixed prescision at Nanosecond9 where 9 is the left aligned accuracy.",22,null],[13,"TimezoneName","","Timezone name.",22,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",22,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",22,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",22,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",22,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",22,null],[13,"RFC3339","","RFC 3339 &amp; ISO 8601 date and time syntax.",22,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",23,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",23,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.",23,null],[13,"Fixed","","Fixed-format item.",23,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",23,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items.\nThey can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year. This can be negative unlike `year_{div,mod}_100` fields.",24,null],[12,"year_div_100","","Year divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear","","Year in the ISO week date. This can be negative unlike `isoyear_{div,mod}_100` fields.",24,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is &gt;= 1 BCE when set.",24,null],[12,"month","","Month (1--12).",24,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January.\n(0--53, 1--53 or 1--52 depending on the year).",24,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",24,null],[12,"weekday","","Day of the week.",24,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",24,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",24,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",24,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",24,null],[12,"minute","","Minute number (0--59).",24,null],[12,"second","","Second number (0--60, accounting for leap seconds).",24,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",24,null],[12,"timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC.",24,null],[12,"offset","","Offset from the local time to UTC, in seconds.",24,null],[11,"fmt","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"clone","","",24,null],[11,"new","","Returns the initial value of parsed parts.",24,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",24,null],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",24,null],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",24,null],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",24,null],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",24,null],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",24,null],[11,"set_month","","Tries to set the `month` field from given value.",24,null],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",24,null],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",24,null],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",24,null],[11,"set_weekday","","Tries to set the `weekday` field from given value.",24,null],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",24,null],[11,"set_day","","Tries to set the `day` field from given value.",24,null],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",24,null],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",24,null],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",24,null],[11,"set_minute","","Tries to set the `minute` field from given value.",24,null],[11,"set_second","","Tries to set the `second` field from given value.",24,null],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",24,null],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",24,null],[11,"set_offset","","Tries to set the `offset` field from given value.",24,null],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",24,null],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",24,null],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields,\nexcept for the `offset` field (assumed to have a given value).\nThis is required for parsing a local time or other known-timezone inputs.",24,null],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",24,null],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",24,null],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields,\nwith an additional `TimeZone` used to interpret and validate the local date.",24,null],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",25,null],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",25,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",25,null],[6,"ParseResult","chrono::format","Same to `Result&lt;T, ParseError&gt;`.",null,null],[11,"fmt","","",20,null],[11,"eq","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",21,null],[11,"eq","","",21,null],[11,"clone","","",21,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"clone","","",22,null],[11,"fmt","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"clone","","",23,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"fmt","","",26,null],[11,"description","","",26,null],[11,"fmt","","",27,null],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",27,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",27,null],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number.",28,null],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",28,null],[10,"month","","Returns the month number starting from 1.",28,null],[10,"month0","","Returns the month number starting from 0.",28,null],[10,"day","","Returns the day of month starting from 1.",28,null],[10,"day0","","Returns the day of month starting from 0.",28,null],[10,"ordinal","","Returns the day of year starting from 1.",28,null],[10,"ordinal0","","Returns the day of year starting from 0.",28,null],[10,"weekday","","Returns the day of week.",28,null],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week.\nThe adjusted year may differ from that of the calendar date.",28,null],[10,"with_year","","Makes a new value with the year number changed.",28,null],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",28,null],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",28,null],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",28,null],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",28,null],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",28,null],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",28,null],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",28,null],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",29,null],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.",29,null],[10,"minute","","Returns the minute number from 0 to 59.",29,null],[10,"second","","Returns the second number from 0 to 59.",29,null],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents the leap second.",29,null],[10,"with_hour","","Makes a new value with the hour number changed.",29,null],[10,"with_minute","","Makes a new value with the minute number changed.",29,null],[10,"with_second","","Makes a new value with the second number changed.",29,null],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",29,null],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",29,null],[11,"fmt","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"succ","","The next day in the week.",8,null],[11,"pred","","The previous day in the week.",8,null],[11,"number_from_monday","","Returns a DOW number starting from Monday = 1. (ISO 8601 weekday number)",8,null],[11,"number_from_sunday","","Returns a DOW number starting from Sunday = 1.",8,null],[11,"num_days_from_monday","","Returns a DOW number starting from Monday = 0.",8,null],[11,"num_days_from_sunday","","Returns a DOW number starting from Sunday = 0.",8,null],[11,"from_i64","","",8,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}]],"paths":[[3,"Duration"],[3,"TmFmt"],[3,"OutOfRangeError"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"]]};
searchIndex["walkdir"] = {"doc":"Crate `walkdir` provides an efficient and cross platform implementation\nof recursive directory traversal. Several options are exposed to control\niteration, such as whether to follow symbolic links (default off), limit the\nmaximum number of simultaneous open file descriptors and the ability to\nefficiently skip descending into directories.","items":[[3,"WalkDir","walkdir","A builder to create an iterator for recursively walking a directory.",null,null],[3,"Iter","","An iterator for recursively descending into a directory.",null,null],[3,"DirEntry","","A directory entry.",null,null],[3,"IterFilterEntry","","A recursive directory iterator that skips entries.",null,null],[3,"Error","","An error produced by recursively walking a directory.",null,null],[6,"Result","","A result type for walkdir operations.",null,null],[8,"WalkDirIterator","","A trait for recursive directory iterators.",null,null],[10,"skip_current_dir","","Skips the current directory.",0,null],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips\ndescending into directories that do not satisfy the given predicate.",0,null],[11,"new","","Create a builder for a recursive directory iterator starting at the\nfile path `root`. If `root` is a directory, then it is the first item\nyielded by the iterator. If `root` is a file, then it is the first\nand only item yielded by the iterator.",1,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",1,null],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",1,null],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",1,null],[11,"max_open","","Set the maximum number of simultaneously open file descriptors used\nby the iterator.",1,null],[11,"into_iter","","",1,null],[11,"next","","",2,null],[11,"skip_current_dir","","",2,null],[11,"path","","The full path that this entry represents.",3,null],[11,"path_is_symbolic_link","","Returns `true` if and only if this entry was created from a symbolic\nlink. This is unaffected by the `follow_links` setting.",3,null],[11,"metadata","","Return the metadata for the file that this entry points to.",3,null],[11,"file_type","","Return the file type for the file that this entry points to.",3,null],[11,"file_name","","Return the file name of this entry.",3,null],[11,"depth","","Returns the depth at which this entry was created relative to the root.",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"next","","",4,null],[11,"skip_current_dir","","",4,null],[11,"fmt","","",5,null],[11,"path","","Returns the path associated with this error if one exists.",5,null],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",5,null],[11,"depth","","Returns the depth at which this error occurred relative to the root.",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"fmt","","",5,null],[11,"from","std::io::error","",6,{"inputs":[{"name":"error"}],"output":{"name":"error"}}]],"paths":[[8,"WalkDirIterator"],[3,"WalkDir"],[3,"Iter"],[3,"DirEntry"],[3,"IterFilterEntry"],[3,"Error"],[3,"Error"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary\nserialization strategy.","items":[[3,"RefBox","bincode","A struct for encoding nested reference types.",null,null],[3,"StrBox","","Like a RefBox, but encoding from a `str` and decoedes to a `String`.",null,null],[3,"SliceBox","","Like a RefBox, but encodes from a `[T]` and encodes to a `Vec&lt;T&gt;`.",null,null],[4,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[13,"Infinite","","",0,null],[13,"Bounded","","",0,null],[11,"clone","","",1,null],[11,"hash","","",1,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"hash","","",2,null],[11,"cmp","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",3,null],[11,"hash","","",3,null],[11,"cmp","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"new","","Creates a new RefBox that looks at a borrowed value.",1,{"inputs":[{"name":"t"}],"output":{"name":"refbox"}}],[11,"take","","Takes the value out of this refbox.",1,null],[11,"try_take","","Tries to take the value out of this refbox.",1,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,null],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new StrBox that looks at a borrowed value.",2,{"inputs":[{"name":"str"}],"output":{"name":"strbox"}}],[11,"into_string","","Extract a String from a StrBox.",2,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",2,null],[11,"as_ref","","",2,null],[11,"boxed","","Creates a new StrBox made from an allocated String.",2,{"inputs":[{"name":"string"}],"output":{"name":"strbox"}}],[11,"take","","Takes the value out of this refbox.",2,null],[11,"try_take","","Tries to take the value out of this refbox.",2,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,null],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",3,null],[11,"into_vec","","Extract a `Vec&lt;T&gt;` from a `SliceBox`.",3,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",3,null],[11,"boxed","","Creates a new SliceBox made from an allocated `Vec&lt;T&gt;`.",3,{"inputs":[{"name":"vec"}],"output":{"name":"slicebox"}}],[11,"take","","Takes the value out of this refbox.",3,null],[11,"try_take","","Tries to take the value out of this refbox.",3,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,null],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","","",1,null],[11,"deref","","",3,null],[0,"rustc_serialize","","A collection of serialization and deserialization functions\nthat use the `rustc_serialize` crate for the encodable and decodable\nimplementation.",null,null],[3,"SizeChecker","bincode::rustc_serialize","",null,null],[12,"size_limit","","",4,null],[12,"written","","",4,null],[3,"EncoderWriter","","An Encoder that encodes values directly into a Writer.",null,null],[3,"DecoderReader","","A Decoder that reads bytes from a buffer.",null,null],[4,"EncodingError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",5,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",5,null],[4,"DecodingError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",6,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",6,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",6,null],[5,"encode","","Encodes an encodable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode","","Decodes a slice of bytes into an object.",null,null],[5,"encode_into","","Encodes an object directly into a `Writer`.",null,{"inputs":[{"name":"t"},{"name":"w"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode_from","","Decoes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decodingresult"}}],[5,"encoded_size","","Returns the size that an object would be if encoded using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"encoded_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be encoded.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"cause","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ioerror"}],"output":{"name":"decodingerror"}}],[11,"new","","",7,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decoderreader"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",7,null],[11,"read_nil","","",7,null],[11,"read_usize","","",7,null],[11,"read_u64","","",7,null],[11,"read_u32","","",7,null],[11,"read_u16","","",7,null],[11,"read_u8","","",7,null],[11,"read_isize","","",7,null],[11,"read_i64","","",7,null],[11,"read_i32","","",7,null],[11,"read_i16","","",7,null],[11,"read_i8","","",7,null],[11,"read_bool","","",7,null],[11,"read_f64","","",7,null],[11,"read_f32","","",7,null],[11,"read_char","","",7,null],[11,"read_str","","",7,null],[11,"read_enum","","",7,null],[11,"read_enum_variant","","",7,null],[11,"read_enum_variant_arg","","",7,null],[11,"read_enum_struct_variant","","",7,null],[11,"read_enum_struct_variant_field","","",7,null],[11,"read_struct","","",7,null],[11,"read_struct_field","","",7,null],[11,"read_tuple","","",7,null],[11,"read_tuple_arg","","",7,null],[11,"read_tuple_struct","","",7,null],[11,"read_tuple_struct_arg","","",7,null],[11,"read_option","","",7,null],[11,"read_seq","","",7,null],[11,"read_seq_elt","","",7,null],[11,"read_map","","",7,null],[11,"read_map_elt_key","","",7,null],[11,"read_map_elt_val","","",7,null],[11,"error","","",7,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"new","","",8,{"inputs":[{"name":"w"}],"output":{"name":"encoderwriter"}}],[11,"new","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"sizechecker"}}],[11,"emit_nil","","",8,null],[11,"emit_usize","","",8,null],[11,"emit_u64","","",8,null],[11,"emit_u32","","",8,null],[11,"emit_u16","","",8,null],[11,"emit_u8","","",8,null],[11,"emit_isize","","",8,null],[11,"emit_i64","","",8,null],[11,"emit_i32","","",8,null],[11,"emit_i16","","",8,null],[11,"emit_i8","","",8,null],[11,"emit_bool","","",8,null],[11,"emit_f64","","",8,null],[11,"emit_f32","","",8,null],[11,"emit_char","","",8,null],[11,"emit_str","","",8,null],[11,"emit_enum","","",8,null],[11,"emit_enum_variant","","",8,null],[11,"emit_enum_variant_arg","","",8,null],[11,"emit_enum_struct_variant","","",8,null],[11,"emit_enum_struct_variant_field","","",8,null],[11,"emit_struct","","",8,null],[11,"emit_struct_field","","",8,null],[11,"emit_tuple","","",8,null],[11,"emit_tuple_arg","","",8,null],[11,"emit_tuple_struct","","",8,null],[11,"emit_tuple_struct_arg","","",8,null],[11,"emit_option","","",8,null],[11,"emit_option_none","","",8,null],[11,"emit_option_some","","",8,null],[11,"emit_seq","","",8,null],[11,"emit_seq_elt","","",8,null],[11,"emit_map","","",8,null],[11,"emit_map_elt_key","","",8,null],[11,"emit_map_elt_val","","",8,null],[11,"emit_nil","","",4,null],[11,"emit_usize","","",4,null],[11,"emit_u64","","",4,null],[11,"emit_u32","","",4,null],[11,"emit_u16","","",4,null],[11,"emit_u8","","",4,null],[11,"emit_isize","","",4,null],[11,"emit_i64","","",4,null],[11,"emit_i32","","",4,null],[11,"emit_i16","","",4,null],[11,"emit_i8","","",4,null],[11,"emit_bool","","",4,null],[11,"emit_f64","","",4,null],[11,"emit_f32","","",4,null],[11,"emit_char","","",4,null],[11,"emit_str","","",4,null],[11,"emit_enum","","",4,null],[11,"emit_enum_variant","","",4,null],[11,"emit_enum_variant_arg","","",4,null],[11,"emit_enum_struct_variant","","",4,null],[11,"emit_enum_struct_variant_field","","",4,null],[11,"emit_struct","","",4,null],[11,"emit_struct_field","","",4,null],[11,"emit_tuple","","",4,null],[11,"emit_tuple_arg","","",4,null],[11,"emit_tuple_struct","","",4,null],[11,"emit_tuple_struct_arg","","",4,null],[11,"emit_option","","",4,null],[11,"emit_option_none","","",4,null],[11,"emit_option_some","","",4,null],[11,"emit_seq","","",4,null],[11,"emit_seq_elt","","",4,null],[11,"emit_map","","",4,null],[11,"emit_map_elt_key","","",4,null],[11,"emit_map_elt_val","","",4,null],[6,"EncodingResult","","",null,null],[6,"DecodingResult","","",null,null],[0,"serde","bincode","A collection of serialization and deserialization functions\nthat use the `serde` crate for the serialazble and deserializable\nimplementation.",null,null],[3,"Deserializer","bincode::serde","A Deserializer that reads bytes from a buffer.",null,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"DeserializeError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",9,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",9,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",9,null],[13,"Serde","","",9,null],[4,"SerializeError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",10,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",10,null],[13,"Custom","","A custom error message",10,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializeresult"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[11,"fmt","","",9,null],[11,"description","","",9,null],[11,"cause","","",9,null],[11,"from","","",9,{"inputs":[{"name":"ioerror"}],"output":{"name":"deserializeerror"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"deserializeerror"}}],[11,"fmt","","",9,null],[11,"custom","","",9,{"inputs":[{"name":"t"}],"output":{"name":"deserializeerror"}}],[11,"end_of_stream","","",9,{"inputs":[],"output":{"name":"deserializeerror"}}],[11,"new","","",11,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializer"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",11,null],[11,"deserialize","","",11,null],[11,"deserialize_bool","","",11,null],[11,"deserialize_u16","","",11,null],[11,"deserialize_u32","","",11,null],[11,"deserialize_u64","","",11,null],[11,"deserialize_i16","","",11,null],[11,"deserialize_i32","","",11,null],[11,"deserialize_i64","","",11,null],[11,"deserialize_f32","","",11,null],[11,"deserialize_f64","","",11,null],[11,"deserialize_u8","","",11,null],[11,"deserialize_usize","","",11,null],[11,"deserialize_i8","","",11,null],[11,"deserialize_isize","","",11,null],[11,"deserialize_unit","","",11,null],[11,"deserialize_char","","",11,null],[11,"deserialize_string","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_tuple","","",11,null],[11,"deserialize_option","","",11,null],[11,"deserialize_seq","","",11,null],[11,"deserialize_map","","",11,null],[11,"deserialize_struct","","",11,null],[11,"deserialize_newtype_struct","","",11,null],[11,"visit_variant","","",11,null],[11,"visit_unit","","",11,null],[11,"visit_newtype","","",11,null],[11,"visit_tuple","","",11,null],[11,"visit_struct","","",11,null],[11,"fmt","","",10,null],[11,"custom","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",10,null],[11,"description","","",10,null],[11,"cause","","",10,null],[11,"new","","",12,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"serialize_unit","","",12,null],[11,"serialize_bool","","",12,null],[11,"serialize_u8","","",12,null],[11,"serialize_u16","","",12,null],[11,"serialize_u32","","",12,null],[11,"serialize_u64","","",12,null],[11,"serialize_i8","","",12,null],[11,"serialize_i16","","",12,null],[11,"serialize_i32","","",12,null],[11,"serialize_i64","","",12,null],[11,"serialize_f32","","",12,null],[11,"serialize_f64","","",12,null],[11,"serialize_str","","",12,null],[11,"serialize_none","","",12,null],[11,"serialize_some","","",12,null],[11,"serialize_seq","","",12,null],[11,"serialize_tuple","","",12,null],[11,"serialize_seq_elt","","",12,null],[11,"serialize_map","","",12,null],[11,"serialize_map_elt","","",12,null],[11,"serialize_struct","","",12,null],[11,"serialize_struct_elt","","",12,null],[11,"serialize_newtype_struct","","",12,null],[11,"serialize_unit_variant","","",12,null],[11,"serialize_tuple_variant","","",12,null],[11,"serialize_struct_variant","","",12,null],[6,"DeserializeResult","","",null,null],[6,"SerializeResult","","",null,null],[11,"partial_cmp","bincode","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null]],"paths":[[4,"SizeLimit"],[3,"RefBox"],[3,"StrBox"],[3,"SliceBox"],[3,"SizeChecker"],[4,"EncodingError"],[4,"DecodingError"],[3,"DecoderReader"],[3,"EncoderWriter"],[4,"DeserializeError"],[4,"SerializeError"],[3,"Deserializer"],[3,"Serializer"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,null],[11,"num_days","","Returns the total number of whole days in the duration.",4,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,null],[11,"neg","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"clone","","",6,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"cmp","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"clone","","",7,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,null],[11,"sub","","The resulting Tm is in UTC.",1,null],[11,"sub","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,null],[11,"to_local","","Convert time to the local timezone",1,null],[11,"to_utc","","Convert time to the UTC",1,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,null],[11,"strftime","","Formats the time according to the format string.",1,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",3,null]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","serde::core","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"fmt","core::hash::sip","",106,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"clone","","",106,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",107,null],[11,"build_hasher","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",108,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",109,null],[11,"finish","","Finishes output and returns any error encountered.",109,null],[11,"field","","Adds a new field to the generated tuple struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"entry","","Adds a new entry to the set output.",111,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the list output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the map output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"partial_cmp","core::fmt","",114,null],[11,"eq","","",114,null],[11,"cmp","","",114,null],[11,"hash","","",114,null],[11,"default","","",114,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"clone","","",115,null],[11,"fmt","","",115,null],[11,"fmt","","",115,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",116,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",116,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",116,null],[11,"write_fmt","","Writes some formatted information into this instance",116,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",116,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",116,null],[11,"align","","Flag indicating what form of alignment was requested",116,null],[11,"width","","Optionally specified integer width that the output should be",116,null],[11,"precision","","Optionally specified precision for numeric types",116,null],[11,"sign_plus","","Determines if the `+` flag was specified.",116,null],[11,"sign_minus","","Determines if the `-` flag was specified.",116,null],[11,"alternate","","Determines if the `#` flag was specified.",116,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",116,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",116,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",116,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",116,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",116,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",116,null],[11,"write_str","","",116,null],[11,"write_char","","",116,null],[11,"write_fmt","","",116,null],[11,"fmt","","",114,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[11,"hash_slice","serde::core::hash","Feeds a slice of this type into the state provided.",117,null],[11,"write_u8","","Write a single `u8` into this hasher",118,null],[11,"write_u16","","Write a single `u16` into this hasher.",118,null],[11,"write_u32","","Write a single `u32` into this hasher.",118,null],[11,"write_u64","","Write a single `u64` into this hasher.",118,null],[11,"write_usize","","Write a single `usize` into this hasher.",118,null],[11,"write_i8","","Write a single `i8` into this hasher.",118,null],[11,"write_i16","","Write a single `i16` into this hasher.",118,null],[11,"write_i32","","Write a single `i32` into this hasher.",118,null],[11,"write_i64","","Write a single `i64` into this hasher.",118,null],[11,"write_isize","","Write a single `isize` into this hasher.",118,null],[11,"write_char","serde::core::fmt","Writes a `char` into this writer, returning whether the write succeeded.",119,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",119,null],[11,"ne","serde::core::cmp","This method tests for `!=`.",120,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",121,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",121,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",121,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",121,null],[11,"clone","rustc_unicode::u_str","",122,null],[11,"new","","Create a UTF-16 encoder from any `char` iterator.",122,{"inputs":[{"name":"i"}],"output":{"name":"utf16encoder"}}],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next","","",123,null],[11,"next_back","","",123,null],[11,"next","rustc_unicode::char","",124,null],[11,"next","","",125,null],[11,"clone","","",126,null],[11,"eq","","",127,null],[11,"ne","","",127,null],[11,"clone","","",127,null],[11,"fmt","","",127,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",127,null],[11,"fmt","","",127,null],[11,"clone","collections::binary_heap","",128,null],[11,"clone_from","","",128,null],[11,"default","","",128,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",128,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",128,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",128,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",128,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",128,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",128,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",128,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",128,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",128,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",128,null],[11,"push","","Pushes an item onto the binary heap.",128,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",128,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",128,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",128,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",128,null],[11,"len","","Returns the length of the binary heap.",128,null],[11,"is_empty","","Checks if the binary heap is empty.",128,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",128,null],[11,"clear","","Drops all items from the binary heap.",128,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",128,null],[11,"clone","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"next_back","","",129,null],[11,"clone","","",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"next_back","","",130,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"from","","",128,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",132,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",128,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",128,null],[11,"extend","","",128,null],[11,"extend","","",128,null],[11,"drop","collections::btree::map","",133,null],[11,"clone","","",133,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",133,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",133,null],[11,"get","","Returns a reference to the value corresponding to the key.",133,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",133,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",133,null],[11,"insert","","Inserts a key-value pair into the map.",133,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",133,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",133,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",133,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",133,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",133,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",133,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"next_back","","",134,null],[11,"len","","",134,null],[11,"clone","","",134,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next_back","","",135,null],[11,"len","","",135,null],[11,"into_iter","","",133,null],[11,"drop","","",136,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next_back","","",136,null],[11,"len","","",136,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"next_back","","",137,null],[11,"len","","",137,null],[11,"clone","","",137,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"next_back","","",138,null],[11,"len","","",138,null],[11,"clone","","",138,null],[11,"next","","",139,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"next_back","","",140,null],[11,"len","","",140,null],[11,"next_back","","",139,null],[11,"clone","","",139,null],[11,"next","","",141,null],[11,"next_back","","",141,null],[11,"from_iter","","",133,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",133,null],[11,"extend","","",133,null],[11,"hash","","",133,null],[11,"default","","",133,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",133,null],[11,"partial_cmp","","",133,null],[11,"cmp","","",133,null],[11,"fmt","","",133,null],[11,"index","","",133,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",133,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",133,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",133,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",133,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",133,null],[11,"len","","Returns the number of elements in the map.",133,null],[11,"is_empty","","Returns true if the map contains no elements.",133,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",142,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",142,null],[11,"key","","Returns a reference to this entry&#39;s key.",142,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",143,null],[11,"into_key","","Take ownership of the key.",143,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",143,null],[11,"key","","Gets a reference to the key in the entry.",144,null],[11,"remove_pair","","Take ownership of the key and value from the map.",144,null],[11,"get","","Gets a reference to the value in the entry.",144,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",144,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",144,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",144,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",144,null],[11,"partial_cmp","collections::btree::set","",145,null],[11,"lt","","",145,null],[11,"le","","",145,null],[11,"gt","","",145,null],[11,"ge","","",145,null],[11,"cmp","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"hash","","",145,null],[11,"clone","","",145,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",145,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",145,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",145,null],[11,"difference","","Visits the values representing the difference, in ascending order.",145,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",145,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",145,null],[11,"union","","Visits the values representing the union, in ascending order.",145,null],[11,"len","","Returns the number of elements in the set.",145,null],[11,"is_empty","","Returns true if the set contains no elements.",145,null],[11,"clear","","Clears the set, removing all values.",145,null],[11,"contains","","Returns `true` if the set contains a value.",145,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",145,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",145,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",145,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",145,null],[11,"insert","","Adds a value to the set.",145,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",145,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",145,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",145,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",145,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",145,null],[11,"from_iter","","",145,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",145,null],[11,"extend","","",145,null],[11,"extend","","",145,null],[11,"default","","",145,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",145,null],[11,"clone","","",146,null],[11,"next","","",146,null],[11,"size_hint","","",146,null],[11,"next_back","","",146,null],[11,"len","","",146,null],[11,"next","","",147,null],[11,"size_hint","","",147,null],[11,"next_back","","",147,null],[11,"len","","",147,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"next_back","","",148,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"clone","","",151,null],[11,"next","","",151,null],[11,"size_hint","","",151,null],[11,"clone","","",152,null],[11,"next","","",152,null],[11,"size_hint","","",152,null],[11,"borrow","collections::borrow","",153,null],[11,"clone","","",153,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",153,null],[11,"into_owned","","Extracts the owned data.",153,null],[11,"deref","","",153,null],[11,"cmp","","",153,null],[11,"eq","","",153,null],[11,"partial_cmp","","",153,null],[11,"fmt","","",153,null],[11,"fmt","","",153,null],[11,"hash","","",153,null],[11,"as_ref","","",153,null],[11,"hash","collections::enum_set","",154,null],[11,"cmp","","",154,null],[11,"partial_cmp","","",154,null],[11,"lt","","",154,null],[11,"le","","",154,null],[11,"gt","","",154,null],[11,"ge","","",154,null],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"clone","","",154,null],[11,"fmt","","",154,null],[11,"new","","Returns an empty `EnumSet`.",154,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",154,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",154,null],[11,"clear","","",154,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",154,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",154,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",154,null],[11,"union","","Returns the union of both `EnumSets`.",154,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",154,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",154,null],[11,"remove","","Removes an enum from the EnumSet",154,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",154,null],[11,"iter","","Returns an iterator over an `EnumSet`.",154,null],[11,"sub","","",154,null],[11,"bitor","","",154,null],[11,"bitand","","",154,null],[11,"bitxor","","",154,null],[11,"clone","","",155,null],[11,"next","","",155,null],[11,"size_hint","","",155,null],[11,"from_iter","","",154,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",154,null],[11,"extend","","",154,null],[11,"clone","collections::linked_list","",156,null],[11,"clone","","",157,null],[11,"default","","",158,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",158,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",158,null],[11,"iter","","Provides a forward iterator.",158,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",158,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",158,null],[11,"len","","Returns the length of the `LinkedList`.",158,null],[11,"clear","","Removes all elements from the `LinkedList`.",158,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",158,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",158,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",158,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",158,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",158,null],[11,"push_front","","Adds an element first in the list.",158,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",158,null],[11,"push_back","","Appends an element to the back of a list",158,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",158,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",158,null],[11,"front_place","","Returns a place for insertion at the front of the list.",158,null],[11,"back_place","","Returns a place for insertion at the back of the list.",158,null],[11,"drop","","",158,null],[11,"next","","",156,null],[11,"size_hint","","",156,null],[11,"next_back","","",156,null],[11,"next","","",159,null],[11,"size_hint","","",159,null],[11,"next_back","","",159,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",159,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",159,null],[11,"next","","",157,null],[11,"size_hint","","",157,null],[11,"next_back","","",157,null],[11,"from_iter","","",158,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",158,null],[11,"extend","","",158,null],[11,"extend","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"partial_cmp","","",158,null],[11,"cmp","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",158,null],[11,"hash","","",158,null],[11,"make_place","","",160,null],[11,"pointer","","",160,null],[11,"finalize","","",160,null],[11,"make_place","","",161,null],[11,"pointer","","",161,null],[11,"finalize","","",161,null],[11,"start","core::ops","",11,null],[11,"end","","",12,null],[11,"start","","",10,null],[11,"end","","",10,null],[11,"borrow","collections::vec","",132,null],[11,"borrow_mut","","",132,null],[11,"clone","collections::str","",162,null],[11,"next","","",162,null],[11,"size_hint","","",162,null],[11,"borrow","collections::string","",163,null],[11,"cmp","","",163,null],[11,"partial_cmp","","",163,null],[11,"lt","","",163,null],[11,"le","","",163,null],[11,"gt","","",163,null],[11,"ge","","",163,null],[11,"fmt","","",164,null],[11,"fmt","","",165,null],[11,"new","","Creates a new empty `String`.",163,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",163,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",163,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",163,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",163,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",163,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",163,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",163,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",163,null],[11,"as_str","","Extracts a string slice containing the entire string.",163,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",163,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",163,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",163,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",163,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",163,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",163,null],[11,"push","","Appends the given `char` to the end of this `String`.",163,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",163,null],[11,"truncate","","Shortens this `String` to the specified length.",163,null],[11,"pop","","Removes the last character from the string buffer and returns it.",163,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",163,null],[11,"insert","","Inserts a character into this `String` at a byte position.",163,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",163,null],[11,"len","","Returns the length of this `String`, in bytes.",163,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",163,null],[11,"clear","","Truncates this `String`, removing all contents.",163,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",163,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",163,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",164,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",164,null],[11,"fmt","","",164,null],[11,"fmt","","",165,null],[11,"clone","","",163,null],[11,"clone_from","","",163,null],[11,"from_iter","","",163,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",163,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",163,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",163,null],[11,"extend","","",163,null],[11,"extend","","",163,null],[11,"extend","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"eq","collections::borrow","",153,null],[11,"ne","","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[11,"eq","collections::string","",163,null],[11,"ne","","",163,null],[11,"default","","",163,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",163,null],[11,"fmt","","",163,null],[11,"hash","","",163,null],[11,"add","","",163,null],[11,"index","","",163,null],[11,"index","","",163,null],[11,"index","","",163,null],[11,"index","","",163,null],[11,"index","","",163,null],[11,"index","","",163,null],[11,"index_mut","","",163,null],[11,"index_mut","","",163,null],[11,"index_mut","","",163,null],[11,"index_mut","","",163,null],[11,"index_mut","","",163,null],[11,"index_mut","","",163,null],[11,"deref","","",163,null],[11,"deref_mut","","",163,null],[11,"from_str","","",163,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",166,null],[11,"fmt","","",166,null],[11,"fmt","","",166,null],[11,"eq","","",166,null],[11,"as_ref","","",163,null],[11,"as_ref","","",163,null],[11,"from","","",163,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",153,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",153,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",163,null],[11,"write_str","","",163,null],[11,"write_char","","",163,null],[11,"drop","","",167,null],[11,"next","","",167,null],[11,"size_hint","","",167,null],[11,"next_back","","",167,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",132,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",132,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",132,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",132,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",132,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",132,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",132,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",132,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",132,null],[11,"as_slice","","Extracts a slice containing the entire vector.",132,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",132,null],[11,"set_len","","Sets the length of a vector.",132,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",132,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",132,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",132,null],[11,"retain","","Retains only the elements specified by the predicate.",132,null],[11,"push","","Appends an element to the back of a collection.",132,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",132,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",132,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",132,null],[11,"clear","","Clears the vector, removing all values.",132,null],[11,"len","","Returns the number of elements in the vector.",132,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",132,null],[11,"split_off","","Splits the collection into two at the given index.",132,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",132,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",132,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",132,null],[11,"clone","","",132,null],[11,"clone_from","","",132,null],[11,"hash","","",132,null],[11,"index","","",132,null],[11,"index_mut","","",132,null],[11,"index","","",132,null],[11,"index","","",132,null],[11,"index","","",132,null],[11,"index","","",132,null],[11,"index","","",132,null],[11,"index","","",132,null],[11,"index_mut","","",132,null],[11,"index_mut","","",132,null],[11,"index_mut","","",132,null],[11,"index_mut","","",132,null],[11,"index_mut","","",132,null],[11,"index_mut","","",132,null],[11,"deref","","",132,null],[11,"deref_mut","","",132,null],[11,"from_iter","","",132,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",132,null],[11,"extend","","",132,null],[11,"extend","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","collections::borrow","",153,null],[11,"ne","","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[11,"eq","collections::vec","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"partial_cmp","","",132,null],[11,"cmp","","",132,null],[11,"drop","","",132,null],[11,"default","","",132,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",132,null],[11,"as_ref","","",132,null],[11,"as_mut","","",132,null],[11,"as_ref","","",132,null],[11,"as_mut","","",132,null],[11,"from","","",132,null],[11,"from","","",132,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",153,null],[11,"from","","",153,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",153,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",168,null],[11,"size_hint","","",168,null],[11,"count","","",168,null],[11,"next_back","","",168,null],[11,"clone","","",168,null],[11,"drop","","",168,null],[11,"next","","",169,null],[11,"size_hint","","",169,null],[11,"next_back","","",169,null],[11,"drop","","",169,null],[11,"clone","collections::vec_deque","",170,null],[11,"drop","","",170,null],[11,"default","","",170,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",170,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",170,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",170,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",170,null],[11,"swap","","Swaps elements at indices `i` and `j`.",170,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",170,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",170,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",170,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",170,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",170,null],[11,"iter","","Returns a front-to-back iterator.",170,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",170,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",170,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",170,null],[11,"len","","Returns the number of elements in the `VecDeque`.",170,null],[11,"is_empty","","Returns true if the buffer contains no elements",170,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",170,null],[11,"clear","","Clears the buffer, removing all values.",170,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",170,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",170,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",170,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",170,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",170,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",170,null],[11,"push_front","","Inserts an element first in the sequence.",170,null],[11,"push_back","","Appends an element to the back of a buffer",170,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",170,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",170,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",170,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",170,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",170,null],[11,"split_off","","Splits the collection into two at the given index.",170,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",170,null],[11,"retain","","Retains only the elements specified by the predicate.",170,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",170,null],[11,"clone","","",171,null],[11,"next","","",171,null],[11,"size_hint","","",171,null],[11,"next_back","","",171,null],[11,"next","","",172,null],[11,"size_hint","","",172,null],[11,"next_back","","",172,null],[11,"clone","","",173,null],[11,"next","","",173,null],[11,"size_hint","","",173,null],[11,"next_back","","",173,null],[11,"drop","","",174,null],[11,"next","","",174,null],[11,"size_hint","","",174,null],[11,"next_back","","",174,null],[11,"eq","","",170,null],[11,"partial_cmp","","",170,null],[11,"cmp","","",170,null],[11,"hash","","",170,null],[11,"index","","",170,null],[11,"index_mut","","",170,null],[11,"from_iter","","",170,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",170,null],[11,"extend","","",170,null],[11,"extend","","",170,null],[11,"fmt","","",170,null],[11,"from","","",170,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",132,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",175,null],[11,"ne","","",175,null],[11,"hash","","",175,null],[11,"fmt","","",175,null],[11,"clone","","",175,null],[11,"clone","alloc::boxed","",176,null],[11,"pointer","","",177,null],[11,"make_place","","",177,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",177,null],[11,"finalize","","",178,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",176,null],[11,"drop","","",177,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",178,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",178,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",178,null],[11,"default","","",178,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",178,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",178,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",178,null],[11,"clone","","",178,null],[11,"eq","","",178,null],[11,"ne","","",178,null],[11,"partial_cmp","","",178,null],[11,"lt","","",178,null],[11,"le","","",178,null],[11,"ge","","",178,null],[11,"gt","","",178,null],[11,"cmp","","",178,null],[11,"hash","","",178,null],[11,"from","","",178,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",178,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",178,null],[11,"fmt","","",178,null],[11,"fmt","","",178,null],[11,"fmt","","",178,null],[11,"deref","","",178,null],[11,"deref_mut","","",178,null],[11,"next","","",178,null],[11,"size_hint","","",178,null],[11,"next_back","","",178,null],[11,"call_once","","",178,null],[11,"call_once","","",178,null],[11,"clone","","",178,null],[11,"borrow","","",178,null],[11,"borrow_mut","","",178,null],[11,"as_ref","","",178,null],[11,"as_mut","","",178,null],[11,"is_contained_in","serde::core::str::pattern","Checks whether the pattern matches anywhere in the haystack",179,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",179,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",179,null],[11,"next_match","","Find the next `Match` result. See `next()`",180,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",180,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",181,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",181,null],[11,"len","serde::core::iter","Returns the exact number of times the iterator will iterate.",182,null],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",183,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",183,null],[11,"last","","Consumes the iterator, returning the last element.",183,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",183,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",183,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",183,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",183,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",183,null],[11,"filter_map","","Creates an iterator that both filters and maps.",183,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",183,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",183,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",183,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",183,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",183,null],[11,"take","","Creates an iterator that yields its first `n` elements.",183,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",183,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",183,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",183,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",183,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",183,null],[11,"collect","","Transforms an iterator into a collection.",183,null],[11,"partition","","Consumes an iterator, creating two collections from it.",183,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",183,null],[11,"all","","Tests if every element of the iterator matches a predicate.",183,null],[11,"any","","Tests if any element of the iterator matches a predicate.",183,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",183,null],[11,"position","","Searches for an element in an iterator, returning its index.",183,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",183,null],[11,"max","","Returns the maximum element of an iterator.",183,null],[11,"min","","Returns the minimum element of an iterator.",183,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",183,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",183,null],[11,"rev","","Reverses an iterator&#39;s direction.",183,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",183,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",183,null],[11,"cycle","","Repeats an iterator endlessly.",183,null],[11,"sum","","Sums the elements of an iterator.",183,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",183,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",183,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",183,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",183,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",183,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",183,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",183,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",183,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",183,null],[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"cmp","","",184,null],[11,"partial_cmp","","",184,null],[11,"lt","","",184,null],[11,"le","","",184,null],[11,"gt","","",184,null],[11,"ge","","",184,null],[11,"eq","","",184,null],[11,"ne","","",184,null],[11,"hash","","",184,null],[11,"default","","",184,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"clone","","",184,null],[11,"new","","Construct a new, empty `ByteBuf`.",184,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",184,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",184,null],[11,"into","","",184,null],[11,"from","","",184,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",184,null],[11,"as_ref","","",184,null],[11,"as_mut","","",184,null],[11,"as_mut","","",184,null],[11,"deref","","",184,null],[11,"deref_mut","","",184,null],[11,"serialize","","",184,null],[11,"visit_unit","","",185,null],[11,"visit_seq","","",185,null],[11,"visit_bytes","","",185,null],[11,"visit_byte_buf","","",185,null],[11,"deserialize","","",184,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"cmp","","",186,null],[11,"partial_cmp","","",186,null],[11,"lt","","",186,null],[11,"le","","",186,null],[11,"gt","","",186,null],[11,"ge","","",186,null],[11,"eq","","",186,null],[11,"ne","","",186,null],[11,"hash","","",186,null],[11,"clone","","",186,null],[11,"fmt","","",186,null],[11,"from","","",186,null],[11,"from","","",186,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",186,null],[11,"deref","","",186,null],[11,"serialize","","",186,null],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",187,null],[13,"Usize","","Represents a `usize` type.",187,null],[13,"U8","","Represents a `u8` type.",187,null],[13,"U16","","Represents a `u16` type.",187,null],[13,"U32","","Represents a `u32` type.",187,null],[13,"U64","","Represents a `u64` type.",187,null],[13,"Isize","","Represents a `isize` type.",187,null],[13,"I8","","Represents a `i8` type.",187,null],[13,"I16","","Represents a `i16` type.",187,null],[13,"I32","","Represents a `i32` type.",187,null],[13,"I64","","Represents a `i64` type.",187,null],[13,"F32","","Represents a `f32` type.",187,null],[13,"F64","","Represents a `f64` type.",187,null],[13,"Char","","Represents a `char` type.",187,null],[13,"Str","","Represents a `&amp;str` type.",187,null],[13,"String","","Represents a `String` type.",187,null],[13,"Unit","","Represents a `()` type.",187,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",187,null],[13,"Seq","","Represents a sequence type.",187,null],[13,"Map","","Represents a map type.",187,null],[13,"UnitStruct","","Represents a unit struct type.",187,null],[13,"NewtypeStruct","","Represents a newtype type.",187,null],[13,"TupleStruct","","Represents a tuple struct type.",187,null],[13,"Struct","","Represents a struct type.",187,null],[13,"FieldName","","Represents a struct field name.",187,null],[13,"Tuple","","Represents a tuple type.",187,null],[13,"Enum","","Represents an `enum` type.",187,null],[13,"VariantName","","Represents an enum variant name.",187,null],[13,"StructVariant","","Represents a struct variant.",187,null],[13,"TupleVariant","","Represents a tuple variant.",187,null],[13,"UnitVariant","","Represents a unit variant.",187,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",187,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",188,null],[11,"visit_seq","","",188,null],[11,"visit_bool","","",189,null],[11,"visit_str","","",189,null],[11,"deserialize","collections::string","",163,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",63,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",190,null],[11,"deserialize","core::marker","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",191,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",191,null],[11,"visit_seq","","",191,null],[11,"deserialize","collections::binary_heap","",128,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",192,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",192,null],[11,"visit_seq","","",192,null],[11,"deserialize","collections::btree::set","",145,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",193,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",193,null],[11,"visit_seq","","",193,null],[11,"deserialize","collections::linked_list","",158,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",194,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",194,null],[11,"visit_seq","","",194,null],[11,"deserialize","std::collections::hash::set","",195,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",196,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",196,null],[11,"visit_seq","","",196,null],[11,"deserialize","collections::vec","",132,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",197,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",197,null],[11,"visit_seq","","",197,null],[11,"deserialize","collections::vec_deque","",170,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",198,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",198,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",199,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",199,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",200,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",200,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",201,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",201,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",202,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",202,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",203,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",203,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",204,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",204,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",205,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",205,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",206,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",206,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",207,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",207,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",208,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",208,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",209,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",209,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",210,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",210,null],[11,"visit_map","","",210,null],[11,"deserialize","collections::btree::map","",133,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",211,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",211,null],[11,"visit_map","","",211,null],[11,"deserialize","std::collections::hash::map","",212,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",213,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",214,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",215,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",216,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",217,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",218,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",178,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",178,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",219,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",220,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",153,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",68,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",221,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",222,null],[13,"InvalidType","","The value had an incorrect type.",222,null],[13,"InvalidLength","","The value had an invalid length.",222,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",222,null],[13,"EndOfStream","","EOF while deserializing a value.",222,null],[13,"UnknownVariant","","Unknown variant in enum.",222,null],[13,"UnknownField","","Unknown field in struct.",222,null],[13,"MissingField","","Struct is missing a field.",222,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",223,null],[10,"into_deserializer","","Convert this value into a deserializer.",223,null],[11,"eq","","",222,null],[11,"ne","","",222,null],[11,"fmt","","",222,null],[11,"clone","","",222,null],[11,"custom","","",222,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",222,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",222,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",222,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",222,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",222,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",222,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",222,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",222,null],[11,"description","","",222,null],[11,"cause","","",222,null],[11,"deserialize","","",224,null],[11,"deserialize_option","","",224,null],[11,"deserialize","","",225,null],[11,"deserialize","","",226,null],[11,"deserialize","","",227,null],[11,"deserialize","","",228,null],[11,"deserialize","","",229,null],[11,"deserialize","","",230,null],[11,"deserialize","","",231,null],[11,"deserialize","","",232,null],[11,"deserialize","","",233,null],[11,"deserialize","","",234,null],[11,"deserialize","","",235,null],[11,"deserialize","","",236,null],[11,"deserialize","","",237,null],[11,"deserialize","","",238,null],[11,"deserialize","","",239,null],[11,"deserialize_enum","","",239,null],[11,"visit_variant","","",239,null],[11,"visit_unit","","",239,null],[11,"into_deserializer","collections::string","",163,null],[11,"deserialize","serde::de::value","",240,null],[11,"deserialize_enum","","",240,null],[11,"visit_variant","","",240,null],[11,"visit_unit","","",240,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",241,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",241,null],[11,"visit","","",241,null],[11,"end","","",241,null],[11,"size_hint","","",241,null],[11,"into_deserializer","collections::vec","",132,null],[11,"into_deserializer","collections::btree::set","",145,null],[11,"into_deserializer","std::collections::hash::set","",195,null],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",242,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",242,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V&gt;`.",243,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",243,null],[11,"visit_key","","",243,null],[11,"visit_value","","",243,null],[11,"end","","",243,null],[11,"size_hint","","",243,null],[11,"into_deserializer","collections::btree::map","",133,null],[11,"into_deserializer","std::collections::hash::map","",212,null],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",244,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",244,null],[11,"into_deserializer","serde::bytes","",186,null],[11,"deserialize","serde::de::value","",245,null],[11,"into_deserializer","serde::bytes","",184,null],[11,"deserialize","serde::de::value","",246,null],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",247,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",247,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",247,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",247,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",247,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",247,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",247,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",247,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",247,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",248,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",249,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",249,null],[11,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",249,null],[11,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",249,null],[11,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",249,null],[11,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",249,null],[11,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",249,null],[11,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",249,null],[11,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",249,null],[11,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",249,null],[11,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",249,null],[11,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",249,null],[11,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",249,null],[11,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",249,null],[11,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",249,null],[11,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",249,null],[11,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",249,null],[11,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",249,null],[11,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",249,null],[11,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",249,null],[11,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",249,null],[11,"deserialize_fixed_size_array","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",249,null],[11,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",249,null],[11,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",249,null],[11,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",249,null],[11,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.",249,null],[11,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",249,null],[11,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",249,null],[11,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",249,null],[11,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",249,null],[11,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",249,null],[11,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",249,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",250,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",250,null],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",250,null],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",250,null],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",250,null],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",250,null],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",250,null],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",250,null],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",250,null],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",250,null],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",250,null],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",250,null],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",250,null],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",250,null],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",250,null],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",250,null],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",250,null],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",250,null],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",250,null],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",250,null],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",250,null],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",250,null],[11,"visit_seq","","`visit_bool` deserializes a `SeqVisitor` into a `Value`.",250,null],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",250,null],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",250,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",250,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",251,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",251,null],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",251,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",251,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",252,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",252,null],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",252,null],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",252,null],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",252,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",252,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",252,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",253,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",253,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",254,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",254,null],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",254,null],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",254,null],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",254,null],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",254,null],[11,"fmt","","",187,null],[11,"eq","","",187,null],[11,"clone","","",187,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",255,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",255,null],[11,"col","","Report the current column inside the iterator.",255,null],[11,"get_ref","","Gets a reference to the underlying iterator.",255,null],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",255,null],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",255,null],[11,"peek","","peeks at the next value",255,null],[11,"next","","",255,null],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",163,null],[11,"serialize","core::option","",63,null],[11,"visit","","",63,null],[11,"len","","",63,null],[11,"serialize","core::marker","",8,null],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor&lt;Iter&gt;`.",256,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",256,null],[11,"len","","",256,null],[11,"serialize","collections::binary_heap","",128,null],[11,"serialize","collections::btree::set","",145,null],[11,"serialize","std::collections::hash::set","",195,null],[11,"serialize","collections::linked_list","",158,null],[11,"serialize","collections::vec","",132,null],[11,"serialize","collections::vec_deque","",170,null],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",257,null],[11,"visit","","",257,null],[11,"len","","",257,null],[11,"new","","Construct a new, empty `TupleVisitor`.",258,null],[11,"visit","","",258,null],[11,"len","","",258,null],[11,"new","","Construct a new, empty `TupleVisitor`.",259,null],[11,"visit","","",259,null],[11,"len","","",259,null],[11,"new","","Construct a new, empty `TupleVisitor`.",260,null],[11,"visit","","",260,null],[11,"len","","",260,null],[11,"new","","Construct a new, empty `TupleVisitor`.",261,null],[11,"visit","","",261,null],[11,"len","","",261,null],[11,"new","","Construct a new, empty `TupleVisitor`.",262,null],[11,"visit","","",262,null],[11,"len","","",262,null],[11,"new","","Construct a new, empty `TupleVisitor`.",263,null],[11,"visit","","",263,null],[11,"len","","",263,null],[11,"new","","Construct a new, empty `TupleVisitor`.",264,null],[11,"visit","","",264,null],[11,"len","","",264,null],[11,"new","","Construct a new, empty `TupleVisitor`.",265,null],[11,"visit","","",265,null],[11,"len","","",265,null],[11,"new","","Construct a new, empty `TupleVisitor`.",266,null],[11,"visit","","",266,null],[11,"len","","",266,null],[11,"new","","Construct a new, empty `TupleVisitor`.",267,null],[11,"visit","","",267,null],[11,"len","","",267,null],[11,"new","","Construct a new, empty `TupleVisitor`.",268,null],[11,"visit","","",268,null],[11,"len","","",268,null],[11,"new","","Construct a new `MapIteratorVisitor&lt;Iter&gt;`.",269,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",269,null],[11,"len","","",269,null],[11,"serialize","collections::btree::map","",133,null],[11,"serialize","std::collections::hash::map","",212,null],[11,"serialize","alloc::boxed","",178,null],[11,"serialize","alloc::rc","",220,null],[11,"serialize","alloc::arc","",219,null],[11,"serialize","collections::borrow","",153,null],[11,"serialize","core::result","",68,null],[11,"serialize","std::net::ip","",213,null],[11,"serialize","","",214,null],[11,"serialize","std::net::addr","",215,null],[11,"serialize","","",216,null],[11,"serialize","","",217,null],[11,"serialize","std::path","",270,null],[11,"serialize","","",218,null],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",271,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",271,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",272,null],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",273,null],[10,"serialize_bool","","Serializes a `bool` value.",273,null],[11,"serialize_isize","","Serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",273,null],[11,"serialize_i8","","Serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",273,null],[11,"serialize_i16","","Serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",273,null],[11,"serialize_i32","","Serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",273,null],[10,"serialize_i64","","Serializes a `i64` value.",273,null],[11,"serialize_usize","","Serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `serialize_u64` method.",273,null],[11,"serialize_u8","","Serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",273,null],[11,"serialize_u16","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",273,null],[11,"serialize_u32","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",273,null],[10,"serialize_u64","","`Serializes a `u64` value.",273,null],[11,"serialize_f32","","Serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `serialize_f64` method.",273,null],[10,"serialize_f64","","Serializes a `f64` value.",273,null],[11,"serialize_char","","Serializes a character. By default it serializes it as a `&amp;str` containing a\nsingle character.",273,null],[10,"serialize_str","","Serializes a `&amp;str`.",273,null],[11,"serialize_bytes","","Enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",273,null],[10,"serialize_unit","","Serializes a `()` value.",273,null],[11,"serialize_unit_struct","","Serializes a unit struct value.",273,null],[11,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",273,null],[11,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",273,null],[11,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",273,null],[10,"serialize_none","","Serializes a `None` value..serialize",273,null],[10,"serialize_some","","Serializes a `Some(...)` value.",273,null],[10,"serialize_seq","","Serializes a sequence.",273,null],[10,"serialize_seq_elt","","Serializes a sequence element.",273,null],[11,"serialize_tuple","","Serializes a tuple.",273,null],[11,"serialize_tuple_elt","","Serializes a tuple element.",273,null],[11,"serialize_fixed_size_array","","Serializes a fixed-size array.",273,null],[11,"serialize_tuple_struct","","Serializes a tuple struct.",273,null],[11,"serialize_tuple_struct_elt","","Serializes a tuple struct element.",273,null],[11,"serialize_tuple_variant","","Serializes a tuple variant.",273,null],[11,"serialize_tuple_variant_elt","","Serializes a tuple element.",273,null],[10,"serialize_map","","Serializes a map.",273,null],[10,"serialize_map_elt","","Serializes a map element (key-value pair).",273,null],[11,"serialize_struct","","Serializes a struct.",273,null],[11,"serialize_struct_elt","","Serializes an element of a struct.",273,null],[11,"serialize_struct_variant","","Serializes a struct variant.",273,null],[11,"serialize_struct_variant_elt","","Serializes an element of a struct variant.",273,null],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",274,null],[11,"len","","Return the length of the sequence if known.",274,null],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",275,null],[11,"len","","Return the length of the map if known.",275,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Hash"],[8,"Hasher"],[8,"Write"],[8,"PartialEq"],[8,"PartialOrd"],[3,"Utf16Encoder"],[3,"SplitWhitespace"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"DecodeUtf16Error"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"EncodeUtf16"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"ExactSizeIterator"],[8,"Iterator"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Arc"],[3,"Rc"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"DataError","","Error returned when a decompression object finds that the input stream of\nbytes was not a valid input stream of bytes.",null,null],[4,"Status","","Possible status results of compressing some data or successfully\ndecompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output\nbuffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have\nbeen written. Decompression/compression should not be called again.",0,null],[4,"Flush","","Values which indicate the form of flushing to be used when compressing or\ndecompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions,\nthis indicates that the underlying stream to decide how much data to\naccumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is\naligned on a byte boundary so that the decompressor can get all input\ndata available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is\nnot aligned to a byte boundary.",1,null],[13,"Block","","A deflate block is completed and emitted, as for `Flush::Sync`, but the\noutput is not aligned on a byte boundary and up to seven vits of the\ncurrent block are held to be written as the next byte after the next\ndeflate block is completed.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is\nreset so decompression can restart from this point if previous\ncompressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"Compression","","When compressing data, the compression level can be specified by a value in\nthis enum.",null,null],[13,"None","","No compression is to be performed, this may actually inflate data\nslightly when encoding.",2,null],[13,"Fast","","Optimize for the best speed of encoding.",2,null],[13,"Best","","Optimize for the size of data being encoded.",2,null],[13,"Default","","Choose the default compression, a balance between speed and size.",2,null],[11,"new","","Create a new blank builder with no header by default.",3,{"inputs":[],"output":{"name":"builder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",3,null],[11,"extra","","Configure the `extra` field in the gzip header.",3,null],[11,"filename","","Configure the `filename` field in the gzip header.",3,null],[11,"comment","","Configure the `comment` field in the gzip header.",3,null],[11,"write","","Consume this builder, creating a writer encoder in the process.",3,null],[11,"read","","Consume this builder, creating a reader encoder in the process.",3,null],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",3,null],[11,"filename","","Returns the `filename` field of this gzip stream&#39;s header, if present.",4,null],[11,"extra","","Returns the `extra` field of this gzip stream&#39;s header, if present.",4,null],[11,"comment","","Returns the `comment` field of this gzip stream&#39;s header, if present.",4,null],[11,"mtime","","Returns the `mtime` field of this gzip stream&#39;s header, if present.",4,null],[11,"fmt","","",5,null],[11,"new","","Creates a new object ready for compressing data that it&#39;s given.",6,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis compression object.",6,null],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis compression object.",6,null],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",6,null],[11,"compress","","Compresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",6,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming\nonly as much input as needed and writing as much output as possible.",6,null],[11,"new","","Creates a new object ready for decompressing data that it&#39;s given.",7,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by\nthis decompression object.",7,null],[11,"total_out","","Returns the total number of output bytes which have been produced by\nthis decompression object.",7,null],[11,"decompress","","Decompresses the input data into the output, consuming only as much\ninput as needed and writing as much output as possible.",7,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector\nspecified by `output`.",7,null],[11,"description","","",5,null],[11,"fmt","","",5,null],[0,"read","","Types which operate over `Read` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[0,"write","flate2","Types which operate over `Write` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over `BufRead` streams, both encoders and decoders for\nvarious formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[8,"FlateReadExt","flate2","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,null],[11,"gz_decode","","Consume this reader to create a decompression stream of this stream.",8,null],[11,"zlib_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,null],[11,"zlib_decode","","Consume this reader to create a decompression stream of this stream.",8,null],[11,"deflate_encode","","Consume this reader to create a compression stream at the specified\ncompression level.",8,null],[11,"deflate_decode","","Consume this reader to create a decompression stream of this stream.",8,null],[8,"FlateWriteExt","","A helper trait to create encoder/decoders with method syntax.",null,null],[11,"gz_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,null],[11,"zlib_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,null],[11,"zlib_decode","","Consume this writer to create a decompression stream of this stream.",9,null],[11,"deflate_encode","","Consume this writer to create a compression stream at the specified\ncompression level.",9,null],[11,"deflate_decode","","Consume this writer to create a decompression stream of this stream.",9,null],[11,"clone","","",2,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",10,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",10,null],[11,"finish","","Consumes this encoder, flushing the output stream.",10,null],[11,"write","","",10,null],[11,"flush","","",10,null],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",11,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",11,null],[11,"get_ref","","Acquires a reference to the underlying reader",11,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",11,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",11,null],[11,"read","","",11,null],[11,"new","flate2::bufread","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",12,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreaderbuf"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",12,null],[11,"get_ref","","Acquires a reference to the underlying reader",12,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,null],[11,"read","","",12,null],[11,"new","flate2::read","Creates a new decoder which will decompress data read from the given\nstream.",13,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",13,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",13,null],[11,"get_ref","","Acquires a reference to the underlying stream",13,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,null],[11,"read","","",13,null],[11,"new","flate2::bufread","Creates a new decoder which will decompress data read from the given\nstream.",14,{"inputs":[{"name":"r"}],"output":{"name":"decoderreaderbuf"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",14,null],[11,"get_ref","","Acquires a reference to the underlying stream",14,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",14,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",14,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",14,null],[11,"read","","",14,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",15,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",15,null],[11,"finish","","Consumes this encoder, flushing the output stream.",15,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",15,null],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",15,null],[11,"write","","",15,null],[11,"flush","","",15,null],[11,"new","","Creates a new encoder which will use the given compression level.",16,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the\nencoding is done.",16,null],[11,"write","","",16,null],[11,"flush","","",16,null],[11,"drop","","",16,null],[11,"new","flate2::read","Creates a new encoder which will use the given compression level.",17,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",17,null],[11,"read","","",17,null],[11,"new","flate2::bufread","Creates a new encoder which will use the given compression level.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreaderbuf"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,null],[11,"read","","",18,null],[11,"new","flate2::read","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",19,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",19,null],[11,"read","","",19,null],[11,"new","flate2::bufread","Creates a new decoder from the given reader, immediately parsing the\ngzip header.",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"header","","Returns the header associated with this stream.",20,null],[11,"read","","",20,null],[11,"new","flate2::write","Creates a new encoder which will write compressed data to the stream\ngiven at the given compression level.",21,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"encoderwriter"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output\nstream for another.",21,null],[11,"finish","","Consumes this encoder, flushing the output stream.",21,null],[11,"write","","",21,null],[11,"flush","","",21,null],[11,"new","flate2::read","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",22,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreader"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",22,null],[11,"get_ref","","Acquires a reference to the underlying stream",22,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",22,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",22,null],[11,"read","","",22,null],[11,"new","flate2::bufread","Creates a new encoder which will read uncompressed data from the given\nstream and emit the compressed stream.",23,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"encoderreaderbuf"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input\nstream for another.",23,null],[11,"get_ref","","Acquires a reference to the underlying stream",23,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",23,null],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",23,null],[11,"read","","",23,null],[11,"new","flate2::read","Creates a new decoder which will decompress data read from the given\nstream.",24,{"inputs":[{"name":"r"}],"output":{"name":"decoderreader"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",24,{"inputs":[{"name":"r"},{"name":"vec"}],"output":{"name":"decoderreader"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",24,null],[11,"get_ref","","Acquires a reference to the underlying stream",24,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",24,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",24,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",24,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",24,null],[11,"read","","",24,null],[11,"new","flate2::bufread","Creates a new decoder which will decompress data read from the given\nstream.",25,{"inputs":[{"name":"r"}],"output":{"name":"decoderreaderbuf"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input\nstream for another.",25,null],[11,"get_ref","","Acquires a reference to the underlying stream",25,null],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,null],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",25,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",25,null],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",25,null],[11,"read","","",25,null],[11,"new","flate2::write","Creates a new decoder which will write uncompressed data to the stream.",26,{"inputs":[{"name":"w"}],"output":{"name":"decoderwriter"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output\nstream for another.",26,null],[11,"finish","","Consumes this encoder, flushing the output stream.",26,null],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for\ndecompression.",26,null],[11,"total_out","","Returns the number of bytes that the decompressor has written to its\noutput stream.",26,null],[11,"write","","",26,null],[11,"flush","","",26,null]],"paths":[[4,"Status"],[4,"Flush"],[4,"Compression"],[3,"GzBuilder"],[3,"GzHeader"],[3,"DataError"],[3,"Compress"],[3,"Decompress"],[8,"FlateReadExt"],[8,"FlateWriteExt"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"GzDecoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"],[3,"ZlibDecoder"]]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"fmt","num_traits","",1,null],[11,"fmt","","",2,null],[8,"Num","num","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",3,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,null],[10,"abs_sub","","The positive difference of two numbers.",6,null],[10,"signum","","Returns the sign of the number.",6,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,null],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,null],[10,"swap_bytes","","Reverses the byte order of the integer.",13,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,null],[10,"floor","","Returns the largest integer less than or equal to a number.",14,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,null],[10,"trunc","","Return the integer part of a number.",14,null],[10,"fract","","Returns the fractional part of a number.",14,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,null],[10,"signum","","Returns a number that represents the sign of `self`.",14,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,null],[10,"powi","","Raise a number to an integer power.",14,null],[10,"powf","","Raise a number to a floating point power.",14,null],[10,"sqrt","","Take the square root of a number.",14,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,null],[10,"exp2","","Returns `2^(self)`.",14,null],[10,"ln","","Returns the natural logarithm of the number.",14,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,null],[10,"log2","","Returns the base 2 logarithm of the number.",14,null],[10,"log10","","Returns the base 10 logarithm of the number.",14,null],[10,"max","","Returns the maximum of the two numbers.",14,null],[10,"min","","Returns the minimum of the two numbers.",14,null],[10,"abs_sub","","The positive difference of two numbers.",14,null],[10,"cbrt","","Take the cubic root of a number.",14,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,null],[10,"sin","","Computes the sine of a number (in radians).",14,null],[10,"cos","","Computes the cosine of a number (in radians).",14,null],[10,"tan","","Computes the tangent of a number (in radians).",14,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,null],[10,"sinh","","Hyperbolic sine function.",14,null],[10,"cosh","","Hyperbolic cosine function.",14,null],[10,"tanh","","Hyperbolic tangent function.",14,null],[10,"asinh","","Inverse hyperbolic sine function.",14,null],[10,"acosh","","Inverse hyperbolic cosine function.",14,null],[10,"atanh","","Inverse hyperbolic tangent function.",14,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","num_iter","",18,null],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"next_back","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"next_back","","",19,null],[11,"clone","","",20,null],[11,"next","","",20,null],[11,"clone","","",21,null],[11,"next","","",21,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,null],[10,"abs_sub","","The positive difference of two numbers.",6,null],[10,"signum","","Returns the sign of the number.",6,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num::traits","",null,null],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,null],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[0,"float","num::traits","",null,null],[8,"Float","num::traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,null],[10,"floor","","Returns the largest integer less than or equal to a number.",14,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,null],[10,"trunc","","Return the integer part of a number.",14,null],[10,"fract","","Returns the fractional part of a number.",14,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,null],[10,"signum","","Returns a number that represents the sign of `self`.",14,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,null],[10,"powi","","Raise a number to an integer power.",14,null],[10,"powf","","Raise a number to a floating point power.",14,null],[10,"sqrt","","Take the square root of a number.",14,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,null],[10,"exp2","","Returns `2^(self)`.",14,null],[10,"ln","","Returns the natural logarithm of the number.",14,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,null],[10,"log2","","Returns the base 2 logarithm of the number.",14,null],[10,"log10","","Returns the base 10 logarithm of the number.",14,null],[10,"max","","Returns the maximum of the two numbers.",14,null],[10,"min","","Returns the minimum of the two numbers.",14,null],[10,"abs_sub","","The positive difference of two numbers.",14,null],[10,"cbrt","","Take the cubic root of a number.",14,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,null],[10,"sin","","Computes the sine of a number (in radians).",14,null],[10,"cos","","Computes the cosine of a number (in radians).",14,null],[10,"tan","","Computes the tangent of a number (in radians).",14,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,null],[10,"sinh","","Hyperbolic sine function.",14,null],[10,"cosh","","Hyperbolic cosine function.",14,null],[10,"tanh","","Hyperbolic tangent function.",14,null],[10,"asinh","","Inverse hyperbolic sine function.",14,null],[10,"acosh","","Inverse hyperbolic cosine function.",14,null],[10,"atanh","","Inverse hyperbolic tangent function.",14,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,null],[10,"swap_bytes","","Reverses the byte order of the integer.",13,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,null],[8,"Num","num::traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",3,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",2,null],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",4,null],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",6,null],[10,"abs_sub","","The positive difference of two numbers.",6,null],[10,"signum","","Returns the sign of the number.",6,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",6,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",6,null],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",8,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",8,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",5,{"inputs":[],"output":{"name":"self"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",7,{"inputs":[],"output":{"name":"self"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",13,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",13,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",13,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",13,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",13,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",13,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",13,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",13,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",13,null],[10,"swap_bytes","","Reverses the byte order of the integer.",13,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",13,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",13,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",13,null],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",9,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",10,null],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",14,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",14,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",14,null],[10,"floor","","Returns the largest integer less than or equal to a number.",14,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",14,null],[10,"trunc","","Return the integer part of a number.",14,null],[10,"fract","","Returns the fractional part of a number.",14,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",14,null],[10,"signum","","Returns a number that represents the sign of `self`.",14,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",14,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",14,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",14,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,null],[10,"powi","","Raise a number to an integer power.",14,null],[10,"powf","","Raise a number to a floating point power.",14,null],[10,"sqrt","","Take the square root of a number.",14,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,null],[10,"exp2","","Returns `2^(self)`.",14,null],[10,"ln","","Returns the natural logarithm of the number.",14,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,null],[10,"log2","","Returns the base 2 logarithm of the number.",14,null],[10,"log10","","Returns the base 10 logarithm of the number.",14,null],[10,"max","","Returns the maximum of the two numbers.",14,null],[10,"min","","Returns the minimum of the two numbers.",14,null],[10,"abs_sub","","The positive difference of two numbers.",14,null],[10,"cbrt","","Take the cubic root of a number.",14,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",14,null],[10,"sin","","Computes the sine of a number (in radians).",14,null],[10,"cos","","Computes the cosine of a number (in radians).",14,null],[10,"tan","","Computes the tangent of a number (in radians).",14,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",14,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",14,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",14,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",14,null],[10,"sinh","","Hyperbolic sine function.",14,null],[10,"cosh","","Hyperbolic cosine function.",14,null],[10,"tanh","","Hyperbolic tangent function.",14,null],[10,"asinh","","Inverse hyperbolic sine function.",14,null],[10,"acosh","","Inverse hyperbolic cosine function.",14,null],[10,"atanh","","Inverse hyperbolic tangent function.",14,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",12,null],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",17,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",11,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",15,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",15,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",15,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",15,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",15,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",15,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",15,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",15,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",15,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",15,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",15,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",15,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",16,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"clone","","",3,null],[11,"next","","",3,null]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["onig"] = {"doc":"This crate provides a safe wrapper around the\n[Oniguruma](https://github.com/kkos/oniguruma) regular expression library.","items":[[3,"RegexOptions","onig","Regex parsing and compilation options.",null,null],[3,"SearchOptions","","Regex evaluation options.",null,null],[3,"SyntaxOperator","","",null,null],[3,"SyntaxBehavior","","",null,null],[3,"CaptureNames","","CaptureNames is an iterator over named groups as a tuple with the group name\nand group indexes.",null,null],[3,"Region","","Represents a set of capture groups found in a search or match.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\n expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of\na regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureTreeNode","","",null,null],[3,"CaptureTreeNodeIter","","",null,null],[3,"Syntax","","",null,null],[3,"Error","","This struture represents an error from the underlying Oniguruma libray.",null,null],[3,"Regex","","This struct is a wrapper around an Oniguruma regular expression\npointer. This represents a compiled regex which can be used in\nsearch and match operations.",null,null],[5,"version","","Get Version",null,{"inputs":[],"output":{"name":"string"}}],[5,"copyright","","Get Copyright",null,{"inputs":[],"output":{"name":"string"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match\nin text. Capture group `0` always corresponds to the entire match.\nIf no match is found, then `None` is returned.",0,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`,\nreturning the start and end byte indices with respect to `text`.",0,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",0,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn&#39;t*\nmatched by the regular expression.",0,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn&#39;t*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",0,null],[11,"fmt","","",1,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if i is not a valid capture group or if the capture group did\nnot match anything. The positions returned are always byte indices with\nrespect to the original string matched.",1,null],[11,"at","","Returns the matched string for the capture group `i`. If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is returned.",1,null],[11,"len","","Returns the number of captured groups.",1,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",1,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in\nthe regular expression.",1,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices in\nterms of the original string matched.",1,null],[11,"next","","",2,null],[11,"next","","",3,null],[11,"next","","",4,null],[11,"next","","",5,null],[11,"next","","",6,null],[11,"next","","",7,null],[11,"hash","","",8,null],[11,"cmp","","",8,null],[11,"partial_cmp","","",8,null],[11,"lt","","",8,null],[11,"le","","",8,null],[11,"gt","","",8,null],[11,"ge","","",8,null],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"fmt","","",8,null],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[],"output":{"name":"regexoptions"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[],"output":{"name":"regexoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"onigoptiontype"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8,{"inputs":[{"name":"onigoptiontype"}],"output":{"name":"regexoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,null],[11,"is_all","","Returns `true` if all flags are currently set.",8,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,null],[11,"insert","","Inserts the specified flags in-place.",8,null],[11,"remove","","Removes the specified flags in-place.",8,null],[11,"toggle","","Toggles the specified flags in-place.",8,null],[11,"bitor","","Returns the union of the two sets of flags.",8,null],[11,"bitor_assign","","Adds the set of flags.",8,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,null],[11,"bitxor_assign","","Toggles the set of flags.",8,null],[11,"bitand","","Returns the intersection between the two sets of flags.",8,null],[11,"bitand_assign","","Disables all flags disabled in the set.",8,null],[11,"sub","","Returns the set difference of the two sets of flags.",8,null],[11,"sub_assign","","Disables all flags enabled in the set.",8,null],[11,"not","","Returns the complement of this set of flags.",8,null],[11,"extend","","",8,null],[11,"from_iter","","",8,{"inputs":[{"name":"t"}],"output":{"name":"regexoptions"}}],[11,"hash","","",9,null],[11,"cmp","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"fmt","","",9,null],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"searchoptions"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"searchoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"onigoptiontype"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9,{"inputs":[{"name":"onigoptiontype"}],"output":{"name":"searchoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,null],[11,"is_all","","Returns `true` if all flags are currently set.",9,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,null],[11,"insert","","Inserts the specified flags in-place.",9,null],[11,"remove","","Removes the specified flags in-place.",9,null],[11,"toggle","","Toggles the specified flags in-place.",9,null],[11,"bitor","","Returns the union of the two sets of flags.",9,null],[11,"bitor_assign","","Adds the set of flags.",9,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,null],[11,"bitxor_assign","","Toggles the set of flags.",9,null],[11,"bitand","","Returns the intersection between the two sets of flags.",9,null],[11,"bitand_assign","","Disables all flags disabled in the set.",9,null],[11,"sub","","Returns the set difference of the two sets of flags.",9,null],[11,"sub_assign","","Disables all flags enabled in the set.",9,null],[11,"not","","Returns the complement of this set of flags.",9,null],[11,"extend","","",9,null],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"searchoptions"}}],[11,"hash","","",10,null],[11,"cmp","","",10,null],[11,"partial_cmp","","",10,null],[11,"lt","","",10,null],[11,"le","","",10,null],[11,"gt","","",10,null],[11,"ge","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"syntaxoperator"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"syntaxoperator"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",10,{"inputs":[{"name":"u64"}],"output":{"name":"syntaxoperator"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,null],[11,"is_all","","Returns `true` if all flags are currently set.",10,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,null],[11,"insert","","Inserts the specified flags in-place.",10,null],[11,"remove","","Removes the specified flags in-place.",10,null],[11,"toggle","","Toggles the specified flags in-place.",10,null],[11,"bitor","","Returns the union of the two sets of flags.",10,null],[11,"bitor_assign","","Adds the set of flags.",10,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,null],[11,"bitxor_assign","","Toggles the set of flags.",10,null],[11,"bitand","","Returns the intersection between the two sets of flags.",10,null],[11,"bitand_assign","","Disables all flags disabled in the set.",10,null],[11,"sub","","Returns the set difference of the two sets of flags.",10,null],[11,"sub_assign","","Disables all flags enabled in the set.",10,null],[11,"not","","Returns the complement of this set of flags.",10,null],[11,"extend","","",10,null],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"syntaxoperator"}}],[11,"hash","","",11,null],[11,"cmp","","",11,null],[11,"partial_cmp","","",11,null],[11,"lt","","",11,null],[11,"le","","",11,null],[11,"gt","","",11,null],[11,"ge","","",11,null],[11,"clone","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"fmt","","",11,null],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"syntaxbehavior"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"syntaxbehavior"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"onigsyntaxbehavior"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",11,{"inputs":[{"name":"onigsyntaxbehavior"}],"output":{"name":"syntaxbehavior"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,null],[11,"is_all","","Returns `true` if all flags are currently set.",11,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,null],[11,"insert","","Inserts the specified flags in-place.",11,null],[11,"remove","","Removes the specified flags in-place.",11,null],[11,"toggle","","Toggles the specified flags in-place.",11,null],[11,"bitor","","Returns the union of the two sets of flags.",11,null],[11,"bitor_assign","","Adds the set of flags.",11,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,null],[11,"bitxor_assign","","Toggles the set of flags.",11,null],[11,"bitand","","Returns the intersection between the two sets of flags.",11,null],[11,"bitand_assign","","Disables all flags disabled in the set.",11,null],[11,"sub","","Returns the set difference of the two sets of flags.",11,null],[11,"sub_assign","","Disables all flags enabled in the set.",11,null],[11,"not","","Returns the complement of this set of flags.",11,null],[11,"extend","","",11,null],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"syntaxbehavior"}}],[11,"fmt","","",12,null],[11,"new","","Create a new empty `Region`",12,{"inputs":[],"output":{"name":"region"}}],[11,"with_capacity","","Create a new region with a given capacity. This function allocates\na new region object as in `Region::new` and resizes it to\ncontain at least `capacity` regions.",12,{"inputs":[{"name":"usize"}],"output":{"name":"region"}}],[11,"clear","","This can be used to clear out a region so it can be used\nagain. See [`onig_sys::onig_region_clear`][region_clear]",12,null],[11,"capacity","","",12,null],[11,"reserve","","Updates the region to contain `new_capacity` slots. See\n[`onig_sys::onig_region_resize`][region_resize] for mor\ninformation.",12,null],[11,"len","","Get the size of the region. Returns the number of registers in\nthe region.",12,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `pos` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are always byte indices with\nrespect to the original string matched.",12,null],[11,"tree","","",12,null],[11,"drop","","",12,null],[11,"clone","","",12,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string or a function that takes\nthe matches `Captures` and returns the replaced string.",0,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",0,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",0,null],[11,"capture_names_len","","Returns the number of named groups into regex.",0,null],[11,"capture_names","","Returns the iterator over named groups as a tuple with the group name\nand group indexes.",0,null],[11,"fmt","","",13,null],[11,"next","","",13,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"asis","","Plain text syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"posix_basic","","POSIX Basic RE syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"posix_extended","","POSIX Extended RE syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"emacs","","Emacs syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"grep","","Grep syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"gnu_regex","","GNU regex syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"java","","Java (Sun java.util.regex) syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"perl","","Perl syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"perl_ng","","Perl + named group syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"ruby","","Ruby syntax",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"default","","Default syntax (Ruby syntax)",14,{"inputs":[],"output":{"name":"syntax"}}],[11,"operators","","",14,null],[11,"set_operators","","",14,null],[11,"enable_operators","","",14,null],[11,"disable_operators","","",14,null],[11,"behavior","","",14,null],[11,"set_behavior","","",14,null],[11,"enable_behavior","","",14,null],[11,"disable_behavior","","",14,null],[11,"options","","",14,null],[11,"set_options","","",14,null],[11,"fmt","","",15,null],[11,"group","","",15,null],[11,"pos","","",15,null],[11,"len","","",15,null],[11,"children","","",15,null],[11,"index","","",15,null],[11,"fmt","","",16,null],[11,"next","","",16,null],[17,"REGEX_OPTION_NONE","","Default options.",null,null],[17,"REGEX_OPTION_IGNORECASE","","Ambiguity match on.",null,null],[17,"REGEX_OPTION_EXTEND","","Extended pattern form.",null,null],[17,"REGEX_OPTION_MULTILINE","","`&#39;.&#39;` match with newline.",null,null],[17,"REGEX_OPTION_SINGLELINE","","`&#39;^&#39;` -&gt; `&#39;\\A&#39;`, `&#39;$&#39;` -&gt; `&#39;\\Z&#39;`.",null,null],[17,"REGEX_OPTION_FIND_LONGEST","","Find longest match.",null,null],[17,"REGEX_OPTION_FIND_NOT_EMPTY","","Ignore empty match.",null,null],[17,"REGEX_OPTION_NEGATE_SINGLELINE","","Clear `OPTION_SINGLELINE` which is enabled on\n`SYNTAX_POSIX_BASIC`, `SYNTAX_POSIX_EXTENDED`,\n`SYNTAX_PERL`, `SYNTAX_PERL_NG`, `SYNTAX_JAVA`.",null,null],[17,"REGEX_OPTION_DONT_CAPTURE_GROUP","","Only named group captured.",null,null],[17,"REGEX_OPTION_CAPTURE_GROUP","","Named and no-named group captured.",null,null],[17,"SEARCH_OPTION_NONE","","Default options.",null,null],[17,"SEARCH_OPTION_NOTBOL","","String head isn&#39;t considered as begin of line.",null,null],[17,"SEARCH_OPTION_NOTEOL","","String end isn&#39;t considered as end of line.",null,null],[17,"SYNTAX_OPERATOR_DOT_ANYCHAR","","`.`",null,null],[17,"SYNTAX_OPERATOR_ASTERISK_ZERO_INF","","`*`",null,null],[17,"SYNTAX_OPERATOR_PLUS_ONE_INF","","`+`",null,null],[17,"SYNTAX_OPERATOR_QMARK_ZERO_ONE","","`?`",null,null],[17,"SYNTAX_OPERATOR_BRACE_INTERVAL","","`{lower,upper}`",null,null],[17,"SYNTAX_OPERATOR_ESC_BRACE_INTERVAL","","`\\{lower,upper\\}`",null,null],[17,"SYNTAX_OPERATOR_VBAR_ALT","","`|`",null,null],[17,"SYNTAX_OPERATOR_ESC_VBAR_ALT","","`\\|`",null,null],[17,"SYNTAX_OPERATOR_LPAREN_SUBEXP","","`(...)`",null,null],[17,"SYNTAX_OPERATOR_ESC_LPAREN_SUBEXP","","`\\(...\\)`",null,null],[17,"SYNTAX_OPERATOR_ESC_AZ_BUF_ANCHOR","","`\\A, \\Z, \\z`",null,null],[17,"SYNTAX_OPERATOR_ESC_CAPITAL_G_BEGIN_ANCHOR","","`\\G`",null,null],[17,"SYNTAX_OPERATOR_DECIMAL_BACKREF","","`\\num`",null,null],[17,"SYNTAX_OPERATOR_BRACKET_CC","","`[...]`",null,null],[17,"SYNTAX_OPERATOR_ESC_W_WORD","","`\\w, \\W`",null,null],[17,"SYNTAX_OPERATOR_ESC_LTGT_WORD_BEGIN_END","","`\\&lt;. \\&gt;`",null,null],[17,"SYNTAX_OPERATOR_ESC_B_WORD_BOUND","","`\\b, \\B`",null,null],[17,"SYNTAX_OPERATOR_ESC_S_WHITE_SPACE","","`\\s, \\S`",null,null],[17,"SYNTAX_OPERATOR_ESC_D_DIGIT","","`\\d, \\D`",null,null],[17,"SYNTAX_OPERATOR_LINE_ANCHOR","","`^, $`",null,null],[17,"SYNTAX_OPERATOR_POSIX_BRACKET","","`[:xxxx:]`",null,null],[17,"SYNTAX_OPERATOR_QMARK_NON_GREEDY","","`??,*?,+?,{n,m}?`",null,null],[17,"SYNTAX_OPERATOR_ESC_CONTROL_CHARS","","`\\n,\\r,\\t,\\a ...`",null,null],[17,"SYNTAX_OPERATOR_ESC_C_CONTROL","","`\\cx`",null,null],[17,"SYNTAX_OPERATOR_ESC_OCTAL3","","`\\OOO`",null,null],[17,"SYNTAX_OPERATOR_ESC_X_HEX2","","`\\xHH`",null,null],[17,"SYNTAX_OPERATOR_ESC_X_BRACE_HEX8","","`\\x{7HHHHHHH}`",null,null],[17,"SYNTAX_OPERATOR_ESC_CAPITAL_Q_QUOTE","","`\\Q...\\E`",null,null],[17,"SYNTAX_OPERATOR_QMARK_GROUP_EFFECT","","`(?...)`",null,null],[17,"SYNTAX_OPERATOR_OPTION_PERL","","`(?imsx),(?-imsx)`",null,null],[17,"SYNTAX_OPERATOR_OPTION_RUBY","","`(?imx), (?-imx)`",null,null],[17,"SYNTAX_OPERATOR_PLUS_POSSESSIVE_REPEAT","","`?+,*+,++`",null,null],[17,"SYNTAX_OPERATOR_PLUS_POSSESSIVE_INTERVAL","","`{n,m}+`",null,null],[17,"SYNTAX_OPERATOR_CCLASS_SET_OP","","`[...&amp;&amp;..[..]..]`",null,null],[17,"SYNTAX_OPERATOR_QMARK_LT_NAMED_GROUP","","`(?&lt;name&gt;...)`",null,null],[17,"SYNTAX_OPERATOR_ESC_K_NAMED_BACKREF","","`\\k&lt;name&gt;`",null,null],[17,"SYNTAX_OPERATOR_ESC_G_SUBEXP_CALL","","`\\g&lt;name&gt;, \\g&lt;n&gt;`",null,null],[17,"SYNTAX_OPERATOR_ATMARK_CAPTURE_HISTORY","","`(?@..),(?@&lt;x&gt;..)`",null,null],[17,"SYNTAX_OPERATOR_ESC_CAPITAL_C_BAR_CONTROL","","`\\C-x`",null,null],[17,"SYNTAX_OPERATOR_ESC_CAPITAL_M_BAR_META","","`\\M-x`",null,null],[17,"SYNTAX_OPERATOR_ESC_V_VTAB","","`\\v as VTAB`",null,null],[17,"SYNTAX_OPERATOR_ESC_U_HEX4","","`\\uHHHH`",null,null],[17,"SYNTAX_OPERATOR_ESC_GNU_BUF_ANCHOR","","`\\`, \\&#39;`",null,null],[17,"SYNTAX_OPERATOR_ESC_P_BRACE_CHAR_PROPERTY","","`\\p{...}, \\P{...}`",null,null],[17,"SYNTAX_OPERATOR_ESC_P_BRACE_CIRCUMFLEX_NOT","","`\\p{^..}, \\P{^..}`",null,null],[17,"SYNTAX_OPERATOR_ESC_H_XDIGIT","","`\\h, \\H`",null,null],[17,"SYNTAX_OPERATOR_INEFFECTIVE_ESCAPE","","`\\`",null,null],[17,"SYNTAX_BEHAVIOR_CONTEXT_INDEP_REPEAT_OPS","","`?, *, +, {n,m}`",null,null],[17,"SYNTAX_BEHAVIOR_CONTEXT_INVALID_REPEAT_OPS","","`error or ignore`",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_UNMATCHED_CLOSE_SUBEXP","","`...)...`",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_INVALID_INTERVAL","","`{???`",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_INTERVAL_LOW_ABBREV","","`{,n} =&gt; {0,n}`",null,null],[17,"SYNTAX_BEHAVIOR_STRICT_CHECK_BACKREF","","`/(\\1)/,/\\1()/ ..`",null,null],[17,"SYNTAX_BEHAVIOR_DIFFERENT_LEN_ALT_LOOK_BEHIND","","`(?&lt;=a|bc)`",null,null],[17,"SYNTAX_BEHAVIOR_CAPTURE_ONLY_NAMED_GROUP","","See Oniguruma documenation",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_MULTIPLEX_DEFINITION_NAME","","`(?&lt;x&gt;)(?&lt;x&gt;)`",null,null],[17,"SYNTAX_BEHAVIOR_FIXED_INTERVAL_IS_GREEDY_ONLY","","`a{n}?=(?:a{n})?`",null,null],[17,"SYNTAX_BEHAVIOR_NOT_NEWLINE_IN_NEGATIVE_CC","","`[^...]`",null,null],[17,"SYNTAX_BEHAVIOR_BACKSLASH_ESCAPE_IN_CC","","`[..\\w..] etc..`",null,null],[17,"SYNTAX_BEHAVIOR_ALLOW_DOUBLE_RANGE_OP_IN_CC","","`[0-9-a]=[0-9\\-a]`",null,null],[17,"SYNTAX_BEHAVIOR_WARN_CC_OP_NOT_ESCAPED","","`[,-,]`",null,null],[17,"SYNTAX_BEHAVIOR_WARN_REDUNDANT_NESTED_REPEAT","","`(?:a*)+`",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",17,null],[11,"fmt","","",0,null],[11,"code","","Return Oniguruma engine error code.",18,null],[11,"description","","Return error description provided by Oniguruma engine.",18,null],[11,"description","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",19,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",19,null],[11,"try_lock","","Attempts to acquire this lock.",19,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",19,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",19,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",19,null],[11,"from","alloc::boxed","",20,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",20,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",20,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",20,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",21,null],[11,"description","","",22,null],[11,"description","core::num","",23,null],[11,"description","","",24,null],[11,"description","core::num::dec2flt","",25,null],[11,"description","collections::string","",26,null],[11,"description","","",27,null],[11,"description","","",28,null],[11,"description","rustc_unicode::char","",29,null],[11,"description","alloc::boxed","",20,null],[11,"cause","","",20,null],[11,"description","core::fmt","",30,null],[11,"is","","Returns true if the boxed type is the same as `T`",31,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",31,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",31,null],[11,"is","","Forwards to the method defined on the type `Any`.",31,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",31,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",31,null],[11,"is","","Forwards to the method defined on the type `Any`.",31,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",31,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",31,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",31,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",31,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",31,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"next","std::ascii","",32,null],[11,"size_hint","","",32,null],[11,"next_back","","",32,null],[11,"clone","std::thread::local","",33,null],[11,"eq","","",33,null],[11,"with","","Acquires a reference to the value in this TLS key.",34,null],[11,"state","","Query the current state of this key.",34,null],[11,"new","std::thread::local::elf","",35,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",35,null],[11,"new","std::thread::local::os","",36,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",36,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",37,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",37,null],[11,"stack_size","","Sets the size of the stack for the new thread.",37,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",37,null],[11,"clone","","",38,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",38,null],[11,"name","","Gets the thread&#39;s name.",38,null],[11,"fmt","","",38,null],[11,"thread","","Extracts a handle to the underlying thread",39,null],[11,"join","","Waits for the associated thread to finish.",39,null],[11,"clone","std::collections::hash::map","",40,null],[11,"new","","Creates an empty HashMap.",40,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",40,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",40,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",40,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",40,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",40,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",40,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",40,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",40,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",40,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",40,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",40,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",40,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",40,null],[11,"len","","Returns the number of elements in the map.",40,null],[11,"is_empty","","Returns true if the map contains no elements.",40,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",40,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",40,null],[11,"get","","Returns a reference to the value corresponding to the key.",40,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",40,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",40,null],[11,"insert","","Inserts a key-value pair into the map.",40,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",40,null],[11,"eq","","",40,null],[11,"fmt","","",40,null],[11,"default","","",40,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",40,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"len","","",41,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"len","","",44,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"len","","",45,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"len","","",42,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"len","","",43,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"len","","",46,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"len","","",47,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",48,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",48,null],[11,"key","","Returns a reference to this entry&#39;s key.",48,null],[11,"key","","Gets a reference to the key in the entry.",49,null],[11,"remove_pair","","Take the ownership of the key and value from the map.",49,null],[11,"get","","Gets a reference to the value in the entry.",49,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",49,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",49,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",49,null],[11,"remove","","Takes the value out of the entry, and returns it",49,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",50,null],[11,"into_key","","Take ownership of the key.",50,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",50,null],[11,"from_iter","","",40,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",40,null],[11,"extend","","",40,null],[11,"clone","","",51,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",51,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",51,null],[11,"default","","",51,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",52,null],[11,"new","","Creates an empty HashSet.",52,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",52,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",52,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",52,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",52,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",52,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",52,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",52,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",52,null],[11,"difference","","Visit the values representing the difference.",52,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",52,null],[11,"intersection","","Visit the values representing the intersection.",52,null],[11,"union","","Visit the values representing the union.",52,null],[11,"len","","Returns the number of elements in the set.",52,null],[11,"is_empty","","Returns true if the set contains no elements.",52,null],[11,"drain","","Clears the set, returning all elements in an iterator.",52,null],[11,"clear","","Clears the set, removing all values.",52,null],[11,"contains","","Returns `true` if the set contains a value.",52,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",52,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",52,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",52,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",52,null],[11,"insert","","Adds a value to the set.",52,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",52,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",52,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",52,null],[11,"eq","","",52,null],[11,"fmt","","",52,null],[11,"from_iter","","",52,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",52,null],[11,"extend","","",52,null],[11,"default","","",52,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",52,null],[11,"clone","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"len","","",53,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"len","","",54,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"len","","",55,null],[11,"clone","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"size_hint","","",57,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","collections::binary_heap","",60,null],[11,"clone_from","","",60,null],[11,"default","","",60,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",60,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",60,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",60,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",60,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",60,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",60,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",60,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",60,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",60,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",60,null],[11,"push","","Pushes an item onto the binary heap.",60,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",60,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",60,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",60,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",60,null],[11,"len","","Returns the length of the binary heap.",60,null],[11,"is_empty","","Checks if the binary heap is empty.",60,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",60,null],[11,"clear","","Drops all items from the binary heap.",60,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",60,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"next","","",63,null],[11,"size_hint","","",63,null],[11,"next_back","","",63,null],[11,"from","","",60,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",64,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",60,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",60,null],[11,"extend","","",60,null],[11,"extend","","",60,null],[11,"clone","collections::vec_deque","",65,null],[11,"drop","","",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",65,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",65,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",65,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",65,null],[11,"swap","","Swaps elements at indices `i` and `j`.",65,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",65,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",65,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",65,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",65,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",65,null],[11,"iter","","Returns a front-to-back iterator.",65,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",65,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",65,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",65,null],[11,"len","","Returns the number of elements in the `VecDeque`.",65,null],[11,"is_empty","","Returns true if the buffer contains no elements",65,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",65,null],[11,"clear","","Clears the buffer, removing all values.",65,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",65,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",65,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",65,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",65,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",65,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",65,null],[11,"push_front","","Inserts an element first in the sequence.",65,null],[11,"push_back","","Appends an element to the back of a buffer",65,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",65,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",65,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",65,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",65,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",65,null],[11,"split_off","","Splits the collection into two at the given index.",65,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",65,null],[11,"retain","","Retains only the elements specified by the predicate.",65,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",65,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"next","","",67,null],[11,"size_hint","","",67,null],[11,"next_back","","",67,null],[11,"clone","","",68,null],[11,"next","","",68,null],[11,"size_hint","","",68,null],[11,"next_back","","",68,null],[11,"drop","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"eq","","",65,null],[11,"partial_cmp","","",65,null],[11,"cmp","","",65,null],[11,"hash","","",65,null],[11,"index","","",65,null],[11,"index_mut","","",65,null],[11,"from_iter","","",65,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",65,null],[11,"extend","","",65,null],[11,"extend","","",65,null],[11,"fmt","","",65,null],[11,"from","","",65,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",64,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"clone","collections::linked_list","",70,null],[11,"clone","","",71,null],[11,"default","","",72,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",72,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",72,null],[11,"iter","","Provides a forward iterator.",72,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",72,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",72,null],[11,"len","","Returns the length of the `LinkedList`.",72,null],[11,"clear","","Removes all elements from the `LinkedList`.",72,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",72,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",72,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",72,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",72,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",72,null],[11,"push_front","","Adds an element first in the list.",72,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",72,null],[11,"push_back","","Appends an element to the back of a list",72,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",72,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",72,null],[11,"front_place","","Returns a place for insertion at the front of the list.",72,null],[11,"back_place","","Returns a place for insertion at the back of the list.",72,null],[11,"drop","","",72,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"next_back","","",73,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",73,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",73,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","",72,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",72,null],[11,"extend","","",72,null],[11,"extend","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"partial_cmp","","",72,null],[11,"cmp","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"hash","","",72,null],[11,"make_place","","",74,null],[11,"pointer","","",74,null],[11,"finalize","","",74,null],[11,"make_place","","",75,null],[11,"pointer","","",75,null],[11,"finalize","","",75,null],[11,"next","std::env","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"clone","","",78,null],[11,"eq","","",78,null],[11,"ne","","",78,null],[11,"fmt","","",78,null],[11,"fmt","","",78,null],[11,"description","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"fmt","","",80,null],[11,"description","","",80,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"len","","",81,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"len","","",82,null],[11,"clone","std::ffi::c_str","",83,null],[11,"hash","","",83,null],[11,"cmp","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"hash","","",84,null],[11,"fmt","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"fmt","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"fmt","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",83,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",83,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",83,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",83,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",83,null],[11,"into_bytes","","Returns the underlying byte buffer.",83,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",83,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",83,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",83,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",84,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",84,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",84,null],[11,"as_ptr","","Returns the inner pointer to this C string.",84,null],[11,"to_bytes","","Converts this C string to a byte slice.",84,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",84,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",84,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",84,null],[11,"deref","","",83,null],[11,"fmt","","",83,null],[11,"from","collections::vec","",64,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",84,null],[11,"default","","",83,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",83,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",85,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",85,null],[11,"description","","",85,null],[11,"fmt","","",85,null],[11,"from","std::io::error","",88,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",87,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",87,null],[11,"description","","",87,null],[11,"cause","","",87,null],[11,"fmt","","",87,null],[11,"eq","","",84,null],[11,"partial_cmp","","",84,null],[11,"cmp","","",84,null],[11,"to_owned","","",84,null],[11,"from","","",83,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",83,null],[11,"as_ref","","",84,null],[11,"as_ref","","",83,null],[11,"clone","std::ffi::os_str","",89,null],[11,"new","","Constructs a new empty `OsString`.",89,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",89,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",89,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",89,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",89,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",89,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",89,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",89,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",89,null],[11,"from","","",89,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",89,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",89,null],[11,"new","","Coerces into an `OsStr` slice.",90,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",90,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",90,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",90,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",90,null],[11,"len","","Returns the length of this `OsStr`.",90,null],[11,"deref","","",89,null],[11,"default","","",89,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",89,null],[11,"eq","","",89,null],[11,"eq","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"partial_cmp","","",89,null],[11,"cmp","","",89,null],[11,"hash","","",89,null],[11,"eq","","",90,null],[11,"eq","","",90,null],[11,"partial_cmp","","",90,null],[11,"lt","","",90,null],[11,"le","","",90,null],[11,"gt","","",90,null],[11,"ge","","",90,null],[11,"partial_cmp","","",90,null],[11,"cmp","","",90,null],[11,"eq","","",89,null],[11,"eq","","",90,null],[11,"partial_cmp","","",89,null],[11,"partial_cmp","","",90,null],[11,"eq","","",89,null],[11,"partial_cmp","","",89,null],[11,"eq","collections::borrow","",91,null],[11,"eq","std::ffi::os_str","",90,null],[11,"partial_cmp","collections::borrow","",91,null],[11,"partial_cmp","std::ffi::os_str","",90,null],[11,"eq","collections::borrow","",91,null],[11,"partial_cmp","","",91,null],[11,"eq","","",91,null],[11,"eq","std::ffi::os_str","",89,null],[11,"partial_cmp","collections::borrow","",91,null],[11,"partial_cmp","std::ffi::os_str","",89,null],[11,"hash","","",90,null],[11,"fmt","","",90,null],[11,"borrow","","",89,null],[11,"to_owned","","",90,null],[11,"as_ref","","",90,null],[11,"as_ref","","",89,null],[11,"as_ref","collections::string","",92,null],[11,"clone","std::fs","",93,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"eq","","",95,null],[11,"ne","","",95,null],[11,"clone","","",95,null],[11,"hash","","",96,null],[11,"eq","","",96,null],[11,"ne","","",96,null],[11,"clone","","",96,null],[11,"open","","Attempts to open a file in read-only mode.",97,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",97,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",97,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",97,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",97,null],[11,"metadata","","Queries metadata about the underlying file.",97,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",97,null],[11,"fmt","","",97,null],[11,"read","","",97,null],[11,"read_to_end","","",97,null],[11,"write","","",97,null],[11,"flush","","",97,null],[11,"seek","","",97,null],[11,"new","","Creates a blank new set of options ready for configuration.",94,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",94,null],[11,"write","","Sets the option for write access.",94,null],[11,"append","","Sets the option for the append mode.",94,null],[11,"truncate","","Sets the option for truncating a previous file.",94,null],[11,"create","","Sets the option for creating a new file.",94,null],[11,"create_new","","Sets the option to always create a new file.",94,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",94,null],[11,"file_type","","Returns the file type for this metadata.",93,null],[11,"is_dir","","Returns whether this metadata is for a directory.",93,null],[11,"is_file","","Returns whether this metadata is for a regular file.",93,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",93,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",93,null],[11,"modified","","Returns the last modification time listed in this metadata.",93,null],[11,"accessed","","Returns the last access time of this metadata.",93,null],[11,"created","","Returns the creation time listed in the this metadata.",93,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",95,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",95,null],[11,"is_dir","","Test whether this file type represents a directory.",96,null],[11,"is_file","","Test whether this file type represents a regular file.",96,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",96,null],[11,"next","","",98,null],[11,"path","","Returns the full path to the file that this entry represents.",99,null],[11,"metadata","","Return the metadata for the file that this entry points at.",99,null],[11,"file_type","","Return the file type for the file that this entry points at.",99,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",99,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",100,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",100,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",100,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",101,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",101,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",101,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",101,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",101,null],[11,"read","","",101,null],[11,"fill_buf","","",101,null],[11,"consume","","",101,null],[11,"fmt","","",101,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",101,null],[11,"fmt","","",102,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",103,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",103,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",103,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",103,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",103,null],[11,"write","","",103,null],[11,"flush","","",103,null],[11,"fmt","","",103,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",103,null],[11,"drop","","",103,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",102,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",102,null],[11,"from","std::io::error","",88,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",102,null],[11,"fmt","","",102,null],[11,"new","","Creates a new `LineWriter`.",104,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",104,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",104,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",104,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",104,null],[11,"write","","",104,null],[11,"flush","","",104,null],[11,"fmt","","",104,null],[11,"fmt","std::io::cursor","",105,null],[11,"clone","","",105,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",105,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",105,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",105,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",105,null],[11,"position","","Returns the current position of this cursor.",105,null],[11,"set_position","","Sets the position of this cursor.",105,null],[11,"seek","","",105,null],[11,"read","","",105,null],[11,"fill_buf","","",105,null],[11,"consume","","",105,null],[11,"write","","",105,null],[11,"flush","","",105,null],[11,"write","","",105,null],[11,"flush","","",105,null],[11,"write","","",105,null],[11,"flush","","",105,null],[11,"fmt","std::io::error","",88,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"eq","","",106,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",88,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",88,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",88,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",88,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",88,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",88,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",88,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",88,null],[11,"fmt","","",88,null],[11,"description","","",88,null],[11,"cause","","",88,null],[11,"read","alloc::boxed","",20,null],[11,"read_to_end","","",20,null],[11,"read_to_string","","",20,null],[11,"read_exact","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,null],[11,"write_all","","",20,null],[11,"write_fmt","","",20,null],[11,"seek","","",20,null],[11,"fill_buf","","",20,null],[11,"consume","","",20,null],[11,"read_until","","",20,null],[11,"read_line","","",20,null],[11,"write","collections::vec","",64,null],[11,"write_all","","",64,null],[11,"flush","","",64,null],[11,"read","std::io::util","",107,null],[11,"fill_buf","","",107,null],[11,"consume","","",107,null],[11,"read","","",108,null],[11,"write","","",109,null],[11,"flush","","",109,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",110,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",110,null],[11,"read","","",110,null],[11,"read_to_end","","",110,null],[11,"read_to_string","","",110,null],[11,"read_exact","","",110,null],[11,"read","","",111,null],[11,"read_to_end","","",111,null],[11,"fill_buf","","",111,null],[11,"consume","","",111,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",112,null],[11,"write","","",112,null],[11,"flush","","",112,null],[11,"write_all","","",112,null],[11,"write_fmt","","",112,null],[11,"write","","",113,null],[11,"flush","","",113,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",114,null],[11,"write","","",114,null],[11,"flush","","",114,null],[11,"write_all","","",114,null],[11,"write_fmt","","",114,null],[11,"write","","",115,null],[11,"flush","","",115,null],[11,"fmt","std::io","",116,null],[11,"clone","","",116,null],[11,"eq","","",116,null],[11,"ne","","",116,null],[11,"read","","",117,null],[11,"fill_buf","","",117,null],[11,"consume","","",117,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",118,null],[11,"read","","",118,null],[11,"fill_buf","","",118,null],[11,"consume","","",118,null],[11,"next","","",119,null],[11,"fmt","","",120,null],[11,"next","","",121,null],[11,"description","","",120,null],[11,"cause","","",120,null],[11,"fmt","","",120,null],[11,"next","","",122,null],[11,"next","","",123,null],[11,"cmp","std::net::ip","",124,null],[11,"partial_cmp","","",124,null],[11,"lt","","",124,null],[11,"le","","",124,null],[11,"gt","","",124,null],[11,"ge","","",124,null],[11,"hash","","",124,null],[11,"fmt","","",124,null],[11,"eq","","",124,null],[11,"ne","","",124,null],[11,"clone","","",124,null],[11,"fmt","","",125,null],[11,"hash","","",125,null],[11,"clone","","",125,null],[11,"eq","","",125,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",126,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",126,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (0.0.0.0).",126,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",126,null],[11,"is_private","","Returns true if this is a private address.",126,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",126,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",126,null],[11,"is_multicast","","Returns true if this is a multicast address (224.0.0.0/4).",126,null],[11,"is_broadcast","","Returns true if this is a broadcast address (255.255.255.255).",126,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",126,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",126,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",126,null],[11,"fmt","","",124,null],[11,"fmt","","",126,null],[11,"fmt","","",126,null],[11,"clone","","",126,null],[11,"eq","","",126,null],[11,"hash","","",126,null],[11,"partial_cmp","","",126,null],[11,"cmp","","",126,null],[11,"from","","",126,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",126,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",127,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",127,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address (::).",127,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",127,null],[11,"is_global","","Returns true if the address appears to be globally routable.",127,null],[11,"is_unique_local","","Returns true if this is a unique local address (fc00::/7).",127,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",127,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address\n(fec0::/10).",127,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\n(2001:db8::/32).",127,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",127,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",127,null],[11,"is_multicast","","Returns true if this is a multicast address (ff00::/8).",127,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",127,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",127,null],[11,"fmt","","",127,null],[11,"fmt","","",127,null],[11,"clone","","",127,null],[11,"eq","","",127,null],[11,"hash","","",127,null],[11,"partial_cmp","","",127,null],[11,"cmp","","",127,null],[11,"from","","",127,null],[11,"fmt","std::net::addr","",128,null],[11,"hash","","",128,null],[11,"eq","","",128,null],[11,"ne","","",128,null],[11,"clone","","",128,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",128,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",128,null],[11,"set_ip","","Change the IP address associated with this socket address.",128,null],[11,"port","","Returns the port number associated with this socket address.",128,null],[11,"set_port","","Change the port number associated with this socket address.",128,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",129,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",129,null],[11,"set_ip","","Change the IP address associated with this socket address.",129,null],[11,"port","","Returns the port number associated with this socket address.",129,null],[11,"set_port","","Change the port number associated with this socket address.",129,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",130,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",130,null],[11,"set_ip","","Change the IP address associated with this socket address.",130,null],[11,"port","","Returns the port number associated with this socket address.",130,null],[11,"set_port","","Change the port number associated with this socket address.",130,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",130,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",130,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",130,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",130,null],[11,"fmt","","",128,null],[11,"fmt","","",129,null],[11,"fmt","","",129,null],[11,"fmt","","",130,null],[11,"fmt","","",130,null],[11,"clone","","",129,null],[11,"clone","","",130,null],[11,"eq","","",129,null],[11,"eq","","",130,null],[11,"hash","","",129,null],[11,"hash","","",130,null],[11,"to_socket_addrs","","",128,null],[11,"to_socket_addrs","","",129,null],[11,"to_socket_addrs","","",130,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",131,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",131,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",131,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",131,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",131,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",131,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",131,null],[11,"read_timeout","","Returns the read timeout of this socket.",131,null],[11,"write_timeout","","Returns the write timeout of this socket.",131,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",131,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",131,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",131,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",131,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",131,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",131,null],[11,"read","","",131,null],[11,"read_to_end","","",131,null],[11,"write","","",131,null],[11,"flush","","",131,null],[11,"fmt","","",131,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",132,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",132,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",132,null],[11,"accept","","Accept a new incoming connection from this listener.",132,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",132,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",132,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",132,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",132,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",132,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",132,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",132,null],[11,"next","","",133,null],[11,"fmt","","",132,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",134,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",134,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",134,null],[11,"local_addr","","Returns the socket address that this socket was created from.",134,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",134,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",134,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",134,null],[11,"read_timeout","","Returns the read timeout of this socket.",134,null],[11,"write_timeout","","Returns the write timeout of this socket.",134,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",134,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",134,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",134,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",134,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",134,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",134,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",134,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",134,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",134,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",134,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",134,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",134,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",134,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",134,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",134,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",134,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",134,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",134,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",134,null],[11,"fmt","","",134,null],[11,"from_str","std::net::ip","",124,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",126,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",127,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",129,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",130,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",128,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",135,null],[11,"ne","","",135,null],[11,"clone","","",135,null],[11,"fmt","","",135,null],[11,"fmt","","",135,null],[11,"description","","",135,null],[11,"fmt","std::net","",136,null],[11,"eq","","",136,null],[11,"clone","","",136,null],[11,"next","","",137,null],[11,"clone","std::os::linux::raw::arch","",138,null],[11,"as_raw_stat","std::fs","",93,null],[11,"st_dev","","",93,null],[11,"st_ino","","",93,null],[11,"st_mode","","",93,null],[11,"st_nlink","","",93,null],[11,"st_uid","","",93,null],[11,"st_gid","","",93,null],[11,"st_rdev","","",93,null],[11,"st_size","","",93,null],[11,"st_atime","","",93,null],[11,"st_atime_nsec","","",93,null],[11,"st_mtime","","",93,null],[11,"st_mtime_nsec","","",93,null],[11,"st_ctime","","",93,null],[11,"st_ctime_nsec","","",93,null],[11,"st_blksize","","",93,null],[11,"st_blocks","","",93,null],[11,"as_raw_fd","","",97,null],[11,"from_raw_fd","","",97,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",97,null],[11,"as_raw_fd","std::net::tcp","",131,null],[11,"as_raw_fd","","",132,null],[11,"as_raw_fd","std::net::udp","",134,null],[11,"from_raw_fd","std::net::tcp","",131,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",132,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",134,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",131,null],[11,"into_raw_fd","","",132,null],[11,"into_raw_fd","std::net::udp","",134,null],[11,"from_vec","std::ffi::os_str","",89,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",89,null],[11,"from_bytes","","",90,null],[11,"as_bytes","","",90,null],[11,"mode","std::fs","",95,null],[11,"set_mode","","",95,null],[11,"from_mode","","",95,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",94,null],[11,"custom_flags","","",94,null],[11,"dev","","",93,null],[11,"ino","","",93,null],[11,"mode","","",93,null],[11,"nlink","","",93,null],[11,"uid","","",93,null],[11,"gid","","",93,null],[11,"rdev","","",93,null],[11,"size","","",93,null],[11,"atime","","",93,null],[11,"atime_nsec","","",93,null],[11,"mtime","","",93,null],[11,"mtime_nsec","","",93,null],[11,"ctime","","",93,null],[11,"ctime_nsec","","",93,null],[11,"blksize","","",93,null],[11,"blocks","","",93,null],[11,"is_block_device","","",96,null],[11,"is_char_device","","",96,null],[11,"is_fifo","","",96,null],[11,"is_socket","","",96,null],[11,"ino","","",99,null],[11,"mode","","",100,null],[11,"uid","std::process","",139,null],[11,"gid","","",139,null],[11,"before_exec","","",139,null],[11,"exec","","",139,null],[11,"from_raw","","",140,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",140,null],[11,"from_raw_fd","","",141,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",142,null],[11,"as_raw_fd","","",143,null],[11,"as_raw_fd","","",144,null],[11,"into_raw_fd","","",142,null],[11,"into_raw_fd","","",143,null],[11,"into_raw_fd","","",144,null],[11,"as_pthread_t","std::thread","",39,null],[11,"into_pthread_t","","",39,null],[11,"clone","std::sys::ext::net","",145,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",145,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",145,null],[11,"fmt","","",145,null],[11,"fmt","","",146,null],[11,"connect","","Connects to the socket named by `path`.",146,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",146,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",146,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",146,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",146,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",146,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",146,null],[11,"read_timeout","","Returns the read timeout of this socket.",146,null],[11,"write_timeout","","Returns the write timeout of this socket.",146,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",146,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",146,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",146,null],[11,"read","","",146,null],[11,"read_to_end","","",146,null],[11,"write","","",146,null],[11,"flush","","",146,null],[11,"as_raw_fd","","",146,null],[11,"from_raw_fd","","",146,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",146,null],[11,"fmt","","",147,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",147,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",147,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",147,null],[11,"local_addr","","Returns the local socket address of this listener.",147,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",147,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",147,null],[11,"incoming","","Returns an iterator over incoming connections.",147,null],[11,"as_raw_fd","","",147,null],[11,"from_raw_fd","","",147,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",147,null],[11,"fmt","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"fmt","","",149,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",149,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",149,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",149,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",149,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",149,null],[11,"local_addr","","Returns the address of this socket.",149,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",149,null],[11,"recv_from","","Receives data from the socket.",149,null],[11,"recv","","Receives data from the socket.",149,null],[11,"send_to","","Sends data on the socket to the specified address.",149,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",149,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",149,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",149,null],[11,"read_timeout","","Returns the read timeout of this socket.",149,null],[11,"write_timeout","","Returns the write timeout of this socket.",149,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",149,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",149,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",149,null],[11,"as_raw_fd","","",149,null],[11,"from_raw_fd","","",149,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",149,null],[11,"deref","std::panic","",150,null],[11,"deref_mut","","",150,null],[11,"call_once","","",150,null],[11,"eq","std::path","",151,null],[11,"ne","","",151,null],[11,"cmp","","",151,null],[11,"partial_cmp","","",151,null],[11,"lt","","",151,null],[11,"le","","",151,null],[11,"gt","","",151,null],[11,"ge","","",151,null],[11,"hash","","",151,null],[11,"fmt","","",151,null],[11,"clone","","",151,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",151,null],[11,"fmt","","",152,null],[11,"clone","","",152,null],[11,"kind","","The parsed prefix data.",152,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",152,null],[11,"eq","","",152,null],[11,"partial_cmp","","",152,null],[11,"cmp","","",152,null],[11,"hash","","",152,null],[11,"fmt","","",153,null],[11,"hash","","",153,null],[11,"cmp","","",153,null],[11,"partial_cmp","","",153,null],[11,"lt","","",153,null],[11,"le","","",153,null],[11,"gt","","",153,null],[11,"ge","","",153,null],[11,"eq","","",153,null],[11,"ne","","",153,null],[11,"clone","","",153,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",153,null],[11,"as_ref","","",153,null],[11,"clone","","",154,null],[11,"clone","","",155,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",154,null],[11,"as_ref","","",154,null],[11,"as_ref","","",154,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",155,null],[11,"as_ref","","",155,null],[11,"as_ref","","",155,null],[11,"next","","",155,null],[11,"next_back","","",155,null],[11,"next","","",154,null],[11,"next_back","","",154,null],[11,"eq","","",154,null],[11,"partial_cmp","","",154,null],[11,"cmp","","",154,null],[11,"clone","","",156,null],[11,"new","","Allocates an empty `PathBuf`.",156,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",156,null],[11,"push","","Extends `self` with `path`.",156,null],[11,"pop","","Truncate `self` to `self.parent()`.",156,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",156,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",156,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",156,null],[11,"from","","",156,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",156,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",156,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",156,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",156,null],[11,"fmt","","",156,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",157,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",157,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",157,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",157,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",157,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",157,null],[11,"is_relative","","A path is *relative* if it is not absolute.",157,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",157,null],[11,"parent","","The path without its final component, if any.",157,null],[11,"file_name","","The final component of the path, if it is a normal file.",157,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",157,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",157,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",157,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",157,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",157,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",157,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",157,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",157,null],[11,"components","","Produce an iterator over the components of the path.",157,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",157,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",157,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",157,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",157,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",157,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",157,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",157,null],[11,"exists","","Returns whether the path points at an existing entity.",157,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",157,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",157,null],[11,"deref","","",156,null],[11,"borrow","","",156,null],[11,"from","collections::borrow","",91,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",91,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",157,null],[11,"eq","","",156,null],[11,"hash","","",156,null],[11,"partial_cmp","","",156,null],[11,"cmp","","",156,null],[11,"as_ref","","",156,null],[11,"into","","",156,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"clone","","",158,null],[11,"fmt","","",158,null],[11,"as_ref","","",157,null],[11,"fmt","","",157,null],[11,"fmt","","",159,null],[11,"fmt","","",159,null],[11,"eq","","",157,null],[11,"hash","","",157,null],[11,"partial_cmp","","",157,null],[11,"cmp","","",157,null],[11,"as_ref","","",157,null],[11,"as_ref","std::ffi::os_str","",90,null],[11,"as_ref","collections::borrow","",91,null],[11,"as_ref","std::ffi::os_str","",89,null],[11,"as_ref","collections::string","",92,null],[11,"as_ref","std::path","",156,null],[11,"eq","","",156,null],[11,"eq","","",157,null],[11,"partial_cmp","","",156,null],[11,"partial_cmp","","",157,null],[11,"eq","","",156,null],[11,"partial_cmp","","",156,null],[11,"eq","collections::borrow","",91,null],[11,"eq","std::path","",157,null],[11,"partial_cmp","collections::borrow","",91,null],[11,"partial_cmp","std::path","",157,null],[11,"eq","collections::borrow","",91,null],[11,"partial_cmp","","",91,null],[11,"eq","","",91,null],[11,"eq","std::path","",156,null],[11,"partial_cmp","collections::borrow","",91,null],[11,"partial_cmp","std::path","",156,null],[11,"eq","","",156,null],[11,"eq","std::ffi::os_str","",90,null],[11,"partial_cmp","std::path","",156,null],[11,"partial_cmp","std::ffi::os_str","",90,null],[11,"eq","std::path","",156,null],[11,"partial_cmp","","",156,null],[11,"eq","","",156,null],[11,"eq","collections::borrow","",91,null],[11,"partial_cmp","std::path","",156,null],[11,"partial_cmp","collections::borrow","",91,null],[11,"eq","std::path","",156,null],[11,"eq","std::ffi::os_str","",89,null],[11,"partial_cmp","std::path","",156,null],[11,"partial_cmp","std::ffi::os_str","",89,null],[11,"eq","std::path","",157,null],[11,"eq","std::ffi::os_str","",90,null],[11,"partial_cmp","std::path","",157,null],[11,"partial_cmp","std::ffi::os_str","",90,null],[11,"eq","std::path","",157,null],[11,"partial_cmp","","",157,null],[11,"eq","","",157,null],[11,"eq","collections::borrow","",91,null],[11,"partial_cmp","std::path","",157,null],[11,"partial_cmp","collections::borrow","",91,null],[11,"eq","std::path","",157,null],[11,"eq","std::ffi::os_str","",89,null],[11,"partial_cmp","std::path","",157,null],[11,"partial_cmp","std::ffi::os_str","",89,null],[11,"eq","","",90,null],[11,"partial_cmp","","",90,null],[11,"eq","collections::borrow","",91,null],[11,"partial_cmp","","",91,null],[11,"eq","std::ffi::os_str","",89,null],[11,"partial_cmp","","",89,null],[11,"eq","collections::borrow","",91,null],[11,"eq","std::ffi::os_str","",90,null],[11,"partial_cmp","collections::borrow","",91,null],[11,"partial_cmp","std::ffi::os_str","",90,null],[11,"eq","collections::borrow","",91,null],[11,"partial_cmp","","",91,null],[11,"eq","","",91,null],[11,"eq","std::ffi::os_str","",89,null],[11,"partial_cmp","collections::borrow","",91,null],[11,"partial_cmp","std::ffi::os_str","",89,null],[11,"fmt","std::path","",158,null],[11,"description","","",158,null],[11,"write","std::process","",142,null],[11,"flush","","",142,null],[11,"read","","",143,null],[11,"read_to_end","","",143,null],[11,"read","","",144,null],[11,"read_to_end","","",144,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",139,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",139,null],[11,"args","","Add multiple arguments to pass to the program.",139,null],[11,"env","","Inserts or updates an environment variable mapping.",139,null],[11,"env_remove","","Removes an environment variable mapping.",139,null],[11,"env_clear","","Clears the entire environment map for the child process.",139,null],[11,"current_dir","","Sets the working directory for the child process.",139,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",139,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",139,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",139,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",139,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",139,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",139,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",139,null],[11,"clone","","",160,null],[11,"eq","","",160,null],[11,"ne","","",160,null],[11,"fmt","","",160,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",141,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",141,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",141,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",140,null],[11,"clone","","",140,null],[11,"eq","","",140,null],[11,"ne","","",140,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",140,null],[11,"code","","Returns the exit code of the process, if any.",140,null],[11,"fmt","","",140,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",161,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",161,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",161,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",161,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",162,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",162,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",162,null],[11,"id","","Retrieves the id of this handle.",163,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",163,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",163,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",163,null],[11,"drop","","",162,null],[11,"drop","","",163,null],[11,"fmt","","",162,null],[11,"fmt","","",163,null],[11,"clone","std::sync::mpsc","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"fmt","","",165,null],[11,"clone","","",165,null],[11,"eq","","",165,null],[11,"fmt","","",166,null],[11,"clone","","",166,null],[11,"eq","","",166,null],[11,"clone","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",168,null],[11,"clone","","",168,null],[11,"drop","","",168,null],[11,"fmt","","",168,null],[11,"send","","Sends a value on this synchronous channel.",169,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",169,null],[11,"clone","","",169,null],[11,"drop","","",169,null],[11,"fmt","","",169,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",170,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",170,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",170,null],[11,"next","","",171,null],[11,"next","","",172,null],[11,"into_iter","","",170,null],[11,"drop","","",170,null],[11,"fmt","","",170,null],[11,"fmt","","",164,null],[11,"fmt","","",164,null],[11,"description","","",164,null],[11,"cause","","",164,null],[11,"fmt","","",167,null],[11,"fmt","","",167,null],[11,"description","","",167,null],[11,"cause","","",167,null],[11,"fmt","","",165,null],[11,"description","","",165,null],[11,"cause","","",165,null],[11,"fmt","","",166,null],[11,"description","","",166,null],[11,"cause","","",166,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",173,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",173,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",174,null],[11,"clone","std::sync::condvar","",175,null],[11,"eq","","",175,null],[11,"ne","","",175,null],[11,"fmt","","",175,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",175,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",176,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",176,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",176,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",176,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",176,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",176,null],[11,"default","","",176,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",176,null],[11,"new","","Creates a new condition variable",177,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",177,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",177,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",177,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",177,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",177,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",177,null],[11,"drop","std::sync::mutex","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",19,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",178,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",178,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",178,null],[11,"destroy","","Deallocates resources associated with this static mutex.",178,null],[11,"deref","","",179,null],[11,"deref_mut","","",179,null],[11,"drop","","",179,null],[11,"new","std::sync::once","Creates a new `Once` value.",180,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",180,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",180,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",181,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",182,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",182,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",182,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",182,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",182,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",182,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",182,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",182,null],[11,"drop","","",182,null],[11,"fmt","","",182,null],[11,"default","","",182,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",183,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",183,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",183,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",183,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",183,null],[11,"destroy","","Deallocates all resources associated with this static lock.",183,null],[11,"deref","","",184,null],[11,"deref","","",185,null],[11,"deref_mut","","",185,null],[11,"drop","","",184,null],[11,"drop","","",185,null],[11,"default","core::sync::atomic","",186,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",187,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",188,null],[11,"clone","","",188,null],[11,"new","","Creates a new `AtomicBool`.",186,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",186,null],[11,"store","","Stores a value into the bool.",186,null],[11,"swap","","Stores a value into the bool, returning the old value.",186,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",186,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",186,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",186,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",186,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",186,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",186,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",186,null],[11,"new","","Creates a new `AtomicPtr`.",187,null],[11,"load","","Loads a value from the pointer.",187,null],[11,"store","","Stores a value into the pointer.",187,null],[11,"swap","","Stores a value into the pointer, returning the old value.",187,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",187,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",187,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",187,null],[11,"default","","",189,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",189,null],[11,"new","","Creates a new atomic integer.",189,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",189,null],[11,"store","","Stores a value into the atomic integer.",189,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",189,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"fetch_add","","Add to the current value, returning the previous value.",189,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",189,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",189,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",189,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",189,null],[11,"default","","",190,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",190,null],[11,"new","","Creates a new atomic integer.",190,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",190,null],[11,"store","","Stores a value into the atomic integer.",190,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",190,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",190,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",190,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",190,null],[11,"fetch_add","","Add to the current value, returning the previous value.",190,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",190,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",190,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",190,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",190,null],[11,"default","","",191,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",191,null],[11,"new","","Creates a new atomic integer.",191,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",191,null],[11,"store","","Stores a value into the atomic integer.",191,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",191,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",191,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",191,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",191,null],[11,"fetch_add","","Add to the current value, returning the previous value.",191,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",191,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",191,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",191,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",191,null],[11,"default","","",192,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",192,null],[11,"new","","Creates a new atomic integer.",192,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",192,null],[11,"store","","Stores a value into the atomic integer.",192,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",192,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",192,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",192,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",192,null],[11,"fetch_add","","Add to the current value, returning the previous value.",192,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",192,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",192,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",192,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",192,null],[11,"default","","",193,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",193,null],[11,"new","","Creates a new atomic integer.",193,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",193,null],[11,"store","","Stores a value into the atomic integer.",193,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",193,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",193,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",193,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",193,null],[11,"fetch_add","","Add to the current value, returning the previous value.",193,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",193,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",193,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",193,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",193,null],[11,"default","","",194,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",194,null],[11,"new","","Creates a new atomic integer.",194,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",194,null],[11,"store","","Stores a value into the atomic integer.",194,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",194,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",194,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",194,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",194,null],[11,"fetch_add","","Add to the current value, returning the previous value.",194,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",194,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",194,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",194,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",194,null],[11,"default","","",195,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",195,null],[11,"new","","Creates a new atomic integer.",195,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",195,null],[11,"store","","Stores a value into the atomic integer.",195,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",195,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",195,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",195,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",195,null],[11,"fetch_add","","Add to the current value, returning the previous value.",195,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",195,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",195,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",195,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",195,null],[11,"default","","",196,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",196,null],[11,"new","","Creates a new atomic integer.",196,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",196,null],[11,"store","","Stores a value into the atomic integer.",196,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",196,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",196,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",196,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",196,null],[11,"fetch_add","","Add to the current value, returning the previous value.",196,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",196,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",196,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",196,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",196,null],[11,"default","","",197,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",197,null],[11,"new","","Creates a new atomic integer.",197,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",197,null],[11,"store","","Stores a value into the atomic integer.",197,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",197,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",197,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",197,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",197,null],[11,"fetch_add","","Add to the current value, returning the previous value.",197,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",197,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",197,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",197,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",197,null],[11,"default","","",198,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",198,null],[11,"new","","Creates a new atomic integer.",198,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",198,null],[11,"store","","Stores a value into the atomic integer.",198,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",198,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",198,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",198,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",198,null],[11,"fetch_add","","Add to the current value, returning the previous value.",198,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",198,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",198,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",198,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",198,null],[11,"fmt","","",186,null],[11,"fmt","","",187,null],[11,"hash","std::time::duration","",199,null],[11,"fmt","","",199,null],[11,"cmp","","",199,null],[11,"partial_cmp","","",199,null],[11,"lt","","",199,null],[11,"le","","",199,null],[11,"gt","","",199,null],[11,"ge","","",199,null],[11,"eq","","",199,null],[11,"ne","","",199,null],[11,"clone","","",199,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",199,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",199,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",199,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",199,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",199,null],[11,"add","","",199,null],[11,"add_assign","","",199,null],[11,"sub","","",199,null],[11,"sub_assign","","",199,null],[11,"mul","","",199,null],[11,"mul_assign","","",199,null],[11,"div","","",199,null],[11,"div_assign","","",199,null],[11,"cmp","std::time","",200,null],[11,"partial_cmp","","",200,null],[11,"lt","","",200,null],[11,"le","","",200,null],[11,"gt","","",200,null],[11,"ge","","",200,null],[11,"eq","","",200,null],[11,"ne","","",200,null],[11,"clone","","",200,null],[11,"cmp","","",201,null],[11,"partial_cmp","","",201,null],[11,"lt","","",201,null],[11,"le","","",201,null],[11,"gt","","",201,null],[11,"ge","","",201,null],[11,"eq","","",201,null],[11,"ne","","",201,null],[11,"clone","","",201,null],[11,"fmt","","",202,null],[11,"clone","","",202,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",200,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",200,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",200,null],[11,"add","","",200,null],[11,"add_assign","","",200,null],[11,"sub","","",200,null],[11,"sub_assign","","",200,null],[11,"sub","","",200,null],[11,"fmt","","",200,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",201,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",201,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",201,null],[11,"add","","",201,null],[11,"add_assign","","",201,null],[11,"sub","","",201,null],[11,"sub_assign","","",201,null],[11,"fmt","","",201,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",202,null],[11,"description","","",202,null],[11,"fmt","","",202,null],[11,"fmt","std::sys_common::poison","",203,null],[11,"fmt","","",203,null],[11,"description","","",203,null],[11,"new","","Creates a `PoisonError`.",203,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",203,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",203,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",203,null],[11,"from","","",204,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",204,null],[11,"fmt","","",204,null],[11,"description","","",204,null],[11,"cause","","",204,null],[11,"clone","libc::unix","",205,null],[11,"clone","","",206,null],[11,"clone","","",207,null],[11,"clone","","",208,null],[11,"clone","","",209,null],[11,"clone","","",210,null],[11,"clone","","",211,null],[11,"clone","","",212,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"clone","","",215,null],[11,"clone","","",216,null],[11,"clone","","",217,null],[11,"clone","libc::unix::notbsd","",218,null],[11,"clone","","",219,null],[11,"clone","","",220,null],[11,"clone","","",221,null],[11,"clone","","",222,null],[11,"clone","","",223,null],[11,"clone","","",224,null],[11,"clone","","",225,null],[11,"clone","","",226,null],[11,"clone","","",227,null],[11,"clone","","",228,null],[11,"clone","","",229,null],[11,"clone","","",230,null],[11,"clone","","",231,null],[11,"clone","","",232,null],[11,"clone","libc::unix::notbsd::linux","",233,null],[11,"clone","","",234,null],[11,"clone","","",235,null],[11,"clone","","",236,null],[11,"clone","","",237,null],[11,"clone","","",238,null],[11,"clone","","",239,null],[11,"clone","","",240,null],[11,"clone","","",241,null],[11,"clone","","",242,null],[11,"clone","","",243,null],[11,"clone","","",244,null],[11,"clone","","",245,null],[11,"clone","","",246,null],[11,"clone","","",247,null],[11,"clone","","",248,null],[11,"clone","libc::unix::notbsd::linux::other","",249,null],[11,"clone","","",250,null],[11,"clone","","",251,null],[11,"clone","","",252,null],[11,"clone","","",253,null],[11,"clone","","",254,null],[11,"clone","","",255,null],[11,"clone","","",256,null],[11,"clone","","",257,null],[11,"clone","","",258,null],[11,"clone","","",259,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",260,null],[11,"clone","","",261,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",262,null],[11,"clone","","",263,null],[11,"clone","","",264,null],[11,"clone","","",265,null],[11,"clone","","",266,null],[11,"clone","","",267,null],[11,"clone","","",268,null],[11,"clone","","",269,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",270,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",270,null],[11,"file","","Returns the name of the source file from which the panic originated.",271,null],[11,"line","","Returns the line number from which the panic originated.",271,null],[11,"hash","core::ops","",272,null],[11,"eq","","",272,null],[11,"clone","","",272,null],[11,"fmt","","",272,null],[11,"hash","","",273,null],[11,"eq","","",273,null],[11,"ne","","",273,null],[11,"clone","","",273,null],[11,"fmt","","",273,null],[11,"contains","","# Examples",273,null],[11,"hash","","",274,null],[11,"eq","","",274,null],[11,"ne","","",274,null],[11,"clone","","",274,null],[11,"fmt","","",274,null],[11,"contains","","# Examples",274,null],[11,"hash","","",275,null],[11,"eq","","",275,null],[11,"ne","","",275,null],[11,"clone","","",275,null],[11,"fmt","","",275,null],[11,"contains","","# Examples",275,null],[11,"hash","","",276,null],[11,"eq","","",276,null],[11,"ne","","",276,null],[11,"clone","","",276,null],[11,"fmt","","",276,null],[11,"from","","",276,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",276,null],[11,"hash","","",277,null],[11,"eq","","",277,null],[11,"ne","","",277,null],[11,"clone","","",277,null],[11,"fmt","","",277,null],[11,"contains","","# Examples",277,null],[11,"hash","core::option","",278,null],[11,"fmt","","",278,null],[11,"cmp","","",278,null],[11,"partial_cmp","","",278,null],[11,"lt","","",278,null],[11,"le","","",278,null],[11,"gt","","",278,null],[11,"ge","","",278,null],[11,"eq","","",278,null],[11,"ne","","",278,null],[11,"clone","","",278,null],[11,"is_some","","Returns `true` if the option is a `Some` value",278,null],[11,"is_none","","Returns `true` if the option is a `None` value",278,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",278,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",278,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",278,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",278,null],[11,"unwrap_or","","Returns the contained value or a default.",278,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",278,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",278,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",278,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",278,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",278,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",278,null],[11,"iter","","Returns an iterator over the possibly contained value.",278,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",278,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",278,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",278,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",278,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",278,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",278,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",278,null],[11,"unwrap_or_default","","Returns the contained value or a default",278,null],[11,"default","","",278,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",278,null],[11,"fmt","","",279,null],[11,"next","","",279,null],[11,"size_hint","","",279,null],[11,"next_back","","",279,null],[11,"clone","","",279,null],[11,"fmt","","",280,null],[11,"next","","",280,null],[11,"size_hint","","",280,null],[11,"next_back","","",280,null],[11,"fmt","","",281,null],[11,"clone","","",281,null],[11,"next","","",281,null],[11,"size_hint","","",281,null],[11,"next_back","","",281,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",278,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"new","core::ptr","Creates a new `Unique`.",282,null],[11,"get","","Dereferences the content.",282,null],[11,"get_mut","","Mutably dereferences the content.",282,null],[11,"deref","","",282,null],[11,"fmt","","",282,null],[11,"new","","Creates a new `Shared`.",283,null],[11,"clone","","",283,null],[11,"deref","","",283,null],[11,"fmt","","",283,null],[11,"hash","core::marker","",284,null],[11,"eq","","",284,null],[11,"partial_cmp","","",284,null],[11,"cmp","","",284,null],[11,"clone","","",284,null],[11,"default","","",284,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::result","",285,null],[11,"fmt","","",285,null],[11,"cmp","","",285,null],[11,"partial_cmp","","",285,null],[11,"lt","","",285,null],[11,"le","","",285,null],[11,"gt","","",285,null],[11,"ge","","",285,null],[11,"eq","","",285,null],[11,"ne","","",285,null],[11,"clone","","",285,null],[11,"is_ok","","Returns true if the result is `Ok`",285,null],[11,"is_err","","Returns true if the result is `Err`",285,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",285,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",285,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",285,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",285,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",285,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",285,null],[11,"iter","","Returns an iterator over the possibly contained value.",285,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",285,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",285,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",285,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",285,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",285,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",285,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",285,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",285,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",285,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",285,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",285,null],[11,"fmt","","",286,null],[11,"next","","",286,null],[11,"size_hint","","",286,null],[11,"next_back","","",286,null],[11,"clone","","",286,null],[11,"fmt","","",287,null],[11,"next","","",287,null],[11,"size_hint","","",287,null],[11,"next_back","","",287,null],[11,"fmt","","",288,null],[11,"next","","",288,null],[11,"size_hint","","",288,null],[11,"next_back","","",288,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",285,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"clone","alloc::boxed","",289,null],[11,"pointer","","",290,null],[11,"make_place","","",290,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",290,null],[11,"finalize","","",20,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",289,null],[11,"drop","","",290,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",20,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",20,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",20,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",20,null],[11,"clone","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"partial_cmp","","",20,null],[11,"lt","","",20,null],[11,"le","","",20,null],[11,"ge","","",20,null],[11,"gt","","",20,null],[11,"cmp","","",20,null],[11,"hash","","",20,null],[11,"from","","",20,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",20,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",20,null],[11,"fmt","","",20,null],[11,"fmt","","",20,null],[11,"fmt","","",20,null],[11,"deref","","",20,null],[11,"deref_mut","","",20,null],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"next_back","","",20,null],[11,"call_once","","",20,null],[11,"call_once","","",20,null],[11,"clone","","",20,null],[11,"borrow","","",20,null],[11,"borrow_mut","","",20,null],[11,"as_ref","","",20,null],[11,"as_mut","","",20,null],[11,"fmt","","",291,null],[11,"fmt","","",291,null],[11,"is","","Returns true if the boxed type is the same as `T`",291,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",291,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",291,null],[11,"is","","Forwards to the method defined on the type `Any`.",291,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",291,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",291,null],[11,"hash","core::any","",292,null],[11,"fmt","","",292,null],[11,"eq","","",292,null],[11,"ne","","",292,null],[11,"clone","","",292,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",292,{"inputs":[],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",293,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",293,null],[11,"set","","Sets the contained value.",293,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",293,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",293,null],[11,"clone","","",293,null],[11,"default","","",293,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",293,null],[11,"partial_cmp","","",293,null],[11,"lt","","",293,null],[11,"le","","",293,null],[11,"gt","","",293,null],[11,"ge","","",293,null],[11,"cmp","","",293,null],[11,"fmt","","",294,null],[11,"eq","","",294,null],[11,"clone","","",294,null],[11,"new","","Creates a new `RefCell` containing `value`.",295,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",295,null],[11,"borrow_state","","Query the current state of this `RefCell`",295,null],[11,"borrow","","Immutably borrows the wrapped value.",295,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",295,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",295,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",295,null],[11,"clone","","",295,null],[11,"default","","",295,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",295,null],[11,"partial_cmp","","",295,null],[11,"lt","","",295,null],[11,"le","","",295,null],[11,"gt","","",295,null],[11,"ge","","",295,null],[11,"cmp","","",295,null],[11,"deref","","",296,null],[11,"clone","","Copies a `Ref`.",296,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",296,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",297,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",297,null],[11,"deref_mut","","",297,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",298,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",298,null],[11,"get","","Gets a mutable pointer to the wrapped value.",298,null],[11,"default","","",298,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"clone","collections::str","",299,null],[11,"next","","",299,null],[11,"size_hint","","",299,null],[11,"borrow","collections::string","",92,null],[11,"fmt","core::str::pattern","",300,null],[11,"eq","","",300,null],[11,"ne","","",300,null],[11,"clone","","",300,null],[11,"fmt","","",301,null],[11,"clone","","",301,null],[11,"haystack","","",301,null],[11,"next","","",301,null],[11,"next_match","","",301,null],[11,"next_reject","","",301,null],[11,"next_back","","",301,null],[11,"next_match_back","","",301,null],[11,"next_reject_back","","",301,null],[11,"fmt","","",302,null],[11,"clone","","",302,null],[11,"haystack","","",302,null],[11,"next","","",302,null],[11,"next_match","","",302,null],[11,"next_reject","","",302,null],[11,"next_back","","",302,null],[11,"next_match_back","","",302,null],[11,"next_reject_back","","",302,null],[11,"clone","","",303,null],[11,"fmt","","",303,null],[11,"haystack","","",303,null],[11,"next","","",303,null],[11,"next_match","","",303,null],[11,"next_reject","","",303,null],[11,"next_back","","",303,null],[11,"next_match_back","","",303,null],[11,"next_reject_back","","",303,null],[11,"fmt","","",304,null],[11,"clone","","",304,null],[11,"haystack","","",304,null],[11,"next","","",304,null],[11,"next_match","","",304,null],[11,"next_back","","",304,null],[11,"next_match_back","","",304,null],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",305,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",305,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",305,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Creates a new `Weak&lt;T&gt;` reference from this value.",305,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",305,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",305,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",305,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",305,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",305,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",305,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",305,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",305,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",305,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",305,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",305,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",305,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",305,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",305,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",305,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",305,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",305,null],[11,"hash","","",305,null],[11,"fmt","","",305,null],[11,"fmt","","",305,null],[11,"fmt","","",305,null],[11,"from","","",305,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",306,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",306,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",306,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",306,null],[11,"fmt","","",306,null],[11,"default","","",306,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",305,null],[11,"as_ref","","",305,null],[11,"next","rustc_unicode::char","",307,null],[11,"next","","",308,null],[11,"clone","","",309,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"clone","","",29,null],[11,"fmt","","",29,null],[11,"next","","",309,null],[11,"size_hint","","",309,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",29,null],[11,"fmt","","",29,null],[11,"cmp","collections::string","",92,null],[11,"partial_cmp","","",92,null],[11,"lt","","",92,null],[11,"le","","",92,null],[11,"gt","","",92,null],[11,"ge","","",92,null],[11,"fmt","","",26,null],[11,"fmt","","",27,null],[11,"new","","Creates a new empty `String`.",92,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",92,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",92,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",92,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",92,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",92,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",92,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",92,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",92,null],[11,"as_str","","Extracts a string slice containing the entire string.",92,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",92,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",92,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",92,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",92,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",92,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",92,null],[11,"push","","Appends the given `char` to the end of this `String`.",92,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",92,null],[11,"truncate","","Shortens this `String` to the specified length.",92,null],[11,"pop","","Removes the last character from the string buffer and returns it.",92,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",92,null],[11,"insert","","Inserts a character into this `String` at a byte position.",92,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",92,null],[11,"len","","Returns the length of this `String`, in bytes.",92,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",92,null],[11,"clear","","Truncates this `String`, removing all contents.",92,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",92,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",92,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",26,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",26,null],[11,"fmt","","",26,null],[11,"fmt","","",27,null],[11,"clone","","",92,null],[11,"clone_from","","",92,null],[11,"from_iter","","",92,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",92,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",92,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",92,null],[11,"extend","","",92,null],[11,"extend","","",92,null],[11,"extend","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"eq","collections::borrow","",91,null],[11,"ne","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"eq","collections::string","",92,null],[11,"ne","","",92,null],[11,"default","","",92,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",92,null],[11,"fmt","","",92,null],[11,"hash","","",92,null],[11,"add","","",92,null],[11,"index","","",92,null],[11,"index","","",92,null],[11,"index","","",92,null],[11,"index","","",92,null],[11,"index","","",92,null],[11,"index","","",92,null],[11,"index_mut","","",92,null],[11,"index_mut","","",92,null],[11,"index_mut","","",92,null],[11,"index_mut","","",92,null],[11,"index_mut","","",92,null],[11,"index_mut","","",92,null],[11,"deref","","",92,null],[11,"deref_mut","","",92,null],[11,"from_str","","",92,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"eq","","",28,null],[11,"as_ref","","",92,null],[11,"as_ref","","",92,null],[11,"from","","",92,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",91,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",91,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",92,null],[11,"write_str","","",92,null],[11,"write_char","","",92,null],[11,"drop","","",310,null],[11,"next","","",310,null],[11,"size_hint","","",310,null],[11,"next_back","","",310,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",64,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",64,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",64,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",64,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",64,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",64,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",64,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",64,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",64,null],[11,"as_slice","","Extracts a slice containing the entire vector.",64,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",64,null],[11,"set_len","","Sets the length of a vector.",64,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",64,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",64,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",64,null],[11,"retain","","Retains only the elements specified by the predicate.",64,null],[11,"push","","Appends an element to the back of a collection.",64,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",64,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",64,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",64,null],[11,"clear","","Clears the vector, removing all values.",64,null],[11,"len","","Returns the number of elements in the vector.",64,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",64,null],[11,"split_off","","Splits the collection into two at the given index.",64,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",64,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",64,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",64,null],[11,"clone","","",64,null],[11,"clone_from","","",64,null],[11,"hash","","",64,null],[11,"index","","",64,null],[11,"index_mut","","",64,null],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"index_mut","","",64,null],[11,"deref","","",64,null],[11,"deref_mut","","",64,null],[11,"from_iter","","",64,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",64,null],[11,"extend","","",64,null],[11,"extend","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","collections::borrow","",91,null],[11,"ne","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"eq","collections::vec","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"partial_cmp","","",64,null],[11,"cmp","","",64,null],[11,"drop","","",64,null],[11,"default","","",64,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",64,null],[11,"as_ref","","",64,null],[11,"as_mut","","",64,null],[11,"as_ref","","",64,null],[11,"as_mut","","",64,null],[11,"from","","",64,null],[11,"from","","",64,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",91,null],[11,"from","","",91,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",91,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",311,null],[11,"size_hint","","",311,null],[11,"count","","",311,null],[11,"next_back","","",311,null],[11,"clone","","",311,null],[11,"drop","","",311,null],[11,"next","","",312,null],[11,"size_hint","","",312,null],[11,"next_back","","",312,null],[11,"drop","","",312,null],[11,"hash","core::cmp","",313,null],[11,"fmt","","",313,null],[11,"eq","","",313,null],[11,"clone","","",313,null],[11,"reverse","","Reverse the `Ordering`.",313,null],[11,"cmp","","",313,null],[11,"partial_cmp","","",313,null],[11,"fmt","core::hash::sip","",314,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",314,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",314,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",314,null],[11,"finish","","",314,null],[11,"clone","","",314,null],[11,"default","","",314,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",315,null],[11,"build_hasher","","",315,null],[11,"clone","","",315,null],[11,"default","","",315,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::raw","",316,null],[11,"borrow","collections::vec","",64,null],[11,"borrow_mut","","",64,null],[11,"fmt","core::iter::range","",317,null],[11,"clone","","",317,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",274,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",273,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",276,null],[11,"next","core::iter::range","",317,null],[11,"size_hint","","",317,null],[11,"next","","",317,null],[11,"size_hint","","",317,null],[11,"next","","",317,null],[11,"size_hint","","",317,null],[11,"next","core::ops","",273,null],[11,"size_hint","","",273,null],[11,"next_back","","",273,null],[11,"next","","",274,null],[11,"next","","",276,null],[11,"size_hint","","",276,null],[11,"next_back","","",276,null],[11,"fmt","core::iter::sources","",318,null],[11,"clone","","",318,null],[11,"next","","",318,null],[11,"size_hint","","",318,null],[11,"next_back","","",318,null],[11,"fmt","","",319,null],[11,"next","","",319,null],[11,"size_hint","","",319,null],[11,"next_back","","",319,null],[11,"len","","",319,null],[11,"clone","","",319,null],[11,"default","","",319,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",320,null],[11,"clone","","",320,null],[11,"next","","",320,null],[11,"size_hint","","",320,null],[11,"next_back","","",320,null],[11,"len","","",320,null],[11,"fmt","core::iter","",321,null],[11,"clone","","",321,null],[11,"next","","",321,null],[11,"size_hint","","",321,null],[11,"next_back","","",321,null],[11,"fmt","","",322,null],[11,"clone","","",322,null],[11,"next","","",322,null],[11,"size_hint","","",322,null],[11,"next_back","","",322,null],[11,"fmt","","",323,null],[11,"clone","","",323,null],[11,"next","","",323,null],[11,"size_hint","","",323,null],[11,"fmt","","",324,null],[11,"clone","","",324,null],[11,"next","","",324,null],[11,"count","","",324,null],[11,"nth","","",324,null],[11,"find","","",324,null],[11,"last","","",324,null],[11,"size_hint","","",324,null],[11,"next_back","","",324,null],[11,"fmt","","",325,null],[11,"clone","","",325,null],[11,"next","","",325,null],[11,"size_hint","","",325,null],[11,"next_back","","",325,null],[11,"clone","","",326,null],[11,"fmt","","",326,null],[11,"next","","",326,null],[11,"size_hint","","",326,null],[11,"next_back","","",326,null],[11,"clone","","",327,null],[11,"fmt","","",327,null],[11,"next","","",327,null],[11,"size_hint","","",327,null],[11,"next_back","","",327,null],[11,"clone","","",328,null],[11,"fmt","","",328,null],[11,"next","","",328,null],[11,"size_hint","","",328,null],[11,"next_back","","",328,null],[11,"fmt","","",329,null],[11,"clone","","",329,null],[11,"next","","# Overflow Behavior",329,null],[11,"size_hint","","",329,null],[11,"nth","","",329,null],[11,"count","","",329,null],[11,"next_back","","",329,null],[11,"fmt","","",330,null],[11,"clone","","",330,null],[11,"next","","",330,null],[11,"count","","",330,null],[11,"nth","","",330,null],[11,"last","","",330,null],[11,"size_hint","","",330,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",330,null],[11,"is_empty","","Checks if the iterator has finished iterating.",330,null],[11,"clone","","",331,null],[11,"fmt","","",331,null],[11,"next","","",331,null],[11,"size_hint","","",331,null],[11,"clone","","",332,null],[11,"fmt","","",332,null],[11,"next","","",332,null],[11,"size_hint","","",332,null],[11,"fmt","","",333,null],[11,"clone","","",333,null],[11,"next","","",333,null],[11,"nth","","",333,null],[11,"count","","",333,null],[11,"last","","",333,null],[11,"size_hint","","",333,null],[11,"next_back","","",333,null],[11,"fmt","","",334,null],[11,"clone","","",334,null],[11,"next","","",334,null],[11,"nth","","",334,null],[11,"size_hint","","",334,null],[11,"clone","","",335,null],[11,"fmt","","",335,null],[11,"next","","",335,null],[11,"size_hint","","",335,null],[11,"clone","","",336,null],[11,"fmt","","",336,null],[11,"next","","",336,null],[11,"size_hint","","",336,null],[11,"next_back","","",336,null],[11,"fmt","","",337,null],[11,"clone","","",337,null],[11,"next","","",337,null],[11,"nth","","",337,null],[11,"last","","",337,null],[11,"count","","",337,null],[11,"size_hint","","",337,null],[11,"next_back","","",337,null],[11,"clone","","",338,null],[11,"fmt","","",338,null],[11,"next","","",338,null],[11,"size_hint","","",338,null],[11,"next_back","","",338,null],[11,"borrow","collections::borrow","",91,null],[11,"clone","","",91,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",91,null],[11,"into_owned","","Extracts the owned data.",91,null],[11,"deref","","",91,null],[11,"cmp","","",91,null],[11,"eq","","",91,null],[11,"partial_cmp","","",91,null],[11,"fmt","","",91,null],[11,"fmt","","",91,null],[11,"hash","","",91,null],[11,"as_ref","","",91,null],[11,"new","onig","Simple regular expression constructor. Compiles a new regular\nexpression with the default options using the ruby syntax.\nOnce compiled, it can be used repeatedly to search in a string. If an\ninvalid expression is given, then an error is returned.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_options","","Create a new Regex",0,{"inputs":[{"name":"str"},{"name":"regexoptions"},{"name":"syntax"}],"output":{"name":"result"}}],[11,"match_with_options","","Match string",0,null],[11,"search_with_options","","Search pattern in string",0,null],[11,"is_match","","Returns true if and only if the regex matches the string given.",0,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",0,null],[11,"captures_len","","",0,null],[11,"capture_histories_len","","",0,null],[11,"drop","","",0,null]],"paths":[[3,"Regex"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"FindMatches"],[3,"FindCaptures"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"RegexOptions"],[3,"SearchOptions"],[3,"SyntaxOperator"],[3,"SyntaxBehavior"],[3,"Region"],[3,"CaptureNames"],[3,"Syntax"],[3,"CaptureTreeNode"],[3,"CaptureTreeNodeIter"],[8,"Replacer"],[3,"Error"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[3,"Error"],[8,"Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"Rc"],[3,"Weak"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"TraitObject"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"]]};
searchIndex["onig_sys"] = {"doc":"","items":[[3,"OnigRegion","onig_sys","",null,null],[12,"allocated","","",0,null],[12,"num_regs","","",0,null],[12,"beg","","",0,null],[12,"end","","",0,null],[12,"history_root","","",0,null],[3,"OnigCaptureTreeNode","","",null,null],[12,"group","","",1,null],[12,"beg","","",1,null],[12,"end","","",1,null],[12,"allocated","","",1,null],[12,"num_childs","","",1,null],[12,"childs","","",1,null],[3,"OnigSyntaxType","","",null,null],[12,"op","","",2,null],[12,"op2","","",2,null],[12,"behavior","","",2,null],[12,"options","","",2,null],[12,"meta_char_table","","",2,null],[3,"OnigCompileInfo","","",null,null],[12,"num_of_elements","","",3,null],[12,"pattern_enc","","",3,null],[12,"target_enc","","",3,null],[12,"syntax","","",3,null],[12,"option","","",3,null],[12,"case_fold_flag","","",3,null],[3,"OnigMetaCharTableType","","",null,null],[12,"esc","","",4,null],[12,"anychar","","",4,null],[12,"anytime","","",4,null],[12,"zero_or_one_time","","",4,null],[12,"one_or_more_time","","",4,null],[12,"anychar_anytime","","",4,null],[3,"OnigCaseFoldCodeItem","","",null,null],[12,"byte_len","","",5,null],[12,"code_len","","",5,null],[12,"code","","",5,null],[3,"OnigEncodingType","","",null,null],[12,"mbc_enc_len","","",6,null],[12,"name","","",6,null],[12,"max_enc_len","","",6,null],[12,"min_enc_len","","",6,null],[12,"is_mbc_newline","","",6,null],[12,"mbc_to_code","","",6,null],[12,"code_to_mbclen","","",6,null],[12,"code_to_mbc","","",6,null],[12,"mbc_case_fold","","",6,null],[12,"apply_all_case_fold","","",6,null],[12,"get_case_fold_codes_by_str","","",6,null],[12,"property_name_to_ctype","","",6,null],[12,"is_code_ctype","","",6,null],[12,"get_ctype_code_range","","",6,null],[12,"left_adjust_char_head","","",6,null],[12,"is_allowed_reverse_match","","",6,null],[12,"init","","",6,null],[12,"is_initialised","","",6,null],[3,"OnigErrorInfo","","",null,null],[12,"enc","","",7,null],[12,"par","","",7,null],[12,"par_end","","",7,null],[3,"OnigRepeatRange","","",null,null],[12,"lower","","",8,null],[12,"upper","","",8,null],[3,"OnigRegexType","","",null,null],[12,"p","","",9,null],[12,"used","","",9,null],[12,"alloc","","",9,null],[12,"num_mem","","",9,null],[12,"num_repeat","","",9,null],[12,"num_null_check","","",9,null],[12,"num_comb_exp_check","","",9,null],[12,"num_call","","",9,null],[12,"capture_history","","",9,null],[12,"bt_mem_start","","",9,null],[12,"bt_mem_end","","",9,null],[12,"stack_pop_level","","",9,null],[12,"repeat_range_alloc","","",9,null],[12,"repeat_range","","",9,null],[12,"enc","","",9,null],[12,"options","","",9,null],[12,"syntax","","",9,null],[12,"case_fold_flag","","",9,null],[12,"name_table","","",9,null],[12,"optimize","","",9,null],[12,"threshold_len","","",9,null],[12,"anchor","","",9,null],[12,"anchor_dmin","","",9,null],[12,"anchor_dmax","","",9,null],[12,"sub_anchor","","",9,null],[12,"exact","","",9,null],[12,"exact_end","","",9,null],[12,"map","","",9,null],[12,"int_map","","",9,null],[12,"int_map_backward","","",9,null],[12,"dmin","","",9,null],[12,"dmax","","",9,null],[12,"chain","","",9,null],[5,"onigenc_init","","Onigenc Init",null,null],[5,"onig_initialize_encoding","","Onig Initialise Encoding",null,null],[5,"onigenc_step_back","","Onigenc Step Back",null,null],[5,"onigenc_set_default_encoding","","Onigenc Set Default Encoding",null,null],[5,"onigenc_get_default_encoding","","Onigenc Get Default Encoding",null,null],[5,"onigenc_set_default_caseconv_table","","Onigenc Set Default Case Conversion Table",null,null],[5,"onigenc_get_right_adjust_char_head_with_prev","","Onigenc Get Right Adjust Char Head With Prev",null,null],[5,"onigenc_get_prev_char_head","","Return previous character head address.",null,null],[5,"onigenc_get_left_adjust_char_head","","Return left-adjusted head address of a character.",null,null],[5,"onigenc_get_right_adjust_char_head","","Return right-adjusted head address of a character.",null,null],[5,"onigenc_strlen","","Return number of characters in the string.",null,null],[5,"onigenc_strlen_null","","Return number of characters in the string.",null,null],[5,"onigenc_str_bytelen_null","","Return number of bytes in the string.",null,null],[7,"OnigEncodingASCII","","",null,null],[7,"OnigEncodingISO_8859_1","","",null,null],[7,"OnigEncodingISO_8859_2","","",null,null],[7,"OnigEncodingISO_8859_3","","",null,null],[7,"OnigEncodingISO_8859_4","","",null,null],[7,"OnigEncodingISO_8859_5","","",null,null],[7,"OnigEncodingISO_8859_6","","",null,null],[7,"OnigEncodingISO_8859_7","","",null,null],[7,"OnigEncodingISO_8859_8","","",null,null],[7,"OnigEncodingISO_8859_9","","",null,null],[7,"OnigEncodingISO_8859_10","","",null,null],[7,"OnigEncodingISO_8859_11","","",null,null],[7,"OnigEncodingISO_8859_13","","",null,null],[7,"OnigEncodingISO_8859_14","","",null,null],[7,"OnigEncodingISO_8859_15","","",null,null],[7,"OnigEncodingISO_8859_16","","",null,null],[7,"OnigEncodingUTF8","","",null,null],[7,"OnigEncodingUTF16_BE","","",null,null],[7,"OnigEncodingUTF16_LE","","",null,null],[7,"OnigEncodingUTF32_BE","","",null,null],[7,"OnigEncodingUTF32_LE","","",null,null],[7,"OnigEncodingEUC_JP","","",null,null],[7,"OnigEncodingEUC_TW","","",null,null],[7,"OnigEncodingEUC_KR","","",null,null],[7,"OnigEncodingEUC_CN","","",null,null],[7,"OnigEncodingSJIS","","",null,null],[7,"OnigEncodingKOI8","","",null,null],[7,"OnigEncodingKOI8_R","","",null,null],[7,"OnigEncodingCP1251","","",null,null],[7,"OnigEncodingBIG5","","",null,null],[7,"OnigEncodingGB18030","","",null,null],[7,"OnigSyntaxASIS","","",null,null],[7,"OnigSyntaxPosixBasic","","",null,null],[7,"OnigSyntaxPosixExtended","","",null,null],[7,"OnigSyntaxEmacs","","",null,null],[7,"OnigSyntaxGrep","","",null,null],[7,"OnigSyntaxGnuRegex","","",null,null],[7,"OnigSyntaxJava","","",null,null],[7,"OnigSyntaxPerl","","",null,null],[7,"OnigSyntaxPerl_NG","","",null,null],[7,"OnigSyntaxRuby","","",null,null],[7,"OnigDefaultSyntax","","",null,null],[5,"onig_initialize","","Initialise Library",null,null],[5,"onig_init","","Initialize library.",null,null],[5,"onig_error_code_to_str","","Get error message string.\n  If this function is used for onig_new(),\n  don&#39;t call this after the pattern argument of onig_new() is freed.",null,null],[5,"onig_set_warn_func","","Set warning function.",null,null],[5,"onig_set_verb_warn_func","","Set verbose warning function.",null,null],[5,"onig_new","","Create a regex object.",null,null],[5,"onig_reg_init","","Onig Reg Init",null,null],[5,"onig_new_without_alloc","","Create a regex object.\n reg object area is not allocated in this function.",null,null],[5,"onig_new_deluxe","","Create a regex object.\n This function is deluxe version of onig_new().",null,null],[5,"onig_free","","Free memory used by regex object.",null,null],[5,"onig_free_body","","Free memory used by regex object. (Except reg oneself.)",null,null],[5,"onig_search","","Search string and return search result and matching region.",null,null],[5,"onig_match","","Match string and return result and matching region.",null,null],[5,"onig_region_new","","Create a region.",null,null],[5,"onig_region_free","","Free memory used by region.",null,null],[5,"onig_region_copy","","Copy contents of region.",null,null],[5,"onig_region_clear","","Clear contents of region.",null,null],[5,"onig_region_resize","","Resize group range area of region.",null,null],[5,"onig_name_to_group_numbers","","Return the group number list of the name.\n Named subexp is defined by (?&lt;name&gt;....).",null,null],[5,"onig_name_to_backref_number","","Return the group number corresponding to the named backref (\\k&lt;name&gt;).\n If two or more regions for the groups of the name are effective,\n the greatest number in it is obtained.",null,null],[5,"onig_foreach_name","","Iterate function call for all names.",null,null],[5,"onig_number_of_names","","Return the number of names defined in the pattern.\n  Multiple definitions of one name is counted as one.",null,null],[5,"onig_get_encoding","","`OnigEncoding     onig_get_encoding(regex_t* reg)`",null,null],[5,"onig_get_options","","`OnigOptionType   onig_get_options(regex_t* reg)`",null,null],[5,"onig_get_case_fold_flag","","`OnigCaseFoldType onig_get_case_fold_flag(regex_t* reg)`",null,null],[5,"onig_get_syntax","","`OnigSyntaxType*  onig_get_syntax(regex_t* reg)`",null,null],[5,"onig_number_of_captures","","Return the number of capture group in the pattern.",null,null],[5,"onig_number_of_capture_histories","","Return the number of capture history defined in the pattern.",null,null],[5,"onig_get_capture_tree","","Return the root node of capture history data tree.",null,null],[5,"onig_capture_tree_traverse","","Traverse and callback in capture history data tree.",null,null],[5,"onig_noname_group_capture_is_active","","Return noname group capture activity.",null,null],[5,"onig_set_default_syntax","","Set default syntax.",null,null],[5,"onig_copy_syntax","","Copy syntax.",null,null],[5,"onig_get_syntax_op","","`unsigned int onig_get_syntax_op(OnigSyntaxType* syntax)`",null,null],[5,"onig_get_syntax_op2","","`unsigned int onig_get_syntax_op2(OnigSyntaxType* syntax)`",null,null],[5,"onig_get_syntax_behavior","","`unsigned int onig_get_syntax_behavior(OnigSyntaxType* syntax)`",null,null],[5,"onig_get_syntax_options","","`OnigOptionType onig_get_syntax_options(OnigSyntaxType* syntax)`",null,null],[5,"onig_set_syntax_op","","`void onig_set_syntax_op(OnigSyntaxType* syntax, unsigned int op)`",null,null],[5,"onig_set_syntax_op2","","`void onig_set_syntax_op2(OnigSyntaxType* syntax, unsigned int op2)`",null,null],[5,"onig_set_syntax_behavior","","`void onig_set_syntax_behavior(OnigSyntaxType* syntax, unsigned int behavior)`",null,null],[5,"onig_set_syntax_options","","`void onig_set_syntax_options(OnigSyntaxType* syntax, OnigOptionType options)`",null,null],[5,"onig_copy_encoding","","Copy encoding.",null,null],[5,"onig_set_meta_char","","Set a variable meta character to the code point value.\n Except for an escape character, this meta characters specification\n is not work, if ONIG_SYN_OP_VARIABLE_META_CHARACTERS is not effective\n by the syntax. (Build-in syntaxes are not effective.)",null,null],[5,"onig_get_default_case_fold_flag","","Get default case fold flag.",null,null],[5,"onig_set_default_case_fold_flag","","Set default case fold flag.",null,null],[5,"onig_get_match_stack_limit_size","","Return the maximum number of stack size.\n(default: 0 == unlimited)",null,null],[5,"onig_set_match_stack_limit_size","","Set the maximum number of stack size.",null,null],[5,"onig_unicode_define_user_property","","Define User Unicode Property",null,null],[5,"onig_end","","The use of this library is finished.",null,null],[5,"onig_version","","Return version string.  (ex. &quot;5.0.3&quot;)",null,null],[5,"onig_copyright","","Return Copyright String",null,null],[6,"OnigCodePoint","","",null,null],[6,"OnigUChar","","",null,null],[6,"OnigCtype","","",null,null],[6,"OnigDistance","","",null,null],[6,"OnigCaseFoldType","","",null,null],[6,"OnigOptionType","","",null,null],[6,"OnigSyntaxOp","","",null,null],[6,"OnigSyntaxOp2","","",null,null],[6,"OnigSyntaxBehavior","","",null,null],[6,"OnigEncoding","","",null,null],[6,"OnigRegex","","",null,null],[6,"OnigRegexMut","","",null,null],[6,"OnigWarnFunc","","Warning Callback",null,null],[6,"OnigApplyAllCaseFoldFunc","","Apply All Case Fold Callback, see OnigEncodingType-&gt;apply_all_case_fold",null,null],[6,"OnigForeachNameCallback","","Foreach Callback",null,null],[6,"OnigCaptureTreeTraverseCallback","","Capture Tree Callback",null,null],[17,"ONIGENC_CTYPE_NEWLINE","","",null,null],[17,"ONIGENC_CTYPE_ALPHA","","",null,null],[17,"ONIGENC_CTYPE_BLANK","","",null,null],[17,"ONIGENC_CTYPE_CNTRL","","",null,null],[17,"ONIGENC_CTYPE_DIGIT","","",null,null],[17,"ONIGENC_CTYPE_GRAPH","","",null,null],[17,"ONIGENC_CTYPE_LOWER","","",null,null],[17,"ONIGENC_CTYPE_PRINT","","",null,null],[17,"ONIGENC_CTYPE_PUNCT","","",null,null],[17,"ONIGENC_CTYPE_SPACE","","",null,null],[17,"ONIGENC_CTYPE_UPPER","","",null,null],[17,"ONIGENC_CTYPE_XDIGIT","","",null,null],[17,"ONIGENC_CTYPE_WORD","","",null,null],[17,"ONIGENC_CTYPE_ALNUM","","",null,null],[17,"ONIGENC_CTYPE_ASCII","","",null,null],[17,"ONIGENC_MAX_STD_CTYPE","","",null,null],[17,"ONIG_OPTION_DEFAULT","","",null,null],[17,"ONIG_OPTION_NONE","","",null,null],[17,"ONIG_OPTION_IGNORECASE","","",null,null],[17,"ONIG_OPTION_EXTEND","","",null,null],[17,"ONIG_OPTION_MULTILINE","","",null,null],[17,"ONIG_OPTION_SINGLELINE","","",null,null],[17,"ONIG_OPTION_FIND_LONGEST","","",null,null],[17,"ONIG_OPTION_FIND_NOT_EMPTY","","",null,null],[17,"ONIG_OPTION_NEGATE_SINGLELINE","","",null,null],[17,"ONIG_OPTION_DONT_CAPTURE_GROUP","","",null,null],[17,"ONIG_OPTION_CAPTURE_GROUP","","",null,null],[17,"ONIG_OPTION_NOTBOL","","",null,null],[17,"ONIG_OPTION_NOTEOL","","",null,null],[17,"ONIG_OPTION_POSIX_REGION","","",null,null],[17,"ONIG_OPTION_MAXBIT","","",null,null],[17,"ONIG_SYN_OP_VARIABLE_META_CHARACTERS","","",null,null],[17,"ONIG_SYN_OP_DOT_ANYCHAR","","",null,null],[17,"ONIG_SYN_OP_ASTERISK_ZERO_INF","","",null,null],[17,"ONIG_SYN_OP_ESC_ASTERISK_ZERO_INF","","",null,null],[17,"ONIG_SYN_OP_PLUS_ONE_INF","","",null,null],[17,"ONIG_SYN_OP_ESC_PLUS_ONE_INF","","",null,null],[17,"ONIG_SYN_OP_QMARK_ZERO_ONE","","",null,null],[17,"ONIG_SYN_OP_ESC_QMARK_ZERO_ONE","","",null,null],[17,"ONIG_SYN_OP_BRACE_INTERVAL","","",null,null],[17,"ONIG_SYN_OP_ESC_BRACE_INTERVAL","","",null,null],[17,"ONIG_SYN_OP_VBAR_ALT","","",null,null],[17,"ONIG_SYN_OP_ESC_VBAR_ALT","","",null,null],[17,"ONIG_SYN_OP_LPAREN_SUBEXP","","",null,null],[17,"ONIG_SYN_OP_ESC_LPAREN_SUBEXP","","",null,null],[17,"ONIG_SYN_OP_ESC_AZ_BUF_ANCHOR","","",null,null],[17,"ONIG_SYN_OP_ESC_CAPITAL_G_BEGIN_ANCHOR","","",null,null],[17,"ONIG_SYN_OP_DECIMAL_BACKREF","","",null,null],[17,"ONIG_SYN_OP_BRACKET_CC","","",null,null],[17,"ONIG_SYN_OP_ESC_W_WORD","","",null,null],[17,"ONIG_SYN_OP_ESC_LTGT_WORD_BEGIN_END","","",null,null],[17,"ONIG_SYN_OP_ESC_B_WORD_BOUND","","",null,null],[17,"ONIG_SYN_OP_ESC_S_WHITE_SPACE","","",null,null],[17,"ONIG_SYN_OP_ESC_D_DIGIT","","",null,null],[17,"ONIG_SYN_OP_LINE_ANCHOR","","",null,null],[17,"ONIG_SYN_OP_POSIX_BRACKET","","",null,null],[17,"ONIG_SYN_OP_QMARK_NON_GREEDY","","",null,null],[17,"ONIG_SYN_OP_ESC_CONTROL_CHARS","","",null,null],[17,"ONIG_SYN_OP_ESC_C_CONTROL","","",null,null],[17,"ONIG_SYN_OP_ESC_OCTAL3","","",null,null],[17,"ONIG_SYN_OP_ESC_X_HEX2","","",null,null],[17,"ONIG_SYN_OP_ESC_X_BRACE_HEX8","","",null,null],[17,"ONIG_SYN_OP2_ESC_CAPITAL_Q_QUOTE","","",null,null],[17,"ONIG_SYN_OP2_QMARK_GROUP_EFFECT","","",null,null],[17,"ONIG_SYN_OP2_OPTION_PERL","","",null,null],[17,"ONIG_SYN_OP2_OPTION_RUBY","","",null,null],[17,"ONIG_SYN_OP2_PLUS_POSSESSIVE_REPEAT","","",null,null],[17,"ONIG_SYN_OP2_PLUS_POSSESSIVE_INTERVAL","","",null,null],[17,"ONIG_SYN_OP2_CCLASS_SET_OP","","",null,null],[17,"ONIG_SYN_OP2_QMARK_LT_NAMED_GROUP","","",null,null],[17,"ONIG_SYN_OP2_ESC_K_NAMED_BACKREF","","",null,null],[17,"ONIG_SYN_OP2_ESC_G_SUBEXP_CALL","","",null,null],[17,"ONIG_SYN_OP2_ATMARK_CAPTURE_HISTORY","","",null,null],[17,"ONIG_SYN_OP2_ESC_CAPITAL_C_BAR_CONTROL","","",null,null],[17,"ONIG_SYN_OP2_ESC_CAPITAL_M_BAR_META","","",null,null],[17,"ONIG_SYN_OP2_ESC_V_VTAB","","",null,null],[17,"ONIG_SYN_OP2_ESC_U_HEX4","","",null,null],[17,"ONIG_SYN_OP2_ESC_GNU_BUF_ANCHOR","","",null,null],[17,"ONIG_SYN_OP2_ESC_P_BRACE_CHAR_PROPERTY","","",null,null],[17,"ONIG_SYN_OP2_ESC_P_BRACE_CIRCUMFLEX_NOT","","",null,null],[17,"ONIG_SYN_OP2_ESC_H_XDIGIT","","",null,null],[17,"ONIG_SYN_OP2_INEFFECTIVE_ESCAPE","","",null,null],[17,"ONIG_SYN_CONTEXT_INDEP_ANCHORS","","",null,null],[17,"ONIG_SYN_CONTEXT_INDEP_REPEAT_OPS","","",null,null],[17,"ONIG_SYN_CONTEXT_INVALID_REPEAT_OPS","","",null,null],[17,"ONIG_SYN_ALLOW_UNMATCHED_CLOSE_SUBEXP","","",null,null],[17,"ONIG_SYN_ALLOW_INVALID_INTERVAL","","",null,null],[17,"ONIG_SYN_ALLOW_INTERVAL_LOW_ABBREV","","",null,null],[17,"ONIG_SYN_STRICT_CHECK_BACKREF","","",null,null],[17,"ONIG_SYN_DIFFERENT_LEN_ALT_LOOK_BEHIND","","",null,null],[17,"ONIG_SYN_CAPTURE_ONLY_NAMED_GROUP","","",null,null],[17,"ONIG_SYN_ALLOW_MULTIPLEX_DEFINITION_NAME","","",null,null],[17,"ONIG_SYN_FIXED_INTERVAL_IS_GREEDY_ONLY","","",null,null],[17,"ONIG_SYN_NOT_NEWLINE_IN_NEGATIVE_CC","","",null,null],[17,"ONIG_SYN_BACKSLASH_ESCAPE_IN_CC","","",null,null],[17,"ONIG_SYN_ALLOW_EMPTY_RANGE_IN_CC","","",null,null],[17,"ONIG_SYN_ALLOW_DOUBLE_RANGE_OP_IN_CC","","",null,null],[17,"ONIG_SYN_WARN_CC_OP_NOT_ESCAPED","","",null,null],[17,"ONIG_SYN_WARN_REDUNDANT_NESTED_REPEAT","","",null,null],[17,"ONIG_NORMAL","","",null,null],[17,"ONIG_MISMATCH","","",null,null],[17,"ONIG_NO_SUPPORT_CONFIG","","",null,null],[17,"ONIGERR_MEMORY","","",null,null],[17,"ONIGERR_TYPE_BUG","","",null,null],[17,"ONIGERR_PARSER_BUG","","",null,null],[17,"ONIGERR_STACK_BUG","","",null,null],[17,"ONIGERR_UNDEFINED_BYTECODE","","",null,null],[17,"ONIGERR_UNEXPECTED_BYTECODE","","",null,null],[17,"ONIGERR_MATCH_STACK_LIMIT_OVER","","",null,null],[17,"ONIGERR_DEFAULT_ENCODING_IS_NOT_SETTED","","",null,null],[17,"ONIGERR_SPECIFIED_ENCODING_CANT_CONVERT_TO_WIDE_CHAR","","",null,null],[17,"ONIGERR_INVALID_ARGUMENT","","",null,null],[17,"ONIGERR_END_PATTERN_AT_LEFT_BRACE","","",null,null],[17,"ONIGERR_END_PATTERN_AT_LEFT_BRACKET","","",null,null],[17,"ONIGERR_EMPTY_CHAR_CLASS","","",null,null],[17,"ONIGERR_PREMATURE_END_OF_CHAR_CLASS","","",null,null],[17,"ONIGERR_END_PATTERN_AT_ESCAPE","","",null,null],[17,"ONIGERR_END_PATTERN_AT_META","","",null,null],[17,"ONIGERR_END_PATTERN_AT_CONTROL","","",null,null],[17,"ONIGERR_META_CODE_SYNTAX","","",null,null],[17,"ONIGERR_CONTROL_CODE_SYNTAX","","",null,null],[17,"ONIGERR_CHAR_CLASS_VALUE_AT_END_OF_RANGE","","",null,null],[17,"ONIGERR_CHAR_CLASS_VALUE_AT_START_OF_RANGE","","",null,null],[17,"ONIGERR_UNMATCHED_RANGE_SPECIFIER_IN_CHAR_CLASS","","",null,null],[17,"ONIGERR_TARGET_OF_REPEAT_OPERATOR_NOT_SPECIFIED","","",null,null],[17,"ONIGERR_TARGET_OF_REPEAT_OPERATOR_INVALID","","",null,null],[17,"ONIGERR_NESTED_REPEAT_OPERATOR","","",null,null],[17,"ONIGERR_UNMATCHED_CLOSE_PARENTHESIS","","",null,null],[17,"ONIGERR_END_PATTERN_WITH_UNMATCHED_PARENTHESIS","","",null,null],[17,"ONIGERR_END_PATTERN_IN_GROUP","","",null,null],[17,"ONIGERR_UNDEFINED_GROUP_OPTION","","",null,null],[17,"ONIGERR_INVALID_POSIX_BRACKET_TYPE","","",null,null],[17,"ONIGERR_INVALID_LOOK_BEHIND_PATTERN","","",null,null],[17,"ONIGERR_INVALID_REPEAT_RANGE_PATTERN","","",null,null],[17,"ONIGERR_TOO_BIG_NUMBER","","",null,null],[17,"ONIGERR_TOO_BIG_NUMBER_FOR_REPEAT_RANGE","","",null,null],[17,"ONIGERR_UPPER_SMALLER_THAN_LOWER_IN_REPEAT_RANGE","","",null,null],[17,"ONIGERR_EMPTY_RANGE_IN_CHAR_CLASS","","",null,null],[17,"ONIGERR_MISMATCH_CODE_LENGTH_IN_CLASS_RANGE","","",null,null],[17,"ONIGERR_TOO_MANY_MULTI_BYTE_RANGES","","",null,null],[17,"ONIGERR_TOO_SHORT_MULTI_BYTE_STRING","","",null,null],[17,"ONIGERR_TOO_BIG_BACKREF_NUMBER","","",null,null],[17,"ONIGERR_INVALID_BACKREF","","",null,null],[17,"ONIGERR_NUMBERED_BACKREF_OR_CALL_NOT_ALLOWED","","",null,null],[17,"ONIGERR_TOO_LONG_WIDE_CHAR_VALUE","","",null,null],[17,"ONIGERR_EMPTY_GROUP_NAME","","",null,null],[17,"ONIGERR_INVALID_GROUP_NAME","","",null,null],[17,"ONIGERR_INVALID_CHAR_IN_GROUP_NAME","","",null,null],[17,"ONIGERR_UNDEFINED_NAME_REFERENCE","","",null,null],[17,"ONIGERR_UNDEFINED_GROUP_REFERENCE","","",null,null],[17,"ONIGERR_MULTIPLEX_DEFINED_NAME","","",null,null],[17,"ONIGERR_MULTIPLEX_DEFINITION_NAME_CALL","","",null,null],[17,"ONIGERR_NEVER_ENDING_RECURSION","","",null,null],[17,"ONIGERR_GROUP_NUMBER_OVER_FOR_CAPTURE_HISTORY","","",null,null],[17,"ONIGERR_INVALID_CHAR_PROPERTY_NAME","","",null,null],[17,"ONIGERR_INVALID_CODE_POINT_VALUE","","",null,null],[17,"ONIGERR_INVALID_WIDE_CHAR_VALUE","","",null,null],[17,"ONIGERR_TOO_BIG_WIDE_CHAR_VALUE","","",null,null],[17,"ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION","","",null,null],[17,"ONIGERR_INVALID_COMBINATION_OF_OPTIONS","","",null,null],[17,"ONIGERR_OVER_THREAD_PASS_LIMIT_COUNT","","",null,null],[17,"ONIG_STATE_NORMAL","","",null,null],[17,"ONIG_STATE_SEARCHING","","",null,null],[17,"ONIG_STATE_COMPILING","","",null,null],[17,"ONIG_STATE_MODIFY","","",null,null],[17,"ONIG_TRAVERSE_CALLBACK_AT_FIRST","","",null,null],[17,"ONIG_TRAVERSE_CALLBACK_AT_LAST","","",null,null],[17,"ONIG_TRAVERSE_CALLBACK_AT_BOTH","","",null,null],[17,"ONIG_META_CHAR_ESCAPE","","",null,null],[17,"ONIG_META_CHAR_ANYCHAR","","",null,null],[17,"ONIG_META_CHAR_ANYTIME","","",null,null],[17,"ONIG_META_CHAR_ZERO_OR_ONE_TIME","","",null,null],[17,"ONIG_META_CHAR_ONE_OR_MORE_TIME","","",null,null],[17,"ONIG_META_CHAR_ANYCHAR_ANYTIME","","",null,null],[17,"ONIG_INEFFECTIVE_META_CHAR","","",null,null],[17,"ONIG_INFINITE_DISTANCE","","",null,null],[17,"ONIGENC_MAX_COMP_CASE_FOLD_CODE_LEN","","",null,null],[17,"ONIGENC_GET_CASE_FOLD_CODES_MAX_NUM","","",null,null],[17,"ONIGENC_CASE_FOLD_TURKISH_AZERI","","",null,null],[17,"ONIGENC_CASE_FOLD_MIN","","",null,null],[17,"INTERNAL_ONIGENC_CASE_FOLD_MULTI_CHAR","","",null,null],[17,"ONIGENC_CODE_TO_MBC_MAXLEN","","",null,null],[17,"ONIGENC_MBC_CASE_FOLD_MAXLEN","","",null,null],[17,"ONIG_NREGION","","",null,null],[17,"ONIG_MAX_BACKREF_NUM","","",null,null],[17,"ONIG_MAX_REPEAT_NUM","","",null,null],[17,"ONIG_MAX_MULTI_BYTE_RANGES_NUM","","",null,null],[17,"ONIG_MAX_ERROR_MESSAGE_LEN","","",null,null],[17,"ONIG_MAX_CAPTURE_HISTORY_GROUP","","",null,null],[17,"ONIG_REGION_NOTPOS","","",null,null],[17,"ONIG_CHAR_TABLE_SIZE","","",null,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null]],"paths":[[3,"OnigRegion"],[3,"OnigCaptureTreeNode"],[3,"OnigSyntaxType"],[3,"OnigCompileInfo"],[3,"OnigMetaCharTableType"],[3,"OnigCaseFoldCodeItem"],[3,"OnigEncodingType"],[3,"OnigErrorInfo"],[3,"OnigRepeatRange"],[3,"OnigRegexType"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,null],[10,"mod_floor","","Floored integer modulo, satisfying:",0,null],[10,"gcd","","Greatest Common Divisor (GCD).",0,null],[10,"lcm","","Lowest Common Multiple (LCM).",0,null],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,null],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,null],[10,"is_even","","Returns `true` if the number is even.",0,null],[10,"is_odd","","Returns `true` if the number is odd.",0,null],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["xml"] = {"doc":"This crate currently provides almost XML 1.0/1.1-compliant pull parser.","items":[[3,"ParserConfig","xml","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace in textual events be removed. Default is false.",0,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",0,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",0,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",0,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",0,null],[3,"EmitterConfig","","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `&quot;\\n&quot;`.",1,null],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `&quot;  &quot;`\n(two spaces).",1,null],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",1,null],[12,"perform_escaping","","Whether or not characters in output events will be escaped. Default is true.",1,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document.\nDefault is true.",1,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",1,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",1,null],[12,"keep_element_names_stack","","Whether or not to keep element names to support `EndElement` events without explicit names.\nDefault is true.",1,null],[12,"autopad_comments","","Whether or not to automatically insert leading and trailing spaces in emitted comments,\nif necessary. Default is true.",1,null],[0,"macros","","Contains several macros used in this crate.",null,null],[0,"name","","Contains XML qualified names manipulation types and functions.",null,null],[3,"Name","xml::name","Represents a qualified XML name.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",2,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",2,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",2,null],[3,"ReprDisplay","","A wrapper around `Name` whose `Display` implementation prints the wrapped name as it is\ndisplayed in an XML document.",null,null],[3,"OwnedName","","An owned variant of `Name`.",null,null],[12,"local_name","","A local name, e.g. `string` in `xsi:string`.",3,null],[12,"namespace","","A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.",3,null],[12,"prefix","","A name prefix, e.g. `xsi` in `xsi:string`.",3,null],[11,"fmt","","",2,null],[11,"hash","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[11,"from","","",2,null],[11,"fmt","","",2,null],[11,"to_owned","","Returns an owned variant of the qualified name.",2,null],[11,"local","","Returns a new `Name` instance representing plain local name.",2,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[11,"prefixed","","Returns a new `Name` instance with the given local name and prefix.",2,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"name"}}],[11,"qualified","","Returns a new `Name` instance representing a qualified name with or without a prefix and\nwith a namespace URI.",2,{"inputs":[{"name":"str"},{"name":"str"},{"name":"option"}],"output":{"name":"name"}}],[11,"to_repr","","Returns a correct XML representation of this local name and prefix.",2,null],[11,"repr_display","","Returns a structure which can be displayed with `std::fmt` machinery to obtain this\nlocal name and prefix.",2,null],[11,"prefix_repr","","Returns either a prefix of this name or `namespace::NS_NO_PREFIX` constant.",2,null],[11,"fmt","","",4,null],[11,"fmt","","",3,null],[11,"hash","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"borrow","","Constructs a borrowed `Name` based on this owned name.",3,null],[11,"local","","Returns a new `OwnedName` instance representing a plain local name.",3,{"inputs":[{"name":"s"}],"output":{"name":"ownedname"}}],[11,"qualified","","Returns a new `OwnedName` instance representing a qualified name with or without\na prefix and with a namespace URI.",3,{"inputs":[{"name":"s1"},{"name":"s2"},{"name":"option"}],"output":{"name":"ownedname"}}],[11,"prefix_ref","","Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\nbut avoids extra work.",3,null],[11,"namespace_ref","","Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\nbut avoids extra work.",3,null],[11,"from","","",3,{"inputs":[{"name":"name"}],"output":{"name":"ownedname"}}],[11,"from_str","","Parses the given string slice into a qualified name.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"attribute","xml","Contains XML attributes manipulation types and functions.",null,null],[3,"Attribute","xml::attribute","A borrowed version of an XML attribute.",null,null],[12,"name","","Attribute name.",5,null],[12,"value","","Attribute value.",5,null],[3,"OwnedAttribute","","An owned version of an XML attribute.",null,null],[12,"name","","Attribute name.",6,null],[12,"value","","Attribute value.",6,null],[11,"fmt","","",5,null],[11,"hash","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"to_owned","","Creates an owned attribute out of this borrowed one.",5,null],[11,"new","","Creates a borrowed attribute using the provided borrowed name and a borrowed string value.",5,{"inputs":[{"name":"name"},{"name":"str"}],"output":{"name":"attribute"}}],[11,"fmt","","",6,null],[11,"hash","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"borrow","","Returns a borrowed `Attribute` out of this owned one.",6,null],[11,"new","","Creates a new owned attribute using the provided owned name and an owned string value.",6,{"inputs":[{"name":"ownedname"},{"name":"s"}],"output":{"name":"ownedattribute"}}],[11,"fmt","","",6,null],[0,"common","xml","Contains common types and functions used throughout the library.",null,null],[3,"TextPosition","xml::common","Represents a position inside some textual document.",null,null],[12,"row","","Row, counting from 0",7,null],[12,"column","","Column, counting from 0",7,null],[4,"XmlVersion","","XML version enumeration.",null,null],[13,"Version10","","XML version 1.0.",8,null],[13,"Version11","","XML version 1.1.",8,null],[5,"is_whitespace_char","","Checks whether the given character is a white space character (`S`)\nas is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_name_start_char","","Checks whether the given character is a name start character (`NameStartChar`)\nas is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[5,"is_name_char","","Checks whether the given character is a name character (`NameChar`)\nas is defined by XML 1.1 specification, [section 2.3][1].",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[8,"Position","","Get the position in the document corresponding to the object",null,null],[10,"position","","Returns the current position or a position corresponding to the object.",9,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"new","","Creates a new position initialized to the beginning of the document",7,{"inputs":[],"output":{"name":"textposition"}}],[11,"advance","","Advances the position in a line",7,null],[11,"advance_to_tab","","Advances the position in a line to the next tab position",7,null],[11,"new_line","","Advances the position to the beginning of the next line",7,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"position","","",7,null],[11,"eq","","",8,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[0,"escape","xml","Contains functions for performing XML special characters escaping.",null,null],[5,"escape_str_attribute","xml::escape","Performs escaping of common XML characters inside an attribute value.",null,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[5,"escape_str_pcdata","","Performs escaping of common XML characters inside PCDATA.",null,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[0,"namespace","xml","Contains namespace manipulation types and functions.",null,null],[3,"Namespace","xml::namespace","Namespace is a map from prefixes to namespace URIs.",null,null],[12,"0","","",10,null],[3,"NamespaceStack","","Namespace stack is a sequence of namespaces.",null,null],[12,"0","","",11,null],[3,"NamespaceStackMappings","","An iterator over mappings from prefixes to URIs in a namespace stack.",null,null],[3,"CheckedTarget","","A wrapper around `NamespaceStack` which implements `Extend` using `put_checked()`.",null,null],[6,"NamespaceMappings","","An alias for iterator type for namespace mappings contained in a namespace.",null,null],[6,"UriMapping","","A type alias for a pair of `(prefix, uri)` values returned by namespace iterators.",null,null],[17,"NS_XMLNS_PREFIX","","Designates prefix for namespace definitions.",null,null],[17,"NS_XMLNS_URI","","Designates the standard URI for `xmlns` prefix.",null,null],[17,"NS_XML_PREFIX","","Designates prefix for a namespace containing several special predefined attributes.",null,null],[17,"NS_XML_URI","","Designates the standard URI for `xml` prefix.",null,null],[17,"NS_NO_PREFIX","","Designates the absence of prefix in a qualified name.",null,null],[17,"NS_EMPTY_URI","","Designates an empty namespace URI, which is equivalent to absence of namespace.",null,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"empty","","Returns an empty namespace.",10,{"inputs":[],"output":{"name":"namespace"}}],[11,"is_empty","","Checks whether this namespace is empty.",10,null],[11,"is_essentially_empty","","Checks whether this namespace is essentially empty, that is, it does not contain\nanything but default mappings.",10,null],[11,"contains","","Checks whether this namespace mapping contains the given prefix.",10,null],[11,"put","","Puts a mapping into this namespace.",10,null],[11,"force_put","","Puts a mapping into this namespace forcefully.",10,null],[11,"get","","Queries the namespace for the given prefix.",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"empty","","Returns an empty namespace stack.",11,{"inputs":[],"output":{"name":"namespacestack"}}],[11,"default","","Returns a namespace stack with default items in it.",11,{"inputs":[],"output":{"name":"namespacestack"}}],[11,"push_empty","","Adds an empty namespace to the top of this stack.",11,null],[11,"pop","","Removes the topmost namespace in this stack.",11,null],[11,"try_pop","","Removes the topmost namespace in this stack.",11,null],[11,"peek_mut","","Borrows the topmost namespace mutably, leaving the stack intact.",11,null],[11,"peek","","Borrows the topmost namespace immutably, leaving the stack intact.",11,null],[11,"put_checked","","Puts a mapping into the topmost namespace if this stack does not already contain one.",11,null],[11,"put","","Puts a mapping into the topmost namespace in this stack.",11,null],[11,"get","","Performs a search for the given prefix in the whole stack.",11,null],[11,"squash","","Combines this stack of namespaces into a single namespace.",11,null],[11,"checked_target","","Returns an object which implements `Extend` using `put_checked()` instead of `put()`.",11,null],[11,"iter","","Returns an iterator over all mappings in this namespace stack.",11,null],[11,"next","","",12,null],[11,"extend","","",10,null],[11,"extend","","",11,null],[11,"extend","","",13,null],[0,"reader","xml","Contains high-level interface for a pull-based XML parser.",null,null],[3,"ParserConfig","xml::reader","Parser configuration structure.",null,null],[12,"trim_whitespace","","Whether or not should whitespace in textual events be removed. Default is false.",0,null],[12,"whitespace_to_characters","","Whether or not should whitespace be converted to characters.\nDefault is false.",0,null],[12,"cdata_to_characters","","Whether or not should CDATA be converted to characters.\nDefault is false.",0,null],[12,"ignore_comments","","Whether or not should comments be omitted. Default is true.",0,null],[12,"coalesce_characters","","Whether or not should sequential `Characters` events be merged.\nDefault is true.",0,null],[3,"Error","","An XML parsing error.",null,null],[3,"EventReader","","A wrapper around an `std::io::Read` instance which provides pull-based XML parsing.",null,null],[3,"Events","","An iterator over XML events created from some type implementing `Read`.",null,null],[4,"XmlEvent","","An element of an XML input stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",14,null],[12,"version","xml::reader::XmlEvent","XML version.",14,null],[12,"encoding","","XML document encoding.",14,null],[12,"standalone","","XML standalone declaration.",14,null],[13,"EndDocument","xml::reader","Denotes to the end of the document stream.",14,null],[13,"ProcessingInstruction","","Denotes an XML processing instruction.",14,null],[12,"name","xml::reader::XmlEvent","Processing instruction target.",14,null],[12,"data","","Processing instruction content.",14,null],[13,"StartElement","xml::reader","Denotes a beginning of an XML element.",14,null],[12,"name","xml::reader::XmlEvent","Qualified name of the element.",14,null],[12,"attributes","","A list of attributes associated with the element.",14,null],[12,"namespace","","Contents of the namespace mapping at this point of the document.",14,null],[13,"EndElement","xml::reader","Denotes an end of an XML element.",14,null],[12,"name","xml::reader::XmlEvent","Qualified name of the element.",14,null],[13,"CData","xml::reader","Denotes CDATA content.",14,null],[13,"Comment","","Denotes a comment.",14,null],[13,"Characters","","Denotes character data outside of tags.",14,null],[13,"Whitespace","","Denotes a chunk of whitespace outside of tags.",14,null],[4,"ErrorKind","","",null,null],[13,"Syntax","","",15,null],[13,"Io","","",15,null],[13,"Utf8","","",15,null],[13,"UnexpectedEof","","",15,null],[11,"fmt","xml","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","Returns a new config with default values.",0,{"inputs":[],"output":{"name":"parserconfig"}}],[11,"create_reader","","Creates an XML reader with this configuration.",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"parserconfig"}}],[11,"trim_whitespace","","Sets the field to the provided value and returns updated config object.",0,null],[11,"whitespace_to_characters","","Sets the field to the provided value and returns updated config object.",0,null],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",0,null],[11,"ignore_comments","","Sets the field to the provided value and returns updated config object.",0,null],[11,"coalesce_characters","","Sets the field to the provided value and returns updated config object.",0,null],[11,"clone","xml::reader","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"as_writer_event","","Obtains a writer event from this reader event.",14,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"position","","",16,null],[11,"msg","","Returns a reference to a message which is contained inside this error.",16,null],[11,"kind","","",16,null],[11,"description","","",16,null],[11,"from","","",16,null],[11,"from","","",16,{"inputs":[{"name":"charreaderror"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"clone","","",15,null],[11,"eq","","",15,null],[6,"Result","","A result type yielded by `XmlReader`.",null,null],[11,"new","","Creates a new reader, consuming the given stream.",17,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"new_with_config","","Creates a new reader with the provded configuration, consuming the given stream.",17,{"inputs":[{"name":"r"},{"name":"parserconfig"}],"output":{"name":"eventreader"}}],[11,"next","","Pulls and returns next XML event from the stream.",17,null],[11,"source","","",17,null],[11,"source_mut","","",17,null],[11,"into_inner","","Unwraps this `EventReader`, returning the underlying reader.",17,null],[11,"position","","Returns the position of the last event produced by the reader.",17,null],[11,"into_iter","","",17,null],[11,"into_inner","","Unwraps the iterator, returning the internal `EventReader`.",18,null],[11,"next","","",18,null],[11,"from_str","","A convenience method to create an `XmlReader` from a string slice.",17,{"inputs":[{"name":"str"}],"output":{"name":"eventreader"}}],[0,"writer","xml","Contains high-level interface for an events-based XML emitter.",null,null],[3,"EmitterConfig","xml::writer","Emitter configuration structure.",null,null],[12,"line_separator","","Line separator used to separate lines in formatted output. Default is `&quot;\\n&quot;`.",1,null],[12,"indent_string","","A string which will be used for a single level of indentation. Default is `&quot;  &quot;`\n(two spaces).",1,null],[12,"perform_indent","","Whether or not the emitted document should be indented. Default is false.",1,null],[12,"perform_escaping","","Whether or not characters in output events will be escaped. Default is true.",1,null],[12,"write_document_declaration","","Whether or not to write XML document declaration at the beginning of a document.\nDefault is true.",1,null],[12,"normalize_empty_elements","","Whether or not to convert elements with empty content to empty elements. Default is true.",1,null],[12,"cdata_to_characters","","Whether or not to emit CDATA events as plain characters. Default is false.",1,null],[12,"keep_element_names_stack","","Whether or not to keep element names to support `EndElement` events without explicit names.\nDefault is true.",1,null],[12,"autopad_comments","","Whether or not to automatically insert leading and trailing spaces in emitted comments,\nif necessary. Default is true.",1,null],[3,"EventWriter","","A wrapper around an `std::io::Write` instance which emits XML document according to provided\nevents.",null,null],[4,"Error","","An error which may be returned by `XmlWriter` when writing XML events.",null,null],[13,"Io","","An I/O error occured in the underlying `Write` instance.",19,null],[13,"DocumentStartAlreadyEmitted","","Document declaration has already been written to the output stream.",19,null],[13,"LastElementNameNotAvailable","","The name of the last opening element is not available.",19,null],[13,"EndElementNameIsNotEqualToLastStartElementName","","The name of the last opening element is not equal to the name of the provided\nclosing element.",19,null],[13,"EndElementNameIsNotSpecified","","End element name is not specified when it is needed, for example, when automatic\nclosing is not enabled in configuration.",19,null],[11,"fmt","","",19,null],[11,"from","","",19,{"inputs":[{"name":"error"}],"output":{"name":"emittererror"}}],[11,"fmt","","",19,null],[11,"fmt","xml","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"new","","Creates an emitter configuration with default values.",1,{"inputs":[],"output":{"name":"emitterconfig"}}],[11,"create_writer","","Creates an XML writer with this configuration.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"emitterconfig"}}],[11,"line_separator","","Sets the field to the provided value and returns updated config object.",1,null],[11,"indent_string","","Sets the field to the provided value and returns updated config object.",1,null],[11,"perform_indent","","Sets the field to the provided value and returns updated config object.",1,null],[11,"write_document_declaration","","Sets the field to the provided value and returns updated config object.",1,null],[11,"normalize_empty_elements","","Sets the field to the provided value and returns updated config object.",1,null],[11,"cdata_to_characters","","Sets the field to the provided value and returns updated config object.",1,null],[11,"keep_element_names_stack","","Sets the field to the provided value and returns updated config object.",1,null],[11,"autopad_comments","","Sets the field to the provided value and returns updated config object.",1,null],[0,"events","xml::writer","Contains `XmlEvent` datatype, instances of which are consumed by the writer.",null,null],[3,"EndElementBuilder","xml::writer::events","",null,null],[3,"StartElementBuilder","","A builder for a starting element event.",null,null],[4,"XmlEvent","","A part of an XML output stream.",null,null],[13,"StartDocument","","Corresponds to XML document declaration.",20,null],[12,"version","xml::writer::events::XmlEvent","XML version.",20,null],[12,"encoding","","XML document encoding.",20,null],[12,"standalone","","XML standalone declaration.",20,null],[13,"ProcessingInstruction","xml::writer::events","Denotes an XML processing instruction.",20,null],[12,"name","xml::writer::events::XmlEvent","Processing instruction target.",20,null],[12,"data","","Processing instruction content.",20,null],[13,"StartElement","xml::writer::events","Denotes a beginning of an XML element.",20,null],[12,"name","xml::writer::events::XmlEvent","Qualified name of the element.",20,null],[12,"attributes","","A list of attributes associated with the element.",20,null],[12,"namespace","","Contents of the namespace mapping at this point of the document.",20,null],[13,"EndElement","xml::writer::events","Denotes an end of an XML element.",20,null],[12,"name","xml::writer::events::XmlEvent","Optional qualified name of the element.",20,null],[13,"CData","xml::writer::events","Denotes CDATA content.",20,null],[13,"Comment","","Denotes a comment.",20,null],[13,"Characters","","Denotes character data outside of tags.",20,null],[11,"processing_instruction","","Returns an writer event for a processing instruction.",20,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"xmlevent"}}],[11,"start_element","","Returns a builder for a starting element.",20,{"inputs":[{"name":"s"}],"output":{"name":"startelementbuilder"}}],[11,"end_element","","Returns a builder for an closing element.",20,{"inputs":[],"output":{"name":"endelementbuilder"}}],[11,"cdata","","Returns a CDATA event.",20,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"characters","","Returns a regular characters (PCDATA) event.",20,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"comment","","Returns a comment event.",20,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"xmlevent"}}],[11,"name","","Sets the name of this closing element.",21,null],[11,"from","","",20,{"inputs":[{"name":"endelementbuilder"}],"output":{"name":"xmlevent"}}],[11,"attr","","Sets an attribute value of this element to the given string.",22,null],[11,"ns","","Adds a namespace to the current namespace context.",22,null],[11,"default_ns","","Adds a default namespace mapping to the current namespace context.",22,null],[11,"from","","",20,{"inputs":[{"name":"startelementbuilder"}],"output":{"name":"xmlevent"}}],[6,"Result","xml::writer","A result type yielded by `XmlWriter`.",null,null],[11,"new","","Creates a new `EventWriter` out of an `std::io::Write` instance using the default\nconfiguration.",23,{"inputs":[{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"new_with_config","","Creates a new `EventWriter` out of an `std::io::Write` instance using the provided\nconfiguration.",23,{"inputs":[{"name":"w"},{"name":"emitterconfig"}],"output":{"name":"eventwriter"}}],[11,"write","","Writes the next piece of XML document according to the provided event.",23,null],[11,"into_inner","","Unwraps this `EventWriter`, returning the underlying writer.",23,null]],"paths":[[3,"ParserConfig"],[3,"EmitterConfig"],[3,"Name"],[3,"OwnedName"],[3,"ReprDisplay"],[3,"Attribute"],[3,"OwnedAttribute"],[3,"TextPosition"],[4,"XmlVersion"],[8,"Position"],[3,"Namespace"],[3,"NamespaceStack"],[3,"NamespaceStackMappings"],[3,"CheckedTarget"],[4,"XmlEvent"],[4,"ErrorKind"],[3,"Error"],[3,"EventReader"],[3,"Events"],[4,"Error"],[4,"XmlEvent"],[3,"EndElementBuilder"],[3,"StartElementBuilder"],[3,"EventWriter"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",9,null],[11,"eq","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"hash","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"hash","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"hash","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,null],[11,"hash","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"count","","",37,null],[11,"last","","",37,null],[11,"len","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"len","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"hash","core::result","",68,null],[11,"fmt","","",68,null],[11,"cmp","","",68,null],[11,"partial_cmp","","",68,null],[11,"lt","","",68,null],[11,"le","","",68,null],[11,"gt","","",68,null],[11,"ge","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"is_ok","","Returns true if the result is `Ok`",68,null],[11,"is_err","","Returns true if the result is `Err`",68,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",68,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",68,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",68,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",68,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",68,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",68,null],[11,"iter","","Returns an iterator over the possibly contained value.",68,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",68,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",68,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",68,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",68,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",68,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",68,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",68,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",68,null],[11,"fmt","","",69,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"next_back","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",68,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",72,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"count","","",72,null],[11,"nth","","",72,null],[11,"last","","",72,null],[11,"next_back","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",73,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"fmt","","",74,null],[11,"clone","","",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"fmt","","",80,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"count","","",80,null],[11,"nth","","",80,null],[11,"last","","",80,null],[11,"next_back","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","core::str::pattern","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"fmt","","",84,null],[11,"clone","","",84,null],[11,"haystack","","",84,null],[11,"next","","",84,null],[11,"next_match","","",84,null],[11,"next_reject","","",84,null],[11,"next_back","","",84,null],[11,"next_match_back","","",84,null],[11,"next_reject_back","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"clone","","",86,null],[11,"fmt","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"fmt","","",87,null],[11,"clone","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"eq","core::str","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",88,null],[11,"fmt","","",89,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"next","","",90,null],[11,"size_hint","","",90,null],[11,"next_back","","",90,null],[11,"as_str","","View the underlying data as a subslice of the original data.",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"count","","",92,null],[11,"last","","",92,null],[11,"nth","","",92,null],[11,"next_back","","",92,null],[11,"len","","",92,null],[11,"fmt","","",93,null],[11,"next","","",93,null],[11,"clone","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"next_back","","",93,null],[11,"next_back","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"next_back","","",95,null],[11,"next_back","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"next_back","","",99,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"next_back","","",101,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"fmt","core::hash::sip","",106,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",106,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",106,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",106,null],[11,"finish","","",106,null],[11,"clone","","",106,null],[11,"default","","",106,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",107,null],[11,"build_hasher","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",108,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",109,null],[11,"finish","","Finishes output and returns any error encountered.",109,null],[11,"field","","Adds a new field to the generated tuple struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"entry","","Adds a new entry to the set output.",111,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the list output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the map output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"partial_cmp","core::fmt","",114,null],[11,"eq","","",114,null],[11,"cmp","","",114,null],[11,"hash","","",114,null],[11,"default","","",114,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"clone","","",115,null],[11,"fmt","","",115,null],[11,"fmt","","",115,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",116,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",116,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",116,null],[11,"write_fmt","","Writes some formatted information into this instance",116,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",116,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",116,null],[11,"align","","Flag indicating what form of alignment was requested",116,null],[11,"width","","Optionally specified integer width that the output should be",116,null],[11,"precision","","Optionally specified precision for numeric types",116,null],[11,"sign_plus","","Determines if the `+` flag was specified.",116,null],[11,"sign_minus","","Determines if the `-` flag was specified.",116,null],[11,"alternate","","Determines if the `#` flag was specified.",116,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",116,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",116,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",116,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",116,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",116,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",116,null],[11,"write_str","","",116,null],[11,"write_char","","",116,null],[11,"write_fmt","","",116,null],[11,"fmt","","",114,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",117,null],[10,"deref","","The method called to dereference a value",117,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",118,null],[12,"1","","",118,null],[11,"get","","",118,null],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"__Deref"],[3,"Lazy"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"fmt","","",21,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"description","","",24,null],[11,"fmt","","",24,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,null],[11,"fmt","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",28,null],[11,"description","","",30,null],[11,"cause","","",30,null],[11,"fmt","","",30,null],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,null],[11,"fmt","","",29,null],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,null],[11,"fmt","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,null],[11,"emit_nil","","",35,null],[11,"emit_usize","","",35,null],[11,"emit_u64","","",35,null],[11,"emit_u32","","",35,null],[11,"emit_u16","","",35,null],[11,"emit_u8","","",35,null],[11,"emit_isize","","",35,null],[11,"emit_i64","","",35,null],[11,"emit_i32","","",35,null],[11,"emit_i16","","",35,null],[11,"emit_i8","","",35,null],[11,"emit_bool","","",35,null],[11,"emit_f64","","",35,null],[11,"emit_f32","","",35,null],[11,"emit_char","","",35,null],[11,"emit_str","","",35,null],[11,"emit_enum","","",35,null],[11,"emit_enum_variant","","",35,null],[11,"emit_enum_variant_arg","","",35,null],[11,"emit_enum_struct_variant","","",35,null],[11,"emit_enum_struct_variant_field","","",35,null],[11,"emit_struct","","",35,null],[11,"emit_struct_field","","",35,null],[11,"emit_tuple","","",35,null],[11,"emit_tuple_arg","","",35,null],[11,"emit_tuple_struct","","",35,null],[11,"emit_tuple_struct_arg","","",35,null],[11,"emit_option","","",35,null],[11,"emit_option_none","","",35,null],[11,"emit_option_some","","",35,null],[11,"emit_seq","","",35,null],[11,"emit_seq_elt","","",35,null],[11,"emit_map","","",35,null],[11,"emit_map_elt_key","","",35,null],[11,"emit_map_elt_val","","",35,null],[11,"encode","","",27,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,null],[11,"is_empty","","Returns true if the stack is empty.",36,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,null],[11,"next","","",37,null],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,null],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,null],[11,"read_usize","","",39,null],[11,"read_u8","","",39,null],[11,"read_u16","","",39,null],[11,"read_u32","","",39,null],[11,"read_u64","","",39,null],[11,"read_isize","","",39,null],[11,"read_i8","","",39,null],[11,"read_i16","","",39,null],[11,"read_i32","","",39,null],[11,"read_i64","","",39,null],[11,"read_f32","","",39,null],[11,"read_f64","","",39,null],[11,"read_bool","","",39,null],[11,"read_char","","",39,null],[11,"read_str","","",39,null],[11,"read_enum","","",39,null],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,null],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,null],[11,"read_struct","","",39,null],[11,"read_struct_field","","",39,null],[11,"read_tuple","","",39,null],[11,"read_tuple_arg","","",39,null],[11,"read_tuple_struct","","",39,null],[11,"read_tuple_struct_arg","","",39,null],[11,"read_option","","",39,null],[11,"read_seq","","",39,null],[11,"read_seq_elt","","",39,null],[11,"read_map","","",39,null],[11,"read_map_elt_key","","",39,null],[11,"read_map_elt_val","","",39,null],[11,"error","","",39,null],[11,"to_json","","",27,null],[11,"to_json","collections::string","",0,null],[11,"to_json","collections::vec","",4,null],[11,"to_json","collections::btree::map","",14,null],[11,"to_json","std::collections::hash::map","",16,null],[11,"to_json","core::option","",5,null],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,null],[11,"fmt","","Encodes a json value into a string",40,null],[11,"fmt","","Encodes a json value into a string",41,null],[11,"indent","","Set the indentation level for the emitted JSON",42,null],[11,"fmt","","Encodes a json value into a string",42,null],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,null],[10,"read_usize","","",43,null],[10,"read_u64","","",43,null],[10,"read_u32","","",43,null],[10,"read_u16","","",43,null],[10,"read_u8","","",43,null],[10,"read_isize","","",43,null],[10,"read_i64","","",43,null],[10,"read_i32","","",43,null],[10,"read_i16","","",43,null],[10,"read_i8","","",43,null],[10,"read_bool","","",43,null],[10,"read_f64","","",43,null],[10,"read_f32","","",43,null],[10,"read_char","","",43,null],[10,"read_str","","",43,null],[10,"read_enum","","",43,null],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,null],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,null],[10,"read_struct","","",43,null],[10,"read_struct_field","","",43,null],[10,"read_tuple","","",43,null],[10,"read_tuple_arg","","",43,null],[10,"read_tuple_struct","","",43,null],[10,"read_tuple_struct_arg","","",43,null],[10,"read_option","","",43,null],[10,"read_seq","","",43,null],[10,"read_seq_elt","","",43,null],[10,"read_map","","",43,null],[10,"read_map_elt_key","","",43,null],[10,"read_map_elt_val","","",43,null],[10,"error","","",43,null],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,null],[10,"emit_usize","","",44,null],[10,"emit_u64","","",44,null],[10,"emit_u32","","",44,null],[10,"emit_u16","","",44,null],[10,"emit_u8","","",44,null],[10,"emit_isize","","",44,null],[10,"emit_i64","","",44,null],[10,"emit_i32","","",44,null],[10,"emit_i16","","",44,null],[10,"emit_i8","","",44,null],[10,"emit_bool","","",44,null],[10,"emit_f64","","",44,null],[10,"emit_f32","","",44,null],[10,"emit_char","","",44,null],[10,"emit_str","","",44,null],[10,"emit_enum","","",44,null],[10,"emit_enum_variant","","",44,null],[10,"emit_enum_variant_arg","","",44,null],[10,"emit_enum_struct_variant","","",44,null],[10,"emit_enum_struct_variant_field","","",44,null],[10,"emit_struct","","",44,null],[10,"emit_struct_field","","",44,null],[10,"emit_tuple","","",44,null],[10,"emit_tuple_arg","","",44,null],[10,"emit_tuple_struct","","",44,null],[10,"emit_tuple_struct_arg","","",44,null],[10,"emit_option","","",44,null],[10,"emit_option_none","","",44,null],[10,"emit_option_some","","",44,null],[10,"emit_seq","","",44,null],[10,"emit_seq_elt","","",44,null],[10,"emit_map","","",44,null],[10,"emit_map_elt_key","","",44,null],[10,"emit_map_elt_val","","",44,null],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",14,null],[12,"sin_port","","",14,null],[12,"sin_addr","","",14,null],[12,"sin_zero","","",14,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",15,null],[12,"sin6_port","","",15,null],[12,"sin6_flowinfo","","",15,null],[12,"sin6_addr","","",15,null],[12,"sin6_scope_id","","",15,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",16,null],[12,"sun_path","","",16,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",17,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",18,null],[12,"ai_family","","",18,null],[12,"ai_socktype","","",18,null],[12,"ai_protocol","","",18,null],[12,"ai_addrlen","","",18,null],[12,"ai_addr","","",18,null],[12,"ai_canonname","","",18,null],[12,"ai_next","","",18,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",19,null],[12,"nl_pid","","",19,null],[12,"nl_groups","","",19,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",20,null],[12,"sll_protocol","","",20,null],[12,"sll_ifindex","","",20,null],[12,"sll_hatype","","",20,null],[12,"sll_pkttype","","",20,null],[12,"sll_halen","","",20,null],[12,"sll_addr","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",22,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",23,null],[12,"dli_fbase","","",23,null],[12,"dli_sname","","",23,null],[12,"dli_saddr","","",23,null],[3,"epoll_event","","",null,null],[12,"events","","",24,null],[12,"u64","","",24,null],[3,"utsname","","",null,null],[12,"sysname","","",25,null],[12,"nodename","","",25,null],[12,"release","","",25,null],[12,"version","","",25,null],[12,"machine","","",25,null],[12,"domainname","","",25,null],[3,"lconv","","",null,null],[12,"decimal_point","","",26,null],[12,"thousands_sep","","",26,null],[12,"grouping","","",26,null],[12,"int_curr_symbol","","",26,null],[12,"currency_symbol","","",26,null],[12,"mon_decimal_point","","",26,null],[12,"mon_thousands_sep","","",26,null],[12,"mon_grouping","","",26,null],[12,"positive_sign","","",26,null],[12,"negative_sign","","",26,null],[12,"int_frac_digits","","",26,null],[12,"frac_digits","","",26,null],[12,"p_cs_precedes","","",26,null],[12,"p_sep_by_space","","",26,null],[12,"n_cs_precedes","","",26,null],[12,"n_sep_by_space","","",26,null],[12,"p_sign_posn","","",26,null],[12,"n_sign_posn","","",26,null],[12,"int_p_cs_precedes","","",26,null],[12,"int_p_sep_by_space","","",26,null],[12,"int_n_cs_precedes","","",26,null],[12,"int_n_sep_by_space","","",26,null],[12,"int_p_sign_posn","","",26,null],[12,"int_n_sign_posn","","",26,null],[3,"dirent","","",null,null],[12,"d_ino","","",27,null],[12,"d_off","","",27,null],[12,"d_reclen","","",27,null],[12,"d_type","","",27,null],[12,"d_name","","",27,null],[3,"dirent64","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",29,null],[12,"rlim_max","","",29,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",30,null],[12,"gl_pathv","","",30,null],[12,"gl_offs","","",30,null],[12,"gl_flags","","",30,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",31,null],[12,"ifa_name","","",31,null],[12,"ifa_flags","","",31,null],[12,"ifa_addr","","",31,null],[12,"ifa_netmask","","",31,null],[12,"ifa_ifu","","",31,null],[12,"ifa_data","","",31,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",32,null],[12,"pw_passwd","","",32,null],[12,"pw_uid","","",32,null],[12,"pw_gid","","",32,null],[12,"pw_gecos","","",32,null],[12,"pw_dir","","",32,null],[12,"pw_shell","","",32,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",33,null],[12,"f_frsize","","",33,null],[12,"f_blocks","","",33,null],[12,"f_bfree","","",33,null],[12,"f_bavail","","",33,null],[12,"f_files","","",33,null],[12,"f_ffree","","",33,null],[12,"f_favail","","",33,null],[12,"f_fsid","","",33,null],[12,"f_flag","","",33,null],[12,"f_namemax","","",33,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",34,null],[12,"dqb_bsoftlimit","","",34,null],[12,"dqb_curspace","","",34,null],[12,"dqb_ihardlimit","","",34,null],[12,"dqb_isoftlimit","","",34,null],[12,"dqb_curinodes","","",34,null],[12,"dqb_btime","","",34,null],[12,"dqb_itime","","",34,null],[12,"dqb_valid","","",34,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",35,null],[12,"ssi_errno","","",35,null],[12,"ssi_code","","",35,null],[12,"ssi_pid","","",35,null],[12,"ssi_uid","","",35,null],[12,"ssi_fd","","",35,null],[12,"ssi_tid","","",35,null],[12,"ssi_band","","",35,null],[12,"ssi_overrun","","",35,null],[12,"ssi_trapno","","",35,null],[12,"ssi_status","","",35,null],[12,"ssi_int","","",35,null],[12,"ssi_ptr","","",35,null],[12,"ssi_utime","","",35,null],[12,"ssi_stime","","",35,null],[12,"ssi_addr","","",35,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",36,null],[12,"mq_maxmsg","","",36,null],[12,"mq_msgsize","","",36,null],[12,"mq_curmsgs","","",36,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",37,null],[12,"sa_mask","","",37,null],[12,"sa_flags","","",37,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",38,null],[12,"ss_flags","","",38,null],[12,"ss_size","","",38,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",39,null],[12,"si_errno","","",39,null],[12,"si_code","","",39,null],[12,"_pad","","",39,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",40,null],[12,"gl_pathv","","",40,null],[12,"gl_offs","","",40,null],[12,"gl_flags","","",40,null],[3,"ucred","","",null,null],[12,"pid","","",41,null],[12,"uid","","",41,null],[12,"gid","","",41,null],[3,"statfs","","",null,null],[12,"f_type","","",42,null],[12,"f_bsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_namelen","","",42,null],[12,"f_frsize","","",42,null],[3,"msghdr","","",null,null],[12,"msg_name","","",43,null],[12,"msg_namelen","","",43,null],[12,"msg_iov","","",43,null],[12,"msg_iovlen","","",43,null],[12,"msg_control","","",43,null],[12,"msg_controllen","","",43,null],[12,"msg_flags","","",43,null],[3,"termios","","",null,null],[12,"c_iflag","","",44,null],[12,"c_oflag","","",44,null],[12,"c_cflag","","",44,null],[12,"c_lflag","","",44,null],[12,"c_line","","",44,null],[12,"c_cc","","",44,null],[12,"c_ispeed","","",44,null],[12,"c_ospeed","","",44,null],[3,"flock","","",null,null],[12,"l_type","","",45,null],[12,"l_whence","","",45,null],[12,"l_start","","",45,null],[12,"l_len","","",45,null],[12,"l_pid","","",45,null],[3,"ipc_perm","","",null,null],[12,"__key","","",46,null],[12,"uid","","",46,null],[12,"gid","","",46,null],[12,"cuid","","",46,null],[12,"cgid","","",46,null],[12,"mode","","",46,null],[12,"__seq","","",46,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",47,null],[12,"shm_segsz","","",47,null],[12,"shm_atime","","",47,null],[12,"shm_dtime","","",47,null],[12,"shm_ctime","","",47,null],[12,"shm_cpid","","",47,null],[12,"shm_lpid","","",47,null],[12,"shm_nattch","","",47,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",48,null],[12,"loads","","",48,null],[12,"totalram","","",48,null],[12,"freeram","","",48,null],[12,"sharedram","","",48,null],[12,"bufferram","","",48,null],[12,"totalswap","","",48,null],[12,"freeswap","","",48,null],[12,"procs","","",48,null],[12,"pad","","",48,null],[12,"totalhigh","","",48,null],[12,"freehigh","","",48,null],[12,"mem_unit","","",48,null],[12,"_f","","",48,null],[3,"stat","","",null,null],[12,"st_dev","","",49,null],[12,"st_ino","","",49,null],[12,"st_nlink","","",49,null],[12,"st_mode","","",49,null],[12,"st_uid","","",49,null],[12,"st_gid","","",49,null],[12,"st_rdev","","",49,null],[12,"st_size","","",49,null],[12,"st_blksize","","",49,null],[12,"st_blocks","","",49,null],[12,"st_atime","","",49,null],[12,"st_atime_nsec","","",49,null],[12,"st_mtime","","",49,null],[12,"st_mtime_nsec","","",49,null],[12,"st_ctime","","",49,null],[12,"st_ctime_nsec","","",49,null],[3,"stat64","","",null,null],[12,"st_dev","","",50,null],[12,"st_ino","","",50,null],[12,"st_nlink","","",50,null],[12,"st_mode","","",50,null],[12,"st_uid","","",50,null],[12,"st_gid","","",50,null],[12,"st_rdev","","",50,null],[12,"st_size","","",50,null],[12,"st_blksize","","",50,null],[12,"st_blocks","","",50,null],[12,"st_atime","","",50,null],[12,"st_atime_nsec","","",50,null],[12,"st_mtime","","",50,null],[12,"st_mtime_nsec","","",50,null],[12,"st_ctime","","",50,null],[12,"st_ctime_nsec","","",50,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",51,null],[12,"exponent","","",51,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",52,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",53,null],[12,"swd","","",53,null],[12,"ftw","","",53,null],[12,"fop","","",53,null],[12,"rip","","",53,null],[12,"rdp","","",53,null],[12,"mxcsr","","",53,null],[12,"mxcr_mask","","",53,null],[12,"_st","","",53,null],[12,"_xmm","","",53,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",54,null],[12,"fpregs","","",54,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",55,null],[12,"uc_link","","",55,null],[12,"uc_stack","","",55,null],[12,"uc_mcontext","","",55,null],[12,"uc_sigmask","","",55,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"mkfifoat","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",56,null],[11,"is_none","","Returns `true` if the option is a `None` value",56,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",56,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",56,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",56,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",56,null],[11,"unwrap_or","","Returns the contained value or a default.",56,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",56,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",56,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",56,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",56,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",56,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",56,null],[11,"iter","","Returns an iterator over the possibly contained value.",56,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",56,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",56,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",56,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",56,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",56,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",56,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",56,null],[11,"unwrap_or_default","","Returns the contained value or a default",56,null],[11,"hash","core::num","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"fmt","","",57,null],[11,"fmt","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"shl","","",57,null],[11,"shl_assign","","",57,null],[11,"shr","","",57,null],[11,"shr_assign","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"add","","",57,null],[11,"add_assign","","",57,null],[11,"sub","","",57,null],[11,"sub_assign","","",57,null],[11,"mul","","",57,null],[11,"mul_assign","","",57,null],[11,"div","","",57,null],[11,"div_assign","","",57,null],[11,"rem","","",57,null],[11,"rem_assign","","",57,null],[11,"not","","",57,null],[11,"bitxor","","",57,null],[11,"bitxor_assign","","",57,null],[11,"bitor","","",57,null],[11,"bitor_assign","","",57,null],[11,"bitand","","",57,null],[11,"bitand_assign","","",57,null],[11,"neg","","",57,null],[11,"eq","core::num::dec2flt","",58,null],[11,"ne","","",58,null],[11,"clone","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"fmt","core::num","",59,null],[11,"eq","","",59,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"fmt","","",60,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"hash","core::nonzero","",62,null],[11,"fmt","","",62,null],[11,"partial_cmp","","",62,null],[11,"lt","","",62,null],[11,"le","","",62,null],[11,"gt","","",62,null],[11,"ge","","",62,null],[11,"cmp","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",62,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",62,null],[11,"new","core::ptr","Creates a new `Unique`.",63,null],[11,"get","","Dereferences the content.",63,null],[11,"get_mut","","Mutably dereferences the content.",63,null],[11,"deref","","",63,null],[11,"fmt","","",63,null],[11,"new","","Creates a new `Shared`.",64,null],[11,"clone","","",64,null],[11,"deref","","",64,null],[11,"fmt","","",64,null],[11,"hash","core::marker","",65,null],[11,"eq","","",65,null],[11,"partial_cmp","","",65,null],[11,"cmp","","",65,null],[11,"clone","","",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"hash","core::ops","",66,null],[11,"eq","","",66,null],[11,"clone","","",66,null],[11,"fmt","","",66,null],[11,"hash","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"contains","","# Examples",67,null],[11,"hash","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",68,null],[11,"contains","","# Examples",68,null],[11,"hash","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[11,"contains","","# Examples",69,null],[11,"hash","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"from","","",70,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",70,null],[11,"hash","","",71,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"contains","","# Examples",71,null],[11,"hash","core::cmp","",72,null],[11,"fmt","","",72,null],[11,"eq","","",72,null],[11,"clone","","",72,null],[11,"reverse","","Reverse the `Ordering`.",72,null],[11,"cmp","","",72,null],[11,"partial_cmp","","",72,null],[11,"fmt","libc","",73,null],[11,"fmt","","",73,null],[11,"is","","Returns true if the boxed type is the same as `T`",73,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",73,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",73,null],[11,"is","","Forwards to the method defined on the type `Any`.",73,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",73,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",73,null],[11,"hash","core::any","",74,null],[11,"fmt","","",74,null],[11,"eq","","",74,null],[11,"ne","","",74,null],[11,"clone","","",74,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",74,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",75,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",77,null],[11,"clone","","",77,null],[11,"new","","Creates a new `AtomicBool`.",75,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",75,null],[11,"store","","Stores a value into the bool.",75,null],[11,"swap","","Stores a value into the bool, returning the old value.",75,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",75,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",75,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",75,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",75,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",75,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",75,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",75,null],[11,"new","","Creates a new `AtomicPtr`.",76,null],[11,"load","","Loads a value from the pointer.",76,null],[11,"store","","Stores a value into the pointer.",76,null],[11,"swap","","Stores a value into the pointer, returning the old value.",76,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",76,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",76,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",76,null],[11,"default","","",78,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",78,null],[11,"new","","Creates a new atomic integer.",78,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",78,null],[11,"store","","Stores a value into the atomic integer.",78,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",78,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",78,null],[11,"fetch_add","","Add to the current value, returning the previous value.",78,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",78,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",78,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",78,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",78,null],[11,"default","","",79,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",79,null],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",79,null],[11,"store","","Stores a value into the atomic integer.",79,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"fetch_add","","Add to the current value, returning the previous value.",79,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,null],[11,"default","","",80,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",80,null],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",80,null],[11,"store","","Stores a value into the atomic integer.",80,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"fetch_add","","Add to the current value, returning the previous value.",80,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,null],[11,"default","","",81,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",81,null],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",81,null],[11,"store","","Stores a value into the atomic integer.",81,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"fetch_add","","Add to the current value, returning the previous value.",81,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,null],[11,"default","","",82,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",82,null],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",82,null],[11,"store","","Stores a value into the atomic integer.",82,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"fetch_add","","Add to the current value, returning the previous value.",82,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,null],[11,"default","","",83,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",83,null],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",83,null],[11,"store","","Stores a value into the atomic integer.",83,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",83,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"fetch_add","","Add to the current value, returning the previous value.",83,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",83,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",83,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",83,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",83,null],[11,"default","","",84,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",84,null],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",84,null],[11,"store","","Stores a value into the atomic integer.",84,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",84,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"fetch_add","","Add to the current value, returning the previous value.",84,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",84,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",84,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",84,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",84,null],[11,"default","","",85,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",85,null],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",85,null],[11,"store","","Stores a value into the atomic integer.",85,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"fetch_add","","Add to the current value, returning the previous value.",85,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",85,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",85,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",85,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",85,null],[11,"default","","",86,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",86,null],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",86,null],[11,"store","","Stores a value into the atomic integer.",86,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",86,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"fetch_add","","Add to the current value, returning the previous value.",86,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",86,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",86,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",86,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",86,null],[11,"default","","",87,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",87,null],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",87,null],[11,"store","","Stores a value into the atomic integer.",87,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",87,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"fetch_add","","Add to the current value, returning the previous value.",87,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",87,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",87,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",87,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",87,null],[11,"fmt","","",75,null],[11,"fmt","","",76,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",88,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",88,null],[11,"set","","Sets the contained value.",88,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",88,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",88,null],[11,"clone","","",88,null],[11,"default","","",88,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",88,null],[11,"partial_cmp","","",88,null],[11,"lt","","",88,null],[11,"le","","",88,null],[11,"gt","","",88,null],[11,"ge","","",88,null],[11,"cmp","","",88,null],[11,"fmt","","",89,null],[11,"eq","","",89,null],[11,"clone","","",89,null],[11,"new","","Creates a new `RefCell` containing `value`.",90,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",90,null],[11,"borrow_state","","Query the current state of this `RefCell`",90,null],[11,"borrow","","Immutably borrows the wrapped value.",90,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",90,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",90,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",90,null],[11,"clone","","",90,null],[11,"default","","",90,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",90,null],[11,"partial_cmp","","",90,null],[11,"lt","","",90,null],[11,"le","","",90,null],[11,"gt","","",90,null],[11,"ge","","",90,null],[11,"cmp","","",90,null],[11,"deref","","",91,null],[11,"clone","","Copies a `Ref`.",91,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",91,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",92,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"deref","","",92,null],[11,"deref_mut","","",92,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",93,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",93,null],[11,"get","","Gets a mutable pointer to the wrapped value.",93,null],[11,"default","","",93,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",94,null],[11,"clone","","",94,null],[11,"next","","",94,null],[11,"size_hint","","",94,null],[11,"count","","",94,null],[11,"last","","",94,null],[11,"len","","",94,null],[11,"fmt","","",95,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"count","","",95,null],[11,"nth","","",95,null],[11,"last","","",95,null],[11,"len","","",95,null],[11,"fmt","","",96,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",96,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"fmt","","",97,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"fmt","core::iter::range","",98,null],[11,"clone","","",98,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",68,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",67,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",70,null],[11,"next","core::iter::range","",98,null],[11,"size_hint","","",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"next","core::ops","",67,null],[11,"size_hint","","",67,null],[11,"next_back","","",67,null],[11,"next","","",68,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"fmt","core::iter::sources","",99,null],[11,"clone","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next_back","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"next_back","","",100,null],[11,"len","","",100,null],[11,"clone","","",100,null],[11,"default","","",100,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",101,null],[11,"clone","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"next_back","","",101,null],[11,"len","","",101,null],[11,"fmt","core::iter","",102,null],[11,"clone","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next_back","","",102,null],[11,"fmt","","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"count","","",105,null],[11,"nth","","",105,null],[11,"find","","",105,null],[11,"last","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"clone","","",109,null],[11,"fmt","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"fmt","","",110,null],[11,"clone","","",110,null],[11,"next","","# Overflow Behavior",110,null],[11,"size_hint","","",110,null],[11,"nth","","",110,null],[11,"count","","",110,null],[11,"next_back","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"next","","",111,null],[11,"count","","",111,null],[11,"nth","","",111,null],[11,"last","","",111,null],[11,"size_hint","","",111,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",111,null],[11,"is_empty","","Checks if the iterator has finished iterating.",111,null],[11,"clone","","",112,null],[11,"fmt","","",112,null],[11,"next","","",112,null],[11,"size_hint","","",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"fmt","","",114,null],[11,"clone","","",114,null],[11,"next","","",114,null],[11,"nth","","",114,null],[11,"count","","",114,null],[11,"last","","",114,null],[11,"size_hint","","",114,null],[11,"next_back","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"next","","",115,null],[11,"nth","","",115,null],[11,"size_hint","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"next","","",116,null],[11,"size_hint","","",116,null],[11,"clone","","",117,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"next_back","","",117,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"next","","",118,null],[11,"nth","","",118,null],[11,"last","","",118,null],[11,"count","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"clone","","",119,null],[11,"fmt","","",119,null],[11,"next","","",119,null],[11,"size_hint","","",119,null],[11,"next_back","","",119,null],[11,"hash","core::option","",56,null],[11,"fmt","","",56,null],[11,"cmp","","",56,null],[11,"partial_cmp","","",56,null],[11,"lt","","",56,null],[11,"le","","",56,null],[11,"gt","","",56,null],[11,"ge","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"clone","","",56,null],[11,"default","","",56,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",56,null],[11,"fmt","","",120,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"next_back","","",120,null],[11,"clone","","",120,null],[11,"fmt","","",121,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"next_back","","",121,null],[11,"fmt","","",122,null],[11,"clone","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",56,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",123,null],[11,"hash","core::result","",124,null],[11,"fmt","","",124,null],[11,"cmp","","",124,null],[11,"partial_cmp","","",124,null],[11,"lt","","",124,null],[11,"le","","",124,null],[11,"gt","","",124,null],[11,"ge","","",124,null],[11,"eq","","",124,null],[11,"ne","","",124,null],[11,"clone","","",124,null],[11,"is_ok","","Returns true if the result is `Ok`",124,null],[11,"is_err","","Returns true if the result is `Err`",124,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",124,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",124,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",124,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",124,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",124,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",124,null],[11,"iter","","Returns an iterator over the possibly contained value.",124,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",124,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",124,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",124,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",124,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",124,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",124,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",124,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",124,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",124,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",124,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",124,null],[11,"fmt","","",125,null],[11,"next","","",125,null],[11,"size_hint","","",125,null],[11,"next_back","","",125,null],[11,"clone","","",125,null],[11,"fmt","","",126,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"next_back","","",126,null],[11,"fmt","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",124,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",128,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",128,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"count","","",128,null],[11,"nth","","",128,null],[11,"last","","",128,null],[11,"next_back","","",128,null],[11,"clone","","",128,null],[11,"fmt","","",129,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"count","","",129,null],[11,"nth","","",129,null],[11,"last","","",129,null],[11,"next_back","","",129,null],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"next_back","","",130,null],[11,"fmt","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"fmt","","",132,null],[11,"fmt","","",133,null],[11,"fmt","","",134,null],[11,"fmt","","",135,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"fmt","","",136,null],[11,"clone","","",136,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"count","","",136,null],[11,"nth","","",136,null],[11,"last","","",136,null],[11,"next_back","","",136,null],[11,"fmt","","",137,null],[11,"clone","","",137,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"count","","",137,null],[11,"nth","","",137,null],[11,"last","","",137,null],[11,"next_back","","",137,null],[11,"fmt","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"count","","",138,null],[11,"nth","","",138,null],[11,"last","","",138,null],[11,"next_back","","",138,null],[11,"fmt","core::str::pattern","",139,null],[11,"eq","","",139,null],[11,"ne","","",139,null],[11,"clone","","",139,null],[11,"fmt","","",140,null],[11,"clone","","",140,null],[11,"haystack","","",140,null],[11,"next","","",140,null],[11,"next_match","","",140,null],[11,"next_reject","","",140,null],[11,"next_back","","",140,null],[11,"next_match_back","","",140,null],[11,"next_reject_back","","",140,null],[11,"fmt","","",141,null],[11,"clone","","",141,null],[11,"haystack","","",141,null],[11,"next","","",141,null],[11,"next_match","","",141,null],[11,"next_reject","","",141,null],[11,"next_back","","",141,null],[11,"next_match_back","","",141,null],[11,"next_reject_back","","",141,null],[11,"clone","","",142,null],[11,"fmt","","",142,null],[11,"haystack","","",142,null],[11,"next","","",142,null],[11,"next_match","","",142,null],[11,"next_reject","","",142,null],[11,"next_back","","",142,null],[11,"next_match_back","","",142,null],[11,"next_reject_back","","",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"haystack","","",143,null],[11,"next","","",143,null],[11,"next_match","","",143,null],[11,"next_back","","",143,null],[11,"next_match_back","","",143,null],[11,"eq","core::str","",144,null],[11,"ne","","",144,null],[11,"clone","","",144,null],[11,"fmt","","",144,null],[11,"fmt","","",144,null],[11,"fmt","","",145,null],[11,"clone","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",145,null],[11,"fmt","","",145,null],[11,"fmt","","",146,null],[11,"clone","","",146,null],[11,"next","","",146,null],[11,"size_hint","","",146,null],[11,"next_back","","",146,null],[11,"as_str","","View the underlying data as a subslice of the original data.",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"next","","",147,null],[11,"size_hint","","",147,null],[11,"next_back","","",147,null],[11,"as_str","","View the underlying data as a subslice of the original data.",147,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"count","","",148,null],[11,"last","","",148,null],[11,"nth","","",148,null],[11,"next_back","","",148,null],[11,"len","","",148,null],[11,"fmt","","",149,null],[11,"next","","",149,null],[11,"clone","","",149,null],[11,"fmt","","",150,null],[11,"next","","",150,null],[11,"clone","","",150,null],[11,"next_back","","",149,null],[11,"next_back","","",150,null],[11,"fmt","","",151,null],[11,"next","","",151,null],[11,"clone","","",151,null],[11,"fmt","","",152,null],[11,"next","","",152,null],[11,"clone","","",152,null],[11,"next_back","","",151,null],[11,"next_back","","",152,null],[11,"fmt","","",153,null],[11,"next","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",154,null],[11,"next","","",154,null],[11,"clone","","",154,null],[11,"fmt","","",155,null],[11,"next","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"next","","",156,null],[11,"clone","","",156,null],[11,"next_back","","",155,null],[11,"next_back","","",156,null],[11,"fmt","","",157,null],[11,"next","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"next","","",158,null],[11,"clone","","",158,null],[11,"next_back","","",157,null],[11,"next_back","","",158,null],[11,"fmt","","",159,null],[11,"clone","","",159,null],[11,"next","","",159,null],[11,"size_hint","","",159,null],[11,"next_back","","",159,null],[11,"fmt","","",160,null],[11,"clone","","",160,null],[11,"next","","",160,null],[11,"size_hint","","",160,null],[11,"next_back","","",160,null],[11,"fmt","","",161,null],[11,"clone","","",161,null],[11,"fmt","core::hash::sip","",162,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",162,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",162,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",162,null],[11,"finish","","",162,null],[11,"clone","","",162,null],[11,"default","","",162,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",163,null],[11,"build_hasher","","",163,null],[11,"clone","","",163,null],[11,"default","","",163,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",164,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",165,null],[11,"finish","","Finishes output and returns any error encountered.",165,null],[11,"field","","Adds a new field to the generated tuple struct output.",166,null],[11,"finish","","Finishes output and returns any error encountered.",166,null],[11,"entry","","Adds a new entry to the set output.",167,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",167,null],[11,"finish","","Finishes output and returns any error encountered.",167,null],[11,"entry","","Adds a new entry to the list output.",168,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",168,null],[11,"finish","","Finishes output and returns any error encountered.",168,null],[11,"entry","","Adds a new entry to the map output.",169,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",169,null],[11,"finish","","Finishes output and returns any error encountered.",169,null],[11,"partial_cmp","core::fmt","",170,null],[11,"eq","","",170,null],[11,"cmp","","",170,null],[11,"hash","","",170,null],[11,"default","","",170,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",170,null],[11,"clone","","",170,null],[11,"clone","","",171,null],[11,"fmt","","",171,null],[11,"fmt","","",171,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",172,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",172,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",172,null],[11,"write_fmt","","Writes some formatted information into this instance",172,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",172,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",172,null],[11,"align","","Flag indicating what form of alignment was requested",172,null],[11,"width","","Optionally specified integer width that the output should be",172,null],[11,"precision","","Optionally specified precision for numeric types",172,null],[11,"sign_plus","","Determines if the `+` flag was specified.",172,null],[11,"sign_minus","","Determines if the `-` flag was specified.",172,null],[11,"alternate","","Determines if the `#` flag was specified.",172,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",172,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",172,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",172,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",172,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",172,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",172,null],[11,"write_str","","",172,null],[11,"write_char","","",172,null],[11,"write_fmt","","",172,null],[11,"fmt","","",170,null],[11,"fmt","core::marker","",65,null],[11,"fmt","core::cell","",88,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"fmt","","",92,null],[11,"fmt","","",93,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",173,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",173,null],[11,"clone","libc","",49,null],[11,"clone","","",50,null],[11,"clone","","",174,null],[11,"clone","","",51,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",175,null],[11,"clone","","",48,null],[11,"clone","","",37,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",176,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",177,null],[11,"clone","","",178,null],[11,"clone","","",179,null],[11,"clone","","",180,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",181,null],[11,"clone","","",36,null],[11,"clone","","",182,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",183,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"cmp","","",6,null],[11,"clone","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,null],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,null],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,null],[11,"split_off","","Splits the collection into two at the given index.",7,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"clone","collections::binary_heap","",8,null],[11,"clone_from","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",8,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",8,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",8,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",8,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",8,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",8,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",8,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",8,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",8,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",8,null],[11,"push","","Pushes an item onto the binary heap.",8,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",8,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",8,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",8,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",8,null],[11,"len","","Returns the length of the binary heap.",8,null],[11,"is_empty","","Checks if the binary heap is empty.",8,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",8,null],[11,"clear","","Drops all items from the binary heap.",8,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",8,null],[11,"clone","","",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"clone","","",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next_back","","",11,null],[11,"from","","",8,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",8,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",8,null],[11,"extend","","",8,null],[11,"extend","","",8,null],[11,"drop","collections::btree::map","",12,null],[11,"clone","","",12,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",12,null],[11,"get","","Returns a reference to the value corresponding to the key.",12,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",12,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",12,null],[11,"insert","","Inserts a key-value pair into the map.",12,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",12,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",12,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",12,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",12,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"len","","",13,null],[11,"clone","","",13,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next_back","","",14,null],[11,"len","","",14,null],[11,"into_iter","","",12,null],[11,"drop","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"len","","",15,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"next_back","","",16,null],[11,"len","","",16,null],[11,"clone","","",16,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"next_back","","",17,null],[11,"len","","",17,null],[11,"clone","","",17,null],[11,"next","","",18,null],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"next_back","","",19,null],[11,"len","","",19,null],[11,"next_back","","",18,null],[11,"clone","","",18,null],[11,"next","","",20,null],[11,"next_back","","",20,null],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",12,null],[11,"extend","","",12,null],[11,"hash","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",12,null],[11,"partial_cmp","","",12,null],[11,"cmp","","",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",12,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",12,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",12,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",12,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",12,null],[11,"len","","Returns the number of elements in the map.",12,null],[11,"is_empty","","Returns true if the map contains no elements.",12,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",21,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",21,null],[11,"key","","Returns a reference to this entry&#39;s key.",21,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",22,null],[11,"into_key","","Take ownership of the key.",22,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",22,null],[11,"key","","Gets a reference to the key in the entry.",23,null],[11,"remove_pair","","Take ownership of the key and value from the map.",23,null],[11,"get","","Gets a reference to the value in the entry.",23,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",23,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",23,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",23,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",23,null],[11,"partial_cmp","collections::btree::set","",24,null],[11,"lt","","",24,null],[11,"le","","",24,null],[11,"gt","","",24,null],[11,"ge","","",24,null],[11,"cmp","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"hash","","",24,null],[11,"clone","","",24,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",24,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",24,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",24,null],[11,"difference","","Visits the values representing the difference, in ascending order.",24,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",24,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",24,null],[11,"union","","Visits the values representing the union, in ascending order.",24,null],[11,"len","","Returns the number of elements in the set.",24,null],[11,"is_empty","","Returns true if the set contains no elements.",24,null],[11,"clear","","Clears the set, removing all values.",24,null],[11,"contains","","Returns `true` if the set contains a value.",24,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",24,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",24,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",24,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",24,null],[11,"insert","","Adds a value to the set.",24,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",24,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",24,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",24,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",24,null],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.",24,null],[11,"from_iter","","",24,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",24,null],[11,"extend","","",24,null],[11,"extend","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",24,null],[11,"clone","","",25,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next_back","","",25,null],[11,"len","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"next_back","","",26,null],[11,"len","","",26,null],[11,"clone","","",27,null],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",28,null],[11,"next","","",28,null],[11,"size_hint","","",28,null],[11,"clone","","",29,null],[11,"next","","",29,null],[11,"size_hint","","",29,null],[11,"clone","","",30,null],[11,"next","","",30,null],[11,"size_hint","","",30,null],[11,"clone","","",31,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"borrow","collections::borrow","",32,null],[11,"clone","","",32,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",32,null],[11,"into_owned","","Extracts the owned data.",32,null],[11,"deref","","",32,null],[11,"cmp","","",32,null],[11,"eq","","",32,null],[11,"partial_cmp","","",32,null],[11,"fmt","","",32,null],[11,"fmt","","",32,null],[11,"hash","","",32,null],[11,"as_ref","","",32,null],[11,"hash","collections::enum_set","",33,null],[11,"cmp","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"new","","Returns an empty `EnumSet`.",33,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",33,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",33,null],[11,"clear","","",33,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",33,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",33,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",33,null],[11,"union","","Returns the union of both `EnumSets`.",33,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",33,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",33,null],[11,"remove","","Removes an enum from the EnumSet",33,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",33,null],[11,"iter","","Returns an iterator over an `EnumSet`.",33,null],[11,"sub","","",33,null],[11,"bitor","","",33,null],[11,"bitand","","",33,null],[11,"bitxor","","",33,null],[11,"clone","","",34,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"from_iter","","",33,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",33,null],[11,"extend","","",33,null],[11,"clone","collections::linked_list","",35,null],[11,"clone","","",36,null],[11,"default","","",37,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",37,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",37,null],[11,"iter","","Provides a forward iterator.",37,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",37,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",37,null],[11,"len","","Returns the length of the `LinkedList`.",37,null],[11,"clear","","Removes all elements from the `LinkedList`.",37,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",37,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",37,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",37,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",37,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",37,null],[11,"push_front","","Adds an element first in the list.",37,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",37,null],[11,"push_back","","Appends an element to the back of a list",37,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",37,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",37,null],[11,"front_place","","Returns a place for insertion at the front of the list.",37,null],[11,"back_place","","Returns a place for insertion at the back of the list.",37,null],[11,"drop","","",37,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"next_back","","",35,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"next_back","","",38,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",38,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",38,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"next_back","","",36,null],[11,"from_iter","","",37,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",37,null],[11,"extend","","",37,null],[11,"extend","","",37,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"partial_cmp","","",37,null],[11,"cmp","","",37,null],[11,"clone","","",37,null],[11,"fmt","","",37,null],[11,"hash","","",37,null],[11,"make_place","","",39,null],[11,"pointer","","",39,null],[11,"finalize","","",39,null],[11,"make_place","","",40,null],[11,"pointer","","",40,null],[11,"finalize","","",40,null],[11,"start","core::ops","",41,null],[11,"end","","",42,null],[11,"start","","",43,null],[11,"end","","",43,null],[11,"borrow","collections::vec","",7,null],[11,"borrow_mut","","",7,null],[11,"clone","collections::str","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"borrow","collections::string","",45,null],[11,"fmt","core::str::pattern","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"clone","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"haystack","","",47,null],[11,"next","","",47,null],[11,"next_match","","",47,null],[11,"next_reject","","",47,null],[11,"next_back","","",47,null],[11,"next_match_back","","",47,null],[11,"next_reject_back","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"haystack","","",48,null],[11,"next","","",48,null],[11,"next_match","","",48,null],[11,"next_reject","","",48,null],[11,"next_back","","",48,null],[11,"next_match_back","","",48,null],[11,"next_reject_back","","",48,null],[11,"clone","","",49,null],[11,"fmt","","",49,null],[11,"haystack","","",49,null],[11,"next","","",49,null],[11,"next_match","","",49,null],[11,"next_reject","","",49,null],[11,"next_back","","",49,null],[11,"next_match_back","","",49,null],[11,"next_reject_back","","",49,null],[11,"fmt","","",50,null],[11,"clone","","",50,null],[11,"haystack","","",50,null],[11,"next","","",50,null],[11,"next_match","","",50,null],[11,"next_back","","",50,null],[11,"next_match_back","","",50,null],[11,"cmp","collections::string","",45,null],[11,"partial_cmp","","",45,null],[11,"lt","","",45,null],[11,"le","","",45,null],[11,"gt","","",45,null],[11,"ge","","",45,null],[11,"fmt","","",51,null],[11,"fmt","","",52,null],[11,"new","","Creates a new empty `String`.",45,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",45,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",45,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",45,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",45,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",45,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",45,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",45,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",45,null],[11,"as_str","","Extracts a string slice containing the entire string.",45,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",45,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",45,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",45,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",45,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",45,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",45,null],[11,"push","","Appends the given `char` to the end of this `String`.",45,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",45,null],[11,"truncate","","Shortens this `String` to the specified length.",45,null],[11,"pop","","Removes the last character from the string buffer and returns it.",45,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",45,null],[11,"insert","","Inserts a character into this `String` at a byte position.",45,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",45,null],[11,"len","","Returns the length of this `String`, in bytes.",45,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",45,null],[11,"clear","","Truncates this `String`, removing all contents.",45,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",45,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",45,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",51,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",51,null],[11,"fmt","","",51,null],[11,"fmt","","",52,null],[11,"clone","","",45,null],[11,"clone_from","","",45,null],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"extend","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"eq","collections::borrow","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","collections::string","",45,null],[11,"ne","","",45,null],[11,"default","","",45,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",45,null],[11,"fmt","","",45,null],[11,"hash","","",45,null],[11,"add","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"index_mut","","",45,null],[11,"deref","","",45,null],[11,"deref_mut","","",45,null],[11,"from_str","","",45,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"fmt","","",53,null],[11,"eq","","",53,null],[11,"as_ref","","",45,null],[11,"as_ref","","",45,null],[11,"from","","",45,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",32,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",32,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",45,null],[11,"write_str","","",45,null],[11,"write_char","","",45,null],[11,"drop","","",54,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"clone","collections::vec","",7,null],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"deref","","",7,null],[11,"deref_mut","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,null],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","collections::borrow","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"eq","collections::vec","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"partial_cmp","","",7,null],[11,"cmp","","",7,null],[11,"drop","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",32,null],[11,"from","","",32,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",32,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",55,null],[11,"size_hint","","",55,null],[11,"count","","",55,null],[11,"next_back","","",55,null],[11,"clone","","",55,null],[11,"drop","","",55,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"next_back","","",56,null],[11,"drop","","",56,null],[11,"clone","collections::vec_deque","",57,null],[11,"drop","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",57,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",57,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",57,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",57,null],[11,"swap","","Swaps elements at indices `i` and `j`.",57,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",57,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",57,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",57,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",57,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",57,null],[11,"iter","","Returns a front-to-back iterator.",57,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",57,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",57,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",57,null],[11,"len","","Returns the number of elements in the `VecDeque`.",57,null],[11,"is_empty","","Returns true if the buffer contains no elements",57,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",57,null],[11,"clear","","Clears the buffer, removing all values.",57,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",57,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",57,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",57,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",57,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",57,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",57,null],[11,"push_front","","Inserts an element first in the sequence.",57,null],[11,"push_back","","Appends an element to the back of a buffer",57,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",57,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",57,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",57,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",57,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",57,null],[11,"split_off","","Splits the collection into two at the given index.",57,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",57,null],[11,"retain","","Retains only the elements specified by the predicate.",57,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",57,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"size_hint","","",58,null],[11,"next_back","","",58,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"next_back","","",59,null],[11,"clone","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"drop","","",61,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"eq","","",57,null],[11,"partial_cmp","","",57,null],[11,"cmp","","",57,null],[11,"hash","","",57,null],[11,"index","","",57,null],[11,"index_mut","","",57,null],[11,"from_iter","","",57,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",57,null],[11,"extend","","",57,null],[11,"extend","","",57,null],[11,"fmt","","",57,null],[11,"from","","",57,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",7,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",62,null],[11,"ne","","",62,null],[11,"hash","","",62,null],[11,"fmt","","",62,null],[11,"clone","","",62,null],[11,"clone","alloc::boxed","",63,null],[11,"pointer","","",64,null],[11,"make_place","","",64,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",64,null],[11,"finalize","","",65,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",63,null],[11,"drop","","",64,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",65,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",65,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",65,null],[11,"default","","",65,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",65,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",65,null],[11,"clone","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"partial_cmp","","",65,null],[11,"lt","","",65,null],[11,"le","","",65,null],[11,"ge","","",65,null],[11,"gt","","",65,null],[11,"cmp","","",65,null],[11,"hash","","",65,null],[11,"from","","",65,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",65,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",65,null],[11,"fmt","","",65,null],[11,"fmt","","",65,null],[11,"fmt","","",65,null],[11,"deref","","",65,null],[11,"deref_mut","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"call_once","","",65,null],[11,"call_once","","",65,null],[11,"clone","","",65,null],[11,"borrow","","",65,null],[11,"borrow_mut","","",65,null],[11,"as_ref","","",65,null],[11,"as_mut","","",65,null],[11,"deref","regex_syntax","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"fmt","","",67,null],[11,"clone","","",67,null],[11,"cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",68,null],[11,"clone","","",68,null],[11,"new","","Create a new builder for configuring expression parsing.",68,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",68,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",68,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",68,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",68,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",68,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",68,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",68,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",68,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",68,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",66,null],[11,"into_iter","","",66,null],[11,"new","","Create a new class from an existing set of ranges.",66,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",66,null],[11,"remove","","Removes the given character from the class if it exists.",66,null],[11,"negate","","Negates the character class.",66,null],[11,"case_fold","","Apply case folding to this character class.",66,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",67,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",67,null],[11,"remove","","Removes the given byte from the class if it exists.",67,null],[11,"negate","","Negates the byte class.",67,null],[11,"case_fold","","Apply case folding to this byte class.",67,null],[11,"deref","","",67,null],[11,"into_iter","","",67,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",66,null],[11,"fmt","","",0,null],[11,"fmt","","",67,null],[11,"fmt","","",1,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"fmt","","",69,null],[11,"clone","","",69,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",69,null],[11,"kind","","Returns the type of the regex parse error.",69,null],[11,"description","","",69,null],[11,"fmt","","",69,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to\naccess your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand.\nNote that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This\nsimplifies error handling in the calling code. Invalid type conversion also\nreturns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"hash","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"on_event","","",1,null],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"as_bool","","",0,null],[11,"as_i64","","",0,null],[11,"as_str","","",0,null],[11,"as_hash","","",0,null],[11,"as_vec","","",0,null],[11,"is_null","","",0,null],[11,"is_badvalue","","",0,null],[11,"as_f64","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,null],[11,"index","","",0,null],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",3,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",4,null],[13,"Plain","","",4,null],[13,"SingleQuoted","","",4,null],[13,"DoubleQuoted","","",4,null],[13,"Literal","","",4,null],[13,"Foled","","",4,null],[4,"TokenType","","",null,null],[13,"NoToken","","",5,null],[13,"StreamStart","","",5,null],[13,"StreamEnd","","",5,null],[13,"VersionDirective","","major, minor",5,null],[13,"TagDirective","","handle, prefix",5,null],[13,"DocumentStart","","",5,null],[13,"DocumentEnd","","",5,null],[13,"BlockSequenceStart","","",5,null],[13,"BlockMappingStart","","",5,null],[13,"BlockEnd","","",5,null],[13,"FlowSequenceStart","","",5,null],[13,"FlowSequenceEnd","","",5,null],[13,"FlowMappingStart","","",5,null],[13,"FlowMappingEnd","","",5,null],[13,"BlockEntry","","",5,null],[13,"FlowEntry","","",5,null],[13,"Key","","",5,null],[13,"Value","","",5,null],[13,"Alias","","",5,null],[13,"Anchor","","",5,null],[13,"Tag","","handle, suffix",5,null],[13,"Scalar","","",5,null],[6,"ScanResult","","",null,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"new","","",7,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",7,null],[11,"cause","","",7,null],[11,"fmt","","",7,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",8,null],[11,"next","","",8,null],[11,"new","","Creates the YAML tokenizer.",8,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",8,null],[11,"stream_started","","",8,null],[11,"stream_ended","","",8,null],[11,"mark","","",8,null],[11,"fetch_next_token","","",8,null],[11,"next_token","","",8,null],[11,"fetch_more_tokens","","",8,null],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API,\nsee `EventReceiver` trait.",null,null],[13,"NoEvent","","Reserved for internal use",9,null],[13,"StreamStart","","",9,null],[13,"StreamEnd","","",9,null],[13,"DocumentStart","","",9,null],[13,"DocumentEnd","","",9,null],[13,"Alias","","Refer to an anchor ID",9,null],[13,"Scalar","","Value, style, anchor_id, tag",9,null],[13,"SequenceStart","","Anchor ID",9,null],[13,"SequenceEnd","","",9,null],[13,"MappingStart","","Anchor ID",9,null],[13,"MappingEnd","","",9,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",10,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",11,null],[11,"new","","",11,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",11,null],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",12,null],[13,"BadHashmapKey","","",12,null],[6,"EmitResult","","",null,null],[11,"fmt","","",12,null],[11,"clone","","",12,null],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",13,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",13,null]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
